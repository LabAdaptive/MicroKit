
bin/MicroKit.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001e4 l    d  .text	00000000 .text
08012ba4 l    d  .rodata	00000000 .rodata
20000000 l    d  .data	00000000 .data
200009a4 l    d  .bss	00000000 .bss
20002178 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 obj/startup_stm32f105xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
08012358 l       .text	00000000 LoopCopyDataInit
08012350 l       .text	00000000 CopyDataInit
0801236c l       .text	00000000 LoopFillZerobss
08012366 l       .text	00000000 FillZerobss
08012390 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f1xx_hal.c
200009a4 l       .bss	00000000 uwTick
00000000 l    df *ABS*	00000000 stm32f1xx_hal_cortex.c
080004b8 l     F .text	0000004e NVIC_SetPriorityGrouping
08000508 l     F .text	0000001e NVIC_GetPriorityGrouping
08000528 l     F .text	00000032 NVIC_EnableIRQ
0800055c l     F .text	00000034 NVIC_DisableIRQ
08000590 l     F .text	00000038 NVIC_GetPendingIRQ
080005c8 l     F .text	00000034 NVIC_SetPendingIRQ
080005fc l     F .text	00000034 NVIC_ClearPendingIRQ
08000630 l     F .text	00000038 NVIC_GetActive
08000668 l     F .text	00000056 NVIC_SetPriority
080006c0 l     F .text	00000052 NVIC_GetPriority
08000714 l     F .text	00000062 NVIC_EncodePriority
08000778 l     F .text	00000068 NVIC_DecodePriority
080007e0 l     F .text	00000030 NVIC_SystemReset
08000810 l     F .text	00000050 SysTick_Config
00000000 l    df *ABS*	00000000 stm32f1xx_hal_dma.c
08002c14 l     F .text	0000004a DMA_SetConfig
00000000 l    df *ABS*	00000000 stm32f1xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_pcd.c
08004180 l     F .text	00000110 PCD_WriteEmptyTxFifo
00000000 l    df *ABS*	00000000 stm32f1xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_tim.c
0800ac7c l     F .text	00000022 TIM_DMAPeriodElapsedCplt
0800adb8 l     F .text	000000de TIM_OC1_SetConfig
0800af80 l     F .text	000000e6 TIM_OC3_SetConfig
0800b068 l     F .text	000000aa TIM_OC4_SetConfig
0800b364 l     F .text	00000080 TIM_TI2_SetConfig
0800b44c l     F .text	0000007e TIM_TI3_SetConfig
0800b4cc l     F .text	00000080 TIM_TI4_SetConfig
0800aca0 l     F .text	00000022 TIM_DMATriggerCplt
0800b588 l     F .text	00000042 TIM_ETR_SetConfig
0800b300 l     F .text	00000064 TIM_TI1_ConfigInputStage
0800b54c l     F .text	0000003c TIM_ITRx_SetConfig
0800b3e4 l     F .text	00000066 TIM_TI2_ConfigInputStage
0800b114 l     F .text	0000011c TIM_SlaveTimer_SetConfig
00000000 l    df *ABS*	00000000 stm32f1xx_hal_tim_ex.c
0800caa8 l     F .text	00000044 TIM_CCxNChannelCmd
00000000 l    df *ABS*	00000000 stm32f1xx_hal_uart.c
0800de6c l     F .text	000001a2 UART_SetConfig
0800db10 l     F .text	00000134 UART_WaitOnFlagUntilTimeout
0800d9f0 l     F .text	00000050 UART_DMATransmitCplt
0800da40 l     F .text	0000001a UART_DMATxHalfCplt
0800dad4 l     F .text	0000003a UART_DMAError
0800da5c l     F .text	0000005c UART_DMAReceiveCplt
0800dab8 l     F .text	0000001a UART_DMARxHalfCplt
0800dd44 l     F .text	00000126 UART_Receive_IT
0800dc44 l     F .text	000000b8 UART_Transmit_IT
0800dcfc l     F .text	00000046 UART_EndTransmit_IT
00000000 l    df *ABS*	00000000 stm32f1xx_ll_usb.c
0800fc54 l     F .text	0000006e USB_CoreReset
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_msp.c
200009a8 l     O .bss	00000038 hdma_tx.8036
00000000 l    df *ABS*	00000000 stm32f1xx_it.c
00000000 l    df *ABS*	00000000 system_stm32f1xx.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
20000004 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
08010224 l     F .text	000000d8 USBD_CDC_Init
080102fc l     F .text	0000005a USBD_CDC_DeInit
08010358 l     F .text	000000c6 USBD_CDC_Setup
080104b0 l     F .text	0000004e USBD_CDC_EP0_RxReady
08010420 l     F .text	00000038 USBD_CDC_DataIn
08010458 l     F .text	00000058 USBD_CDC_DataOut
08010524 l     F .text	00000022 USBD_CDC_GetHSCfgDesc
08010500 l     F .text	00000022 USBD_CDC_GetFSCfgDesc
08010548 l     F .text	00000022 USBD_CDC_GetOtherSpeedCfgDesc
200009e0 l     O .bss	00000001 ifalt.8078
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
080106c8 l     F .text	000000e2 CDC_Itf_Init
080107ac l     F .text	00000022 CDC_Itf_DeInit
080107d0 l     F .text	0000019c CDC_Itf_Control
08010aa8 l     F .text	0000002c CDC_Itf_Receive
08010cd4 l     F .text	0000000c Error_Handler
08010c60 l     F .text	00000060 TIM_Config
08010af0 l     F .text	00000170 ComPort_Config
00000000 l    df *ABS*	00000000 usbd_conf.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
080119e4 l     F .text	000001f6 USBD_GetDescriptor
08011bdc l     F .text	0000007c USBD_SetAddress
08011c58 l     F .text	00000150 USBD_SetConfig
08011da8 l     F .text	00000062 USBD_GetConfig
08011e0c l     F .text	00000052 USBD_GetStatus
08011e60 l     F .text	00000034 USBD_SetFeature
08011e94 l     F .text	0000004e USBD_ClrFeature
200009ec l     O .bss	00000001 cfgidx.8083
08011ff4 l     F .text	00000030 USBD_GetLen
00000000 l    df *ABS*	00000000 usbd_desc.c
0801216c l     F .text	0000005c Get_SerialNum
080121c8 l     F .text	00000076 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrk.c
20000a24 l     O .bss	00000004 heap_end.4061
00000000 l    df *ABS*	00000000 impure.c
20000578 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000200 l       *ABS*	00000000 _Min_Heap_Size
08012390  w    F .text	00000002 RTC_Alarm_IRQHandler
08012390  w    F .text	00000002 EXTI2_IRQHandler
08007cd4 g     F .text	000000de HAL_TIM_OC_Start_IT
080076ec g     F .text	00000124 HAL_RCCEx_DisablePLL2
08002f98 g     F .text	000001be HAL_GPIO_DeInit
08009c50 g     F .text	0000018c HAL_TIM_PWM_ConfigChannel
08012104 g     F .text	00000032 USBD_VCP_ConfigStrDescriptor
08000470 g     F .text	00000024 HAL_DBGMCU_EnableDBGStandbyMode
08004038 g     F .text	00000098 HAL_PCD_EP_ClrStall
080100e0 g     F .text	0000000c DebugMon_Handler
08010e94 g     F .text	00000042 HAL_PCD_ResetCallback
080078f0 g     F .text	00000036 HAL_TIM_Base_Start
08007928 g     F .text	00000056 HAL_TIM_Base_Stop
08010ad4 g     F .text	0000001a HAL_UART_TxCpltCallback
08007aac g     F .text	0000005e HAL_TIM_Base_Stop_DMA
0800b7a0  w    F .text	00000012 HAL_TIMEx_HallSensor_MspInit
0800f184 g     F .text	00000068 USB_ActivateSetup
0800be9c g     F .text	00000116 HAL_TIMEx_OCN_Stop_DMA
0800412c g     F .text	0000001c HAL_PCD_ActivateRemoteWakeup
08007db4 g     F .text	0000011e HAL_TIM_OC_Stop_IT
08000a24 g     F .text	00000096 HAL_DMA_Init
08003d7c g     F .text	00000096 HAL_PCD_EP_Close
0800a8a0 g     F .text	0000003c HAL_TIM_ConfigTI1Input
0800a9b4 g     F .text	000000a4 HAL_TIM_ReadCapturedValue
08009774 g     F .text	000000d4 HAL_TIM_Encoder_Stop_DMA
08010f74 g     F .text	0000001a HAL_PCD_DisconnectCallback
080112d4 g     F .text	0000003e USBD_SetClassConfig
080064c8 g     F .text	00000046 HAL_RCC_GetPCLK1Freq
08012390  w    F .text	00000002 TIM1_CC_IRQHandler
08000874 g     F .text	00000036 HAL_NVIC_SetPriority
0800cc24 g     F .text	000000b8 HAL_LIN_Init
08006510 g     F .text	00000046 HAL_RCC_GetPCLK2Freq
08010e40 g     F .text	00000036 HAL_PCD_DataInStageCallback
080100b4 g     F .text	00000006 HardFault_Handler
0801291c g     F .text	00000002 __malloc_unlock
0800f148 g     F .text	00000020 USB_ClearInterrupts
080088a4 g     F .text	00000056 HAL_TIM_IC_Init
08012390  w    F .text	00000002 TIM6_IRQHandler
0800d9bc g     F .text	0000001c HAL_UART_GetState
080100f8 g     F .text	0000000a SysTick_Handler
0800ba38 g     F .text	00000082 HAL_TIMEx_OCN_Stop
08003188 g     F .text	00000030 HAL_GPIO_WritePin
08010670 g     F .text	00000058 USBD_CDC_ReceivePacket
08012390  w    F .text	00000002 PVD_IRQHandler
08010e78 g     F .text	0000001a HAL_PCD_SOFCallback
08009848 g     F .text	0000020e HAL_TIM_IRQHandler
08012c5c g       *ABS*	00000000 _sidata
08006470 g     F .text	00000056 HAL_RCC_GetHCLKFreq
080100ec g     F .text	0000000c PendSV_Handler
080100a8 g     F .text	0000000c NMI_Handler
080008ac g     F .text	0000001a HAL_NVIC_EnableIRQ
08012c5c g       .data	00000000 __exidx_end
08012390  w    F .text	00000002 CAN2_RX1_IRQHandler
08012390  w    F .text	00000002 EXTI3_IRQHandler
08011628 g     F .text	0000002a USBD_LL_Suspend
08006294 g     F .text	000001da HAL_RCC_GetSysClockFreq
0800b994 g     F .text	00000060 HAL_TIMEx_HallSensor_Stop_DMA
0800d7e8  w    F .text	00000012 HAL_UART_RxHalfCpltCallback
08007868 g     F .text	00000060 HAL_TIM_Base_DeInit
08001168 g     F .text	00000062 HAL_DMA_Start
08000218 g     F .text	0000005c HAL_DeInit
08003c44 g     F .text	00000042 HAL_PCD_DevDisconnect
0801172c g     F .text	0000009e USBD_StdDevReq
08012bf8 g     O .rodata	00000010 aAPBAHBPrescTable
0800bff8 g     F .text	00000082 HAL_TIMEx_PWMN_Stop
0800322c g     F .text	00000036 HAL_GPIO_EXTI_IRQHandler
08012024 g     F .text	00000026 USBD_VCP_DeviceDescriptor
0800e3e0 g     F .text	0000012e USB_ActivateEndpoint
08000274  w    F .text	0000000c HAL_MspInit
08011110 g     F .text	00000058 USBD_LL_IsStallEP
08011050 g     F .text	0000001e USBD_LL_Start
08000a18  w    F .text	0000000c HAL_SYSTICK_Callback
080112a4 g     F .text	00000018 USBD_Start
080031b8 g     F .text	00000022 HAL_GPIO_TogglePin
080095a4 g     F .text	000001d0 HAL_TIM_Encoder_Start_DMA
20002174 g     O .bss	00000004 errno
0800e5fc g     F .text	00000424 USB_EPStartXfer
08012ba4 g       .text	00000000 _etext
200009a4 g       .bss	00000000 _sbss
080031dc g     F .text	00000050 HAL_GPIO_LockPin
08007bc4  w    F .text	00000012 HAL_TIM_OC_MspInit
0800b848 g     F .text	00000040 HAL_TIMEx_HallSensor_Start_IT
0800ab08 g     F .text	0000001c HAL_TIM_PWM_GetState
0800ed48 g     F .text	000000da USB_EPSetStall
0800038c g     F .text	00000036 HAL_GetREVID
0800f424 g     F .text	0000006c USB_DriveVbus
08004368 g     F .text	000000b2 HAL_RCC_DeInit
0800e35c g     F .text	0000002e USB_SetDevSpeed
0800d600 g     F .text	000001aa HAL_UART_IRQHandler
0800e04c g     F .text	00000022 USB_EnableGlobalInt
080011cc g     F .text	00000092 HAL_DMA_Start_IT
08011270 g     F .text	00000034 USBD_RegisterClass
08007b64 g     F .text	00000060 HAL_TIM_OC_DeInit
08002c60 g     F .text	00000336 HAL_GPIO_Init
08011608 g     F .text	00000020 USBD_LL_SetSpeed
0800e318 g     F .text	00000044 USB_FlushRxFifo
080003c4 g     F .text	0000001c HAL_GetDEVID
0800c45c g     F .text	00000116 HAL_TIMEx_PWMN_Stop_DMA
08010ef4 g     F .text	0000001a HAL_PCD_ResumeCallback
08009f5c g     F .text	00000224 HAL_TIM_DMABurst_WriteStart
0800ca40  w    F .text	00000012 HAL_TIMEx_CommutationCallback
0800fa78 g     F .text	00000074 USB_DoPing
08011834 g     F .text	000001ae USBD_StdEPReq
08008970  w    F .text	00000012 HAL_TIM_IC_MspDeInit
08012390  w    F .text	00000002 EXTI0_IRQHandler
08002be0 g     F .text	0000001a HAL_DMA_GetState
08012390  w    F .text	00000002 I2C2_EV_IRQHandler
080116c8 g     F .text	0000001a USBD_LL_IsoOUTIncomplete
08012390  w    F .text	00000002 CAN1_RX0_IRQHandler
080122fc g     F .text	00000026 USBD_CtlSendStatus
08000300  w    F .text	0000002a HAL_Delay
080117cc g     F .text	00000066 USBD_StdItfReq
20000000 g     O .data	00000004 SystemCoreClock
08003ee8 g     F .text	0000009a HAL_PCD_EP_Transmit
08011ee4 g     F .text	00000072 USBD_ParseSetupRequest
0800b8e8 g     F .text	000000aa HAL_TIMEx_HallSensor_Start_DMA
0800ab24 g     F .text	0000001c HAL_TIM_IC_GetState
08012394 g     F .text	00000010 malloc
0800b740 g     F .text	00000060 HAL_TIMEx_HallSensor_DeInit
08000984 g     F .text	0000001a HAL_NVIC_ClearPendingIRQ
0800f490 g     F .text	0000002a USB_GetHostSpeed
0800d864 g     F .text	00000054 HAL_MultiProcessor_EnterMuteMode
0800d19c g     F .text	000000ce HAL_UART_Receive_IT
2000012c g     O .data	0000001c VCP_Desc
080100cc g     F .text	00000006 UsageFault_Handler
0800fc28 g     F .text	0000002a USB_DeActivateRemoteWakeup
0800ab5c g     F .text	0000001c HAL_TIM_Encoder_GetState
08012390  w    F .text	00000002 CAN2_SCE_IRQHandler
0800a180 g     F .text	000000b0 HAL_TIM_DMABurst_WriteStop
08012390  w    F .text	00000002 ADC1_2_IRQHandler
200009f8 g     O .bss	00000004 __malloc_top_pad
08007bec g     F .text	00000052 HAL_TIM_OC_Start
200009a4 g       .bss	00000000 __bss_start__
0800d964 g     F .text	00000058 HAL_HalfDuplex_EnableReceiver
08003158 g     F .text	00000030 HAL_GPIO_ReadPin
0800877c g     F .text	00000126 HAL_TIM_PWM_Stop_DMA
20000c4c g     O .bss	00000004 BuffLength
08008e4c g     F .text	00000078 HAL_TIM_OnePulse_Init
20000c50 g     O .bss	00000040 UartHandle
08011678 g     F .text	00000034 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08012390  w    F .text	00000002 SPI1_IRQHandler
08000908 g     F .text	0000000e HAL_NVIC_GetPriorityGrouping
08012920 g     F .text	00000026 _sbrk_r
0800c07c g     F .text	000000de HAL_TIMEx_PWMN_Start_IT
0800aa6c  w    F .text	00000012 HAL_TIM_OC_DelayElapsedCallback
08010a48 g     F .text	0000005e HAL_UART_RxCpltCallback
08012390  w    F .text	00000002 TAMPER_IRQHandler
08010ce0 g     F .text	000000d6 HAL_PCD_MspInit
0800e0e4 g     F .text	000001e8 USB_DevInit
08003f84 g     F .text	000000b4 HAL_PCD_EP_SetStall
08009390 g     F .text	0000008e HAL_TIM_Encoder_Stop
0800a554 g     F .text	00000188 HAL_TIM_ConfigOCrefClear
08011218 g     F .text	00000056 USBD_Init
20001ccc g     O .bss	000003a8 hpcd
0800fd1c g     F .text	00000126 SystemClock_Config
08012390  w    F .text	00000002 CAN2_RX0_IRQHandler
200009f4 g     O .bss	00000004 __malloc_max_sbrked_mem
080008f0 g     F .text	00000018 HAL_SYSTICK_Config
20000148 g     O .data	0000001a USBD_StringSerial
0800d454 g     F .text	0000009a HAL_UART_DMAPause
08012c5c g       .data	00000000 __exidx_start
0800679c  w    F .text	0000000c HAL_RCC_CSSCallback
200000d0 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080008e4 g     F .text	0000000a HAL_NVIC_SystemReset
0800f3d8 g     F .text	0000004a USB_ResetPort
08007bd8  w    F .text	00000012 HAL_TIM_OC_MspDeInit
080122d8 g     F .text	00000024 USBD_CtlContinueRx
0800cd9c g     F .text	00000068 HAL_UART_DeInit
08003cd4 g     F .text	000000a8 HAL_PCD_EP_Open
08012390  w    F .text	00000002 DMA2_Channel2_IRQHandler
08012390  w    F .text	00000002 DMA1_Channel4_IRQHandler
08003580 g     F .text	00000592 HAL_PCD_IRQHandler
08008484 g     F .text	0000011e HAL_TIM_PWM_Stop_IT
08012b84 g     F .text	00000020 _sbrk
08010f58 g     F .text	0000001a HAL_PCD_ConnectCallback
0800b7c8 g     F .text	00000030 HAL_TIMEx_HallSensor_Start
080110c0 g     F .text	00000026 USBD_LL_StallEP
08000350  w    F .text	00000024 HAL_ResumeTick
08012390  w    F .text	00000002 USART3_IRQHandler
080120dc g     F .text	00000026 USBD_VCP_SerialStrDescriptor
08012390  w    F .text	00000002 RTC_IRQHandler
08006558 g     F .text	000001a2 HAL_RCC_GetOscConfig
0800cf7c g     F .text	00000170 HAL_UART_Receive
080082a0  w    F .text	00000012 HAL_TIM_PWM_MspDeInit
08009420 g     F .text	000000ae HAL_TIM_Encoder_Start_IT
20002178 g       .bss	00000000 _ebss
0800aabc  w    F .text	00000012 HAL_TIM_ErrorCallback
08008f38  w    F .text	00000012 HAL_TIM_OnePulse_MspDeInit
08010118 g     F .text	00000016 DMA1_Channel7_IRQHandler
0800ecf0 g     F .text	00000056 USB_ReadPacket
0800c7c4 g     F .text	000000b0 HAL_TIMEx_ConfigCommutationEvent_IT
0801234c  w    F .text	00000030 Reset_Handler
0800711c g     F .text	00000258 HAL_RCCEx_EnablePLLI2S
2000008c g     O .data	00000043 USBD_CDC_CfgFSDesc
0800efc0 g     F .text	0000002c USB_DevConnect
08010f10 g     F .text	00000022 HAL_PCD_ISOOUTIncompleteCallback
0800acc4 g     F .text	000000f4 TIM_Base_SetConfig
080088fc g     F .text	00000060 HAL_TIM_IC_DeInit
08012390  w    F .text	00000002 CAN1_RX1_IRQHandler
08010cc0 g     F .text	00000012 HAL_UART_ErrorCallback
08006be4 g     F .text	000000aa HAL_RCCEx_GetPeriphCLKConfig
0800f018 g     F .text	0000002a USB_ReadInterrupts
08010f34 g     F .text	00000022 HAL_PCD_ISOINIncompleteCallback
08000abc g     F .text	000006aa HAL_DMA_DeInit
08012390  w    F .text	00000002 UART5_IRQHandler
08007980 g     F .text	00000036 HAL_TIM_Base_Start_IT
0800ee24 g     F .text	000000d2 USB_EPClearStall
080079b8 g     F .text	00000056 HAL_TIM_Base_Stop_IT
080001e4 g     F .text	00000032 HAL_Init
0800c680 g     F .text	000000a2 HAL_TIMEx_OnePulseN_Stop_IT
0801229c g     F .text	0000003c USBD_CtlPrepareRx
08012390  w    F .text	00000002 TIM4_IRQHandler
08012390  w    F .text	00000002 DMA2_Channel1_IRQHandler
08000404 g     F .text	00000024 HAL_DBGMCU_DisableDBGSleepMode
08010db8 g     F .text	0000002a HAL_PCD_MspDeInit
0801061c g     F .text	00000054 USBD_CDC_TransmitPacket
08008a0c g     F .text	000000be HAL_TIM_IC_Start_IT
08008f24  w    F .text	00000012 HAL_TIM_OnePulse_MspInit
0800044c g     F .text	00000024 HAL_DBGMCU_DisableDBGStopMode
08003264  w    F .text	00000014 HAL_GPIO_EXTI_Callback
08012324 g     F .text	00000026 USBD_CtlReceiveStatus
20002178 g       ._user_heap_stack	00000000 end
20000114 g     O .data	00000008 LineCoding
08012390  w    F .text	00000002 I2C1_EV_IRQHandler
08008f4c g     F .text	00000050 HAL_TIM_OnePulse_Start
08011070 g     F .text	00000028 USBD_LL_OpenEP
0800f168 g     F .text	0000001c USB_GetMode
0800622c g     F .text	00000032 HAL_RCC_EnableCSS
08011488 g     F .text	0000011e USBD_LL_DataInStage
0800cb80 g     F .text	000000a2 HAL_HalfDuplex_Init
08008308 g     F .text	0000009a HAL_TIM_PWM_Stop
0800fbec g     F .text	0000003a USB_ActivateRemoteWakeup
08010f90 g     F .text	000000be USBD_LL_Init
0800faec g     F .text	000000fe USB_StopHost
08012390  w    F .text	00000002 DMA1_Channel6_IRQHandler
08011f58 g     F .text	00000020 USBD_CtlError
0800f0ac g     F .text	0000003c USB_ReadDevOutEPInterrupt
20000a28 g     O .bss	00000224 USBD_Device
20000010 g     O .data	00000038 USBD_CDC
08011314 g     F .text	00000026 USBD_ClrClassConfig
08012390  w    F .text	00000002 UART4_IRQHandler
08012390  w    F .text	00000002 DMA2_Channel4_IRQHandler
08010590 g     F .text	0000002e USBD_CDC_RegisterInterface
20002178 g       .bss	00000000 __bss_end__
0800aad0 g     F .text	0000001c HAL_TIM_Base_GetState
080129ec g     F .text	00000198 _free_r
0800a230 g     F .text	00000224 HAL_TIM_DMABurst_ReadStart
08010144 g     F .text	00000012 TIM3_IRQHandler
08012390  w    F .text	00000002 RCC_IRQHandler
08004290 g     F .text	0000009a HAL_PCDEx_SetTxFiFo
08012390  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
0800b230 g     F .text	000000d0 TIM_TI1_SetConfig
08012390  w    F .text	00000002 DMA1_Channel1_IRQHandler
0800b888 g     F .text	00000060 HAL_TIMEx_HallSensor_Stop_IT
08010e08 g     F .text	00000038 HAL_PCD_DataOutStageCallback
08012390 g       .text	00000002 Default_Handler
20000570 g     O .data	00000004 __malloc_sbrk_base
080120a8 g     F .text	00000032 USBD_VCP_ManufacturerStrDescriptor
2000011c g     O .data	00000010 USBD_CDC_fops
08003eb4 g     F .text	00000032 HAL_PCD_EP_GetRxCount
0800032c  w    F .text	00000024 HAL_SuspendTick
080116ac g     F .text	0000001a USBD_LL_IsoINIncomplete
200009e8 g     O .bss	00000004 UserTxBufPtrOut
20000c90 g     O .bss	00000800 UserTxBuffer
08001260 g     F .text	0000007c HAL_DMA_Abort
080110e8 g     F .text	00000026 USBD_LL_ClearStallEP
0800eef8 g     F .text	00000080 USB_StopDevice
08012390  w    F .text	00000002 EXTI15_10_IRQHandler
0800c15c g     F .text	00000136 HAL_TIMEx_PWMN_Stop_IT
08004164 g     F .text	0000001c HAL_PCD_GetState
0800bcd4 g     F .text	000001c6 HAL_TIMEx_OCN_Start_DMA
08003c88 g     F .text	0000004a HAL_PCD_SetAddress
08007ed4 g     F .text	000001d6 HAL_TIM_OC_Start_DMA
0800f4dc g     F .text	000001aa USB_HC_Init
0800b610 g     F .text	0000012e HAL_TIMEx_HallSensor_Init
08005ac8 g     F .text	000006ca HAL_RCC_ClockConfig
08000860 g     F .text	00000014 HAL_NVIC_SetPriorityGrouping
200009fc g     O .bss	00000028 __malloc_current_mallinfo
08009298 g     F .text	00000060 HAL_TIM_Encoder_DeInit
0800ac0c g     F .text	0000006e TIM_DMACaptureCplt
0800b9f4 g     F .text	00000042 HAL_TIMEx_OCN_Start
080008c8 g     F .text	0000001a HAL_NVIC_DisableIRQ
0800f24c g     F .text	00000120 USB_HostInit
08012390  w    F .text	00000002 TIM7_IRQHandler
08010ed8 g     F .text	0000001a HAL_PCD_SuspendCallback
08003530 g     F .text	0000004e HAL_PCD_Stop
0801056c g     F .text	00000022 USBD_CDC_GetDeviceQualifierDescriptor
08012390  w    F .text	00000002 CAN2_TX_IRQHandler
08012390  w    F .text	00000002 TIM5_IRQHandler
08007810 g     F .text	00000056 HAL_TIM_Base_Init
0801096c g     F .text	000000da HAL_TIM_PeriodElapsedCallback
08009320 g     F .text	0000006e HAL_TIM_Encoder_Start
0800916c g     F .text	0000012c HAL_TIM_Encoder_Init
0800bb9c g     F .text	00000136 HAL_TIMEx_OCN_Stop_IT
08007488 g     F .text	00000264 HAL_RCCEx_EnablePLL2
08012390  w    F .text	00000002 EXTI9_5_IRQHandler
080116e4 g     F .text	00000016 USBD_LL_DevConnected
08008d64 g     F .text	000000e6 HAL_TIM_IC_Stop_DMA
0800ce2c g     F .text	00000150 HAL_UART_Transmit
0800ab78 g     F .text	00000022 TIM_DMAError
20000164 g     O .data	00000408 __malloc_av_
0800e38c g     F .text	00000054 USB_GetDevSpeed
08000374 g     F .text	00000016 HAL_GetHalVersion
080002e8  w    F .text	00000018 HAL_GetTick
08012918 g     F .text	00000002 __malloc_lock
0800432c g     F .text	00000022 HAL_PCDEx_SetRxFiFo
08012074 g     F .text	00000032 USBD_VCP_ProductStrDescriptor
0800d7c0  w    F .text	00000012 HAL_UART_TxHalfCpltCallback
08012390  w    F .text	00000002 SPI2_IRQHandler
08012c40 g     O .rodata	00000012 hUSBDDeviceDesc
0800ca68 g     F .text	00000022 TIMEx_DMACommutationCplt
0800a6dc g     F .text	000001c4 HAL_TIM_ConfigClockSource
080100bc g     F .text	00000006 MemManage_Handler
08007374 g     F .text	00000114 HAL_RCCEx_DisablePLLI2S
0800fcc4 g     F .text	00000058 main
08007c40 g     F .text	00000092 HAL_TIM_OC_Stop
080078dc  w    F .text	00000012 HAL_TIM_Base_MspDeInit
08008f9c g     F .text	000000a0 HAL_TIM_OnePulse_Stop
080009a0 g     F .text	0000001e HAL_NVIC_GetActive
200009f0 g     O .bss	00000004 __malloc_max_total_mem
08008ec4 g     F .text	00000060 HAL_TIM_OnePulse_DeInit
08012390  w    F .text	00000002 CAN1_TX_IRQHandler
080081d4 g     F .text	00000056 HAL_TIM_PWM_Init
080100d4 g     F .text	0000000c SVC_Handler
080080ac g     F .text	00000126 HAL_TIM_OC_Stop_DMA
08012390  w    F .text	00000002 DMA2_Channel5_IRQHandler
080083a4 g     F .text	000000de HAL_TIM_PWM_Start_IT
08009a58 g     F .text	000000c0 HAL_TIM_OC_ConfigChannel
08003484 g     F .text	00000038 HAL_PCD_DeInit
080123b4 g     F .text	00000562 _malloc_r
080066fc g     F .text	00000076 HAL_RCC_GetClockConfig
0800aa80  w    F .text	00000012 HAL_TIM_IC_CaptureCallback
0800895c  w    F .text	00000012 HAL_TIM_IC_MspInit
08006c90 g     F .text	0000048a HAL_RCCEx_GetPeriphCLKFreq
08008acc g     F .text	000000de HAL_TIM_IC_Stop_IT
080115a8 g     F .text	0000005e USBD_LL_Reset
080111f0 g     F .text	00000026 USBD_LL_GetRxDataSize
0800a8dc g     F .text	0000006a HAL_TIM_SlaveConfigSynchronization
08012390  w    F .text	00000002 DMA1_Channel5_IRQHandler
20001490 g     O .bss	00000800 UserRxBuffer
08012c54 g     O .rodata	00000004 USBD_LangIDDesc
08012390  w    F .text	00000002 EXTI4_IRQHandler
080113d0 g     F .text	000000b6 USBD_LL_DataOutStage
08012948 g     F .text	000000a2 _malloc_trim_r
0800c294 g     F .text	000001c6 HAL_TIMEx_PWMN_Start_DMA
0800e010 g     F .text	0000003c USB_CoreInit
08010158 g     F .text	000000cc SystemInit
0800e070 g     F .text	00000022 USB_DisableGlobalInt
080034e4 g     F .text	0000004c HAL_PCD_Start
0800e094 g     F .text	0000004e USB_SetCurrentMode
0800a504 g     F .text	0000004e HAL_TIM_GenerateEvent
0800fe44 g     F .text	000001d4 HAL_UART_MspInit
0800aa94  w    F .text	00000012 HAL_TIM_PWM_PulseFinishedCallback
0800ea20 g     F .text	0000026e USB_EP0StartXfer
08000964 g     F .text	0000001e HAL_NVIC_GetPendingIRQ
0800903c g     F .text	00000070 HAL_TIM_OnePulse_Start_IT
08012390  w    F .text	00000002 DMA1_Channel3_IRQHandler
0800c874 g     F .text	000000cc HAL_TIMEx_ConfigCommutationEvent_DMA
0800028c  w    F .text	00000038 HAL_InitTick
08011168 g     F .text	00000026 USBD_LL_SetUSBAddress
200009a0 g     O .data	00000004 _impure_ptr
08012390  w    F .text	00000002 TIM1_UP_IRQHandler
080002c4  w    F .text	00000022 HAL_IncTick
08011098 g     F .text	00000026 USBD_LL_CloseEP
08001e24 g     F .text	00000dbc HAL_DMA_IRQHandler
0800ca8c g     F .text	0000001c HAL_TIMEx_HallSensor_GetState
080112bc g     F .text	00000016 USBD_RunTestMode
08004148 g     F .text	0000001c HAL_PCD_DeActivateRemoteWakeup
080040d0 g     F .text	0000005a HAL_PCD_EP_Flush
08012278 g     F .text	00000024 USBD_CtlContinueSendData
08011654 g     F .text	00000022 USBD_LL_Resume
08012390  w    F .text	00000002 WWDG_IRQHandler
0800babc g     F .text	000000de HAL_TIMEx_OCN_Start_IT
08002bfc g     F .text	00000018 HAL_DMA_GetError
0800aaa8  w    F .text	00000012 HAL_TIM_TriggerCallback
08011190 g     F .text	0000002e USBD_LL_Transmit
08012390  w    F .text	00000002 TIM2_IRQHandler
08003278 g     F .text	0000020a HAL_PCD_Init
20000048 g     O .data	00000043 USBD_CDC_CfgHSDesc
0800c9b4 g     F .text	0000008a HAL_TIMEx_MasterConfigSynchronization
0800a948 g     F .text	0000006a HAL_TIM_SlaveConfigSynchronization_IT
08000428 g     F .text	00000024 HAL_DBGMCU_EnableDBGStopMode
08012390  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
0800ae98 g     F .text	000000e8 TIM_OC2_SetConfig
08011f78 g     F .text	0000007c USBD_GetString
080085a4 g     F .text	000001d6 HAL_TIM_PWM_Start_DMA
08010de4 g     F .text	00000022 HAL_PCD_SetupStageCallback
080009c0 g     F .text	0000004a HAL_SYSTICK_CLKSourceConfig
08003c00 g     F .text	00000042 HAL_PCD_DevConnect
08012390  w    F .text	00000002 TIM1_BRK_IRQHandler
2000ffff g       *ABS*	00000000 _estack
0800ab9c g     F .text	0000006e TIM_DMADelayPulseCplt
0800b7f8 g     F .text	00000050 HAL_TIMEx_HallSensor_Stop
08012390  w    F .text	00000002 EXTI1_IRQHandler
0800f86c g     F .text	0000001e USB_HC_ReadInterrupt
0800d368 g     F .text	000000ea HAL_UART_Receive_DMA
08000280  w    F .text	0000000c HAL_MspDeInit
08007a10 g     F .text	0000009c HAL_TIM_Base_Start_DMA
200009a4 g       .data	00000000 _edata
080003e0 g     F .text	00000024 HAL_DBGMCU_EnableDBGSleepMode
080089b8 g     F .text	00000052 HAL_TIM_IC_Stop
0800d26c g     F .text	000000fa HAL_UART_Transmit_DMA
0800f88c g     F .text	000001ea USB_HC_Halt
080082b4 g     F .text	00000052 HAL_TIM_PWM_Start
0800c940 g     F .text	00000074 HAL_TIMEx_ConfigBreakDeadTime
0800f0e8 g     F .text	00000060 USB_ReadDevInEPInterrupt
080078c8  w    F .text	00000012 HAL_TIM_Base_MspInit
08006260 g     F .text	00000032 HAL_RCC_DisableCSS
0800d90c g     F .text	00000058 HAL_HalfDuplex_EnableTransmitter
0800a454 g     F .text	000000b0 HAL_TIM_DMABurst_ReadStop
0800f078 g     F .text	00000034 USB_ReadDevAllInEpInterrupt
0800b7b4  w    F .text	00000012 HAL_TIMEx_HallSensor_MspDeInit
0800aaec g     F .text	0000001c HAL_TIM_OC_GetState
08010130 g     F .text	00000012 USART2_IRQHandler
0800441c g     F .text	000016aa HAL_RCC_OscConfig
0800c574 g     F .text	00000032 HAL_TIMEx_OnePulseN_Start
2000056c g     O .data	00000004 __malloc_trim_threshold
0800d4f0 g     F .text	000000be HAL_UART_DMAResume
08000000 g     O .isr_vector	00000000 g_pfnVectors
08009b18 g     F .text	00000138 HAL_TIM_IC_ConfigChannel
08012240 g     F .text	00000038 USBD_CtlSendData
0800d5b0 g     F .text	0000004e HAL_UART_DMAStop
080067a8 g     F .text	0000043c HAL_RCCEx_PeriphCLKConfig
0800c724 g     F .text	000000a0 HAL_TIMEx_ConfigCommutationEvent
08008984 g     F .text	00000032 HAL_TIM_IC_Start
08012390  w    F .text	00000002 I2C2_ER_IRQHandler
08012390  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800bfb4 g     F .text	00000042 HAL_TIMEx_PWMN_Start
080092f8  w    F .text	00000012 HAL_TIM_Encoder_MspInit
0800e510 g     F .text	000000ea USB_DeactivateEndpoint
0800ec90 g     F .text	00000060 USB_WritePacket
08000918 g     F .text	0000002e HAL_NVIC_GetPriority
0800b5cc g     F .text	00000044 TIM_CCxChannelCmd
08012390  w    F .text	00000002 CAN1_SCE_IRQHandler
08012390  w    F .text	00000002 FLASH_IRQHandler
080094d0 g     F .text	000000d4 HAL_TIM_Encoder_Stop_IT
0800f044 g     F .text	00000034 USB_ReadDevAllOutEpInterrupt
0801204c g     F .text	00000026 USBD_VCP_LangIDStrDescriptor
20002074 g     O .bss	00000100 USBD_StrDesc
080100c4 g     F .text	00000006 BusFault_Handler
08012390  w    F .text	00000002 USART1_IRQHandler
08010018 g     F .text	00000090 HAL_UART_MspDeInit
0800d8b8 g     F .text	00000054 HAL_MultiProcessor_ExitMuteMode
08000a0c g     F .text	0000000a HAL_SYSTICK_IRQHandler
080116fc g     F .text	0000002e USBD_LL_DevDisconnected
0800d9d8 g     F .text	00000018 HAL_UART_GetError
08010104 g     F .text	00000012 OTG_FS_IRQHandler
08012390  w    F .text	00000002 SPI3_IRQHandler
08006774 g     F .text	00000028 HAL_RCC_NMI_IRQHandler
20001c90 g     O .bss	0000003c TimHandle
0800efec g     F .text	0000002c USB_DevDisconnect
0800828c  w    F .text	00000012 HAL_TIM_PWM_MspInit
08004350  w    F .text	00000016 HAL_PCDEx_SetConnectionState
0800caec g     F .text	00000092 HAL_UART_Init
08009ddc g     F .text	00000180 HAL_TIM_OnePulse_ConfigChannel
08006194 g     F .text	00000098 HAL_RCC_MCOConfig
08012390  w    F .text	00000002 I2C1_ER_IRQHandler
08000494 g     F .text	00000024 HAL_DBGMCU_DisableDBGStandbyMode
0800ab40 g     F .text	0000001c HAL_TIM_OnePulse_GetState
08007b0c g     F .text	00000056 HAL_TIM_OC_Init
080111c0 g     F .text	0000002e USBD_LL_PrepareReceive
080090ac g     F .text	000000c0 HAL_TIM_OnePulse_Stop_IT
0800f36c g     F .text	0000006c USB_InitFSLSPClkSel
0800d810 g     F .text	00000054 HAL_LIN_SendBreak
0800ca54  w    F .text	00000012 HAL_TIMEx_BreakCallback
0800930c  w    F .text	00000012 HAL_TIM_Encoder_MspDeInit
0800f688 g     F .text	000001e4 USB_HC_StartXfer
080012dc g     F .text	00000b46 HAL_DMA_PollForTransfer
0800822c g     F .text	00000060 HAL_TIM_PWM_DeInit
080105f4 g     F .text	00000028 USBD_CDC_SetRxBuffer
0800c5a8 g     F .text	00000082 HAL_TIMEx_OnePulseN_Stop
0800e2cc g     F .text	0000004c USB_FlushTxFifo
0800ef78 g     F .text	00000048 USB_SetDevAddress
08000948 g     F .text	0000001a HAL_NVIC_SetPendingIRQ
08003e14 g     F .text	0000009e HAL_PCD_EP_Receive
0800d0ec g     F .text	000000ae HAL_UART_Transmit_IT
0800f4bc g     F .text	0000001e USB_GetCurrentFrame
0800c62c g     F .text	00000052 HAL_TIMEx_OnePulseN_Start_IT
200009e4 g     O .bss	00000004 UserTxBufPtrIn
0800f1ec g     F .text	0000005e USB_EP0_OutStart
0800ccdc g     F .text	000000c0 HAL_MultiProcessor_Init
08008bac g     F .text	000001b6 HAL_TIM_IC_Start_DMA
080105c0 g     F .text	00000034 USBD_CDC_SetTxBuffer
080123a4 g     F .text	00000010 free
08012390  w    F .text	00000002 DMA2_Channel3_IRQHandler
08012138 g     F .text	00000032 USBD_VCP_InterfaceStrDescriptor
0801133c g     F .text	00000094 USBD_LL_SetupStage



Disassembly of section .text:

080001e4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	f042 0210 	orr.w	r2, r2, #16
 80001fe:	601a      	str	r2, [r3, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 fb2d 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f840 	bl	800028c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800020c:	f000 f832 	bl	8000274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop

08000218 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800021c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000220:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000228:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 800022a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800022e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000232:	2200      	movs	r2, #0
 8000234:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800023a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800023e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000242:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000248:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]

#if defined(STM32F105xC) || defined(STM32F107xC)
  __HAL_RCC_AHB_FORCE_RESET();
 8000250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800025c:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 800025e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000262:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000266:	2200      	movs	r2, #0
 8000268:	629a      	str	r2, [r3, #40]	; 0x28
#endif
  
  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800026a:	f000 f809 	bl	8000280 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	bd80      	pop	{r7, pc}

08000274 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000294:	f006 f8ec 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 8000298:	4602      	mov	r2, r0
 800029a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800029e:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80002a2:	fba3 1302 	umull	r1, r3, r3, r2
 80002a6:	099b      	lsrs	r3, r3, #6
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fb21 	bl	80008f0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80002ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	f000 fadd 	bl	8000874 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  uwTick++;
 80002c8:	f640 13a4 	movw	r3, #2468	; 0x9a4
 80002cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	f640 13a4 	movw	r3, #2468	; 0x9a4
 80002d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002dc:	601a      	str	r2, [r3, #0]
}
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop

080002e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  return uwTick;
 80002ec:	f640 13a4 	movw	r3, #2468	; 0x9a4
 80002f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002f4:	681b      	ldr	r3, [r3, #0]
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800030c:	f7ff ffec 	bl	80002e8 <HAL_GetTick>
 8000310:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000312:	bf00      	nop
 8000314:	f7ff ffe8 	bl	80002e8 <HAL_GetTick>
 8000318:	4602      	mov	r2, r0
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	1ad2      	subs	r2, r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	d3f7      	bcc.n	8000314 <HAL_Delay+0x14>
  {
  }
}
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop

0800032c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000330:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000334:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000338:	f24e 0210 	movw	r2, #57360	; 0xe010
 800033c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000340:	6812      	ldr	r2, [r2, #0]
 8000342:	f022 0202 	bic.w	r2, r2, #2
 8000346:	601a      	str	r2, [r3, #0]
}
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000354:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000358:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800035c:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000360:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	f042 0202 	orr.w	r2, r2, #2
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <HAL_GetHalVersion>:
/**
  * @brief  This method returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
 return __STM32F1xx_HAL_VERSION;
 8000378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800037c:	f2c0 1300 	movt	r3, #256	; 0x100
}
 8000380:	4618      	mov	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop

0800038c <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> POSITION_VAL(DBGMCU_IDCODE_REV_ID));
 8000392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000396:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	2300      	movs	r3, #0
 800039e:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80003a2:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	fa93 f3a3 	rbit	r3, r3
 80003aa:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	fab3 f383 	clz	r3, r3
 80003b2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80003c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003cc:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80003e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e8:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80003ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f0:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	f042 0201 	orr.w	r2, r2, #1
 80003fa:	605a      	str	r2, [r3, #4]
}
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040c:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8000410:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000414:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8000418:	6852      	ldr	r2, [r2, #4]
 800041a:	f022 0201 	bic.w	r2, r2, #1
 800041e:	605a      	str	r2, [r3, #4]
}
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <HAL_DBGMCU_EnableDBGStopMode>:
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800042c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000430:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8000434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000438:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800043c:	6852      	ldr	r2, [r2, #4]
 800043e:	f042 0202 	orr.w	r2, r2, #2
 8000442:	605a      	str	r2, [r3, #4]
}
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <HAL_DBGMCU_DisableDBGStopMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000454:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8000458:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800045c:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8000460:	6852      	ldr	r2, [r2, #4]
 8000462:	f022 0202 	bic.w	r2, r2, #2
 8000466:	605a      	str	r2, [r3, #4]
}
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000478:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800047c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000480:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8000484:	6852      	ldr	r2, [r2, #4]
 8000486:	f042 0204 	orr.w	r2, r2, #4
 800048a:	605a      	str	r2, [r3, #4]
}
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049c:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80004a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004a4:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80004a8:	6852      	ldr	r2, [r2, #4]
 80004aa:	f022 0204 	bic.w	r2, r2, #4
 80004ae:	605a      	str	r2, [r3, #4]
}
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f003 0307 	and.w	r3, r3, #7
 80004c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004c8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80004cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004da:	4013      	ands	r3, r2
 80004dc:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80004e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ee:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80004f0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80004f4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	60da      	str	r2, [r3, #12]
}
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800050c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000510:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800051a:	0a1b      	lsrs	r3, r3, #8
}
 800051c:	4618      	mov	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000532:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000536:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800053a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800053e:	0952      	lsrs	r2, r2, #5
 8000540:	79f9      	ldrb	r1, [r7, #7]
 8000542:	f001 011f 	and.w	r1, r1, #31
 8000546:	2001      	movs	r0, #1
 8000548:	fa00 f101 	lsl.w	r1, r0, r1
 800054c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000566:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800056a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800056e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000572:	0952      	lsrs	r2, r2, #5
 8000574:	79f9      	ldrb	r1, [r7, #7]
 8000576:	f001 011f 	and.w	r1, r1, #31
 800057a:	2001      	movs	r0, #1
 800057c:	fa00 f101 	lsl.w	r1, r0, r1
 8000580:	3220      	adds	r2, #32
 8000582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800059a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800059e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80005a2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005a6:	0952      	lsrs	r2, r2, #5
 80005a8:	3240      	adds	r2, #64	; 0x40
 80005aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 031f 	and.w	r3, r3, #31
 80005b4:	fa22 f303 	lsr.w	r3, r2, r3
 80005b8:	f003 0301 	and.w	r3, r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005d2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80005d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80005da:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005de:	0952      	lsrs	r2, r2, #5
 80005e0:	79f9      	ldrb	r1, [r7, #7]
 80005e2:	f001 011f 	and.w	r1, r1, #31
 80005e6:	2001      	movs	r0, #1
 80005e8:	fa00 f101 	lsl.w	r1, r0, r1
 80005ec:	3240      	adds	r2, #64	; 0x40
 80005ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000606:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800060a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800060e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000612:	0952      	lsrs	r2, r2, #5
 8000614:	79f9      	ldrb	r1, [r7, #7]
 8000616:	f001 011f 	and.w	r1, r1, #31
 800061a:	2001      	movs	r0, #1
 800061c:	fa00 f101 	lsl.w	r1, r0, r1
 8000620:	3260      	adds	r2, #96	; 0x60
 8000622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <NVIC_GetActive>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800063a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800063e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000642:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000646:	0952      	lsrs	r2, r2, #5
 8000648:	3280      	adds	r2, #128	; 0x80
 800064a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 031f 	and.w	r3, r3, #31
 8000654:	fa22 f303 	lsr.w	r3, r2, r3
 8000658:	f003 0301 	and.w	r3, r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da0e      	bge.n	800069a <NVIC_SetPriority+0x32>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000680:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	f002 020f 	and.w	r2, r2, #15
 800068a:	1f11      	subs	r1, r2, #4
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
 8000698:	e00c      	b.n	80006b4 <NVIC_SetPriority+0x4c>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800069e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006a2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) < 0)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da0d      	bge.n	80006ee <NVIC_GetPriority+0x2e>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80006d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80006d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	f002 020f 	and.w	r2, r2, #15
 80006e0:	3a04      	subs	r2, #4
 80006e2:	4413      	add	r3, r2
 80006e4:	7e1b      	ldrb	r3, [r3, #24]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	091b      	lsrs	r3, r3, #4
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	e00b      	b.n	8000706 <NVIC_GetPriority+0x46>
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80006ee:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80006f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006f6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006fa:	4413      	add	r3, r2
 80006fc:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000700:	b2db      	uxtb	r3, r3
 8000702:	091b      	lsrs	r3, r3, #4
 8000704:	b2db      	uxtb	r3, r3
  }
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop

08000714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000714:	b480      	push	{r7}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	f1c3 0307 	rsb	r3, r3, #7
 800072e:	2b04      	cmp	r3, #4
 8000730:	bf28      	it	cs
 8000732:	2304      	movcs	r3, #4
 8000734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3304      	adds	r3, #4
 800073a:	2b06      	cmp	r3, #6
 800073c:	d902      	bls.n	8000744 <NVIC_EncodePriority+0x30>
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3b03      	subs	r3, #3
 8000742:	e000      	b.n	8000746 <NVIC_EncodePriority+0x32>
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	2201      	movs	r2, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	401a      	ands	r2, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	2101      	movs	r1, #1
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	1e59      	subs	r1, r3, #1
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000768:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800076a:	4618      	mov	r0, r3
 800076c:	3724      	adds	r7, #36	; 0x24
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop

08000778 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	f1c3 0307 	rsb	r3, r3, #7
 8000794:	2b04      	cmp	r3, #4
 8000796:	bf28      	it	cs
 8000798:	2304      	movcs	r3, #4
 800079a:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	3304      	adds	r3, #4
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d902      	bls.n	80007aa <NVIC_DecodePriority+0x32>
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	3b03      	subs	r3, #3
 80007a8:	e000      	b.n	80007ac <NVIC_DecodePriority+0x34>
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	40da      	lsrs	r2, r3
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	3b01      	subs	r3, #1
 80007be:	401a      	ands	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	2201      	movs	r2, #1
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	401a      	ands	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	601a      	str	r2, [r3, #0]
}
 80007d6:	3724      	adds	r7, #36	; 0x24
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007e4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007e8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80007ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007f0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80007f4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007fe:	2304      	movs	r3, #4
 8000800:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
 8000804:	430b      	orrs	r3, r1
 8000806:	60d3      	str	r3, [r2, #12]
 8000808:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800080c:	bf00      	nop
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
  }
 800080e:	e7fd      	b.n	800080c <NVIC_SystemReset+0x2c>

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e018      	b.n	8000858 <SysTick_Config+0x48>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	f24e 0310 	movw	r3, #57360	; 0xe010
 800082a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	3a01      	subs	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000838:	210f      	movs	r1, #15
 800083a:	f7ff ff15 	bl	8000668 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000842:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	f24e 0310 	movw	r3, #57360	; 0xe010
 800084e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000852:	2207      	movs	r2, #7
 8000854:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fe25 	bl	80004b8 <NVIC_SetPriorityGrouping>
}
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000886:	f7ff fe3f 	bl	8000508 <NVIC_GetPriorityGrouping>
 800088a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088c:	6978      	ldr	r0, [r7, #20]
 800088e:	68b9      	ldr	r1, [r7, #8]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	f7ff ff3f 	bl	8000714 <NVIC_EncodePriority>
 8000896:	4603      	mov	r3, r0
 8000898:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800089c:	4610      	mov	r0, r2
 800089e:	4619      	mov	r1, r3
 80008a0:	f7ff fee2 	bl	8000668 <NVIC_SetPriority>
}
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop

080008ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe34 	bl	8000528 <NVIC_EnableIRQ>
}
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop

080008c8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));


  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe40 	bl	800055c <NVIC_DisableIRQ>
}
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop

080008e4 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80008e8:	f7ff ff7a 	bl	80007e0 <NVIC_SystemReset>
}
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop

080008f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff89 	bl	8000810 <SysTick_Config>
 80008fe:	4603      	mov	r3, r0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 800090c:	f7ff fdfc 	bl	8000508 <NVIC_GetPriorityGrouping>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop

08000918 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8000928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fec7 	bl	80006c0 <NVIC_GetPriority>
 8000932:	4603      	mov	r3, r0
 8000934:	4618      	mov	r0, r3
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	f7ff ff1c 	bl	8000778 <NVIC_DecodePriority>
}
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop

08000948 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe36 	bl	80005c8 <NVIC_SetPendingIRQ>
}
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop

08000964 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{ 
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe0c 	bl	8000590 <NVIC_GetPendingIRQ>
 8000978:	4603      	mov	r3, r0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop

08000984 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fe32 	bl	80005fc <NVIC_ClearPendingIRQ>
}
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop

080009a0 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{ 
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe3e 	bl	8000630 <NVIC_GetActive>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop

080009c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d10c      	bne.n	80009e8 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009ce:	f24e 0310 	movw	r3, #57360	; 0xe010
 80009d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80009d6:	f24e 0210 	movw	r2, #57360	; 0xe010
 80009da:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80009de:	6812      	ldr	r2, [r2, #0]
 80009e0:	f042 0204 	orr.w	r2, r2, #4
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e00b      	b.n	8000a00 <HAL_SYSTICK_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009e8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80009ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80009f0:	f24e 0210 	movw	r2, #57360	; 0xe010
 80009f4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80009f8:	6812      	ldr	r2, [r2, #0]
 80009fa:	f022 0204 	bic.w	r2, r2, #4
 80009fe:	601a      	str	r2, [r3, #0]
  }
}
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a10:	f000 f802 	bl	8000a18 <HAL_SYSTICK_Callback>
}
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop

08000a18 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e039      	b.n	8000aae <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d103      	bne.n	8000a4c <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2202      	movs	r2, #2
 8000a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	691b      	ldr	r3, [r3, #16]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	699b      	ldr	r3, [r3, #24]
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4313      	orrs	r3, r2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e345      	b.n	800115a <HAL_DMA_DeInit+0x69e>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d101      	bne.n	8000adc <HAL_DMA_DeInit+0x20>
  {
     return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e33e      	b.n	800115a <HAL_DMA_DeInit+0x69e>
  }

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	f022 0201 	bic.w	r2, r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
  
  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
  
  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  
  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f240 8081 	bls.w	8000c20 <HAL_DMA_DeInit+0x164>
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b32:	4291      	cmp	r1, r2
 8000b34:	d071      	beq.n	8000c1a <HAL_DMA_DeInit+0x15e>
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	221c      	movs	r2, #28
 8000b3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b42:	4291      	cmp	r1, r2
 8000b44:	d067      	beq.n	8000c16 <HAL_DMA_DeInit+0x15a>
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	2230      	movs	r2, #48	; 0x30
 8000b4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b52:	4291      	cmp	r1, r2
 8000b54:	d05c      	beq.n	8000c10 <HAL_DMA_DeInit+0x154>
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	2244      	movs	r2, #68	; 0x44
 8000b5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b62:	4291      	cmp	r1, r2
 8000b64:	d051      	beq.n	8000c0a <HAL_DMA_DeInit+0x14e>
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	6812      	ldr	r2, [r2, #0]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	2258      	movs	r2, #88	; 0x58
 8000b6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b72:	4291      	cmp	r1, r2
 8000b74:	d046      	beq.n	8000c04 <HAL_DMA_DeInit+0x148>
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	226c      	movs	r2, #108	; 0x6c
 8000b7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b82:	4291      	cmp	r1, r2
 8000b84:	d03b      	beq.n	8000bfe <HAL_DMA_DeInit+0x142>
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b92:	4291      	cmp	r1, r2
 8000b94:	d030      	beq.n	8000bf8 <HAL_DMA_DeInit+0x13c>
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000ba0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ba4:	4291      	cmp	r1, r2
 8000ba6:	d025      	beq.n	8000bf4 <HAL_DMA_DeInit+0x138>
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	4611      	mov	r1, r2
 8000bae:	f240 421c 	movw	r2, #1052	; 0x41c
 8000bb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	d01a      	beq.n	8000bf0 <HAL_DMA_DeInit+0x134>
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6812      	ldr	r2, [r2, #0]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8000bc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bc8:	4291      	cmp	r1, r2
 8000bca:	d00e      	beq.n	8000bea <HAL_DMA_DeInit+0x12e>
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	f240 4244 	movw	r2, #1092	; 0x444
 8000bd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bda:	4291      	cmp	r1, r2
 8000bdc:	d102      	bne.n	8000be4 <HAL_DMA_DeInit+0x128>
 8000bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be2:	e01b      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be8:	e018      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bee:	e015      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	e013      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	e011      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bfc:	e00e      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000bfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c02:	e00b      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000c04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c08:	e008      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0e:	e005      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c14:	e002      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000c16:	2220      	movs	r2, #32
 8000c18:	e000      	b.n	8000c1c <HAL_DMA_DeInit+0x160>
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	e07e      	b.n	8000d1e <HAL_DMA_DeInit+0x262>
 8000c20:	2300      	movs	r3, #0
 8000c22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c32:	4291      	cmp	r1, r2
 8000c34:	d071      	beq.n	8000d1a <HAL_DMA_DeInit+0x25e>
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	221c      	movs	r2, #28
 8000c3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c42:	4291      	cmp	r1, r2
 8000c44:	d067      	beq.n	8000d16 <HAL_DMA_DeInit+0x25a>
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	2230      	movs	r2, #48	; 0x30
 8000c4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c52:	4291      	cmp	r1, r2
 8000c54:	d05c      	beq.n	8000d10 <HAL_DMA_DeInit+0x254>
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	2244      	movs	r2, #68	; 0x44
 8000c5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c62:	4291      	cmp	r1, r2
 8000c64:	d051      	beq.n	8000d0a <HAL_DMA_DeInit+0x24e>
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	2258      	movs	r2, #88	; 0x58
 8000c6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c72:	4291      	cmp	r1, r2
 8000c74:	d046      	beq.n	8000d04 <HAL_DMA_DeInit+0x248>
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	226c      	movs	r2, #108	; 0x6c
 8000c7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c82:	4291      	cmp	r1, r2
 8000c84:	d03b      	beq.n	8000cfe <HAL_DMA_DeInit+0x242>
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c92:	4291      	cmp	r1, r2
 8000c94:	d030      	beq.n	8000cf8 <HAL_DMA_DeInit+0x23c>
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000ca0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ca4:	4291      	cmp	r1, r2
 8000ca6:	d025      	beq.n	8000cf4 <HAL_DMA_DeInit+0x238>
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	4611      	mov	r1, r2
 8000cae:	f240 421c 	movw	r2, #1052	; 0x41c
 8000cb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d01a      	beq.n	8000cf0 <HAL_DMA_DeInit+0x234>
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8000cc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cc8:	4291      	cmp	r1, r2
 8000cca:	d00e      	beq.n	8000cea <HAL_DMA_DeInit+0x22e>
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	f240 4244 	movw	r2, #1092	; 0x444
 8000cd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000cda:	4291      	cmp	r1, r2
 8000cdc:	d102      	bne.n	8000ce4 <HAL_DMA_DeInit+0x228>
 8000cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce2:	e01b      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000ce4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce8:	e018      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cee:	e015      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	e013      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	e011      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cfc:	e00e      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000cfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d02:	e00b      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000d04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d08:	e008      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d0e:	e005      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d14:	e002      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000d16:	2220      	movs	r2, #32
 8000d18:	e000      	b.n	8000d1c <HAL_DMA_DeInit+0x260>
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	605a      	str	r2, [r3, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	f240 8081 	bls.w	8000e32 <HAL_DMA_DeInit+0x376>
 8000d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	2208      	movs	r2, #8
 8000d40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d44:	4291      	cmp	r1, r2
 8000d46:	d071      	beq.n	8000e2c <HAL_DMA_DeInit+0x370>
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	221c      	movs	r2, #28
 8000d50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d54:	4291      	cmp	r1, r2
 8000d56:	d067      	beq.n	8000e28 <HAL_DMA_DeInit+0x36c>
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	2230      	movs	r2, #48	; 0x30
 8000d60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d64:	4291      	cmp	r1, r2
 8000d66:	d05c      	beq.n	8000e22 <HAL_DMA_DeInit+0x366>
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	2244      	movs	r2, #68	; 0x44
 8000d70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d74:	4291      	cmp	r1, r2
 8000d76:	d051      	beq.n	8000e1c <HAL_DMA_DeInit+0x360>
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	2258      	movs	r2, #88	; 0x58
 8000d80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d84:	4291      	cmp	r1, r2
 8000d86:	d046      	beq.n	8000e16 <HAL_DMA_DeInit+0x35a>
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	226c      	movs	r2, #108	; 0x6c
 8000d90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000d94:	4291      	cmp	r1, r2
 8000d96:	d03b      	beq.n	8000e10 <HAL_DMA_DeInit+0x354>
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000da4:	4291      	cmp	r1, r2
 8000da6:	d030      	beq.n	8000e0a <HAL_DMA_DeInit+0x34e>
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	4611      	mov	r1, r2
 8000dae:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000db2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d025      	beq.n	8000e06 <HAL_DMA_DeInit+0x34a>
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	f240 421c 	movw	r2, #1052	; 0x41c
 8000dc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dc8:	4291      	cmp	r1, r2
 8000dca:	d01a      	beq.n	8000e02 <HAL_DMA_DeInit+0x346>
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8000dd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dda:	4291      	cmp	r1, r2
 8000ddc:	d00e      	beq.n	8000dfc <HAL_DMA_DeInit+0x340>
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	4611      	mov	r1, r2
 8000de4:	f240 4244 	movw	r2, #1092	; 0x444
 8000de8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d102      	bne.n	8000df6 <HAL_DMA_DeInit+0x33a>
 8000df0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df4:	e01b      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000df6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dfa:	e018      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e00:	e015      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	e013      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e06:	2208      	movs	r2, #8
 8000e08:	e011      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0e:	e00e      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e14:	e00b      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e1a:	e008      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e20:	e005      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e26:	e002      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	e000      	b.n	8000e2e <HAL_DMA_DeInit+0x372>
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	e07e      	b.n	8000f30 <HAL_DMA_DeInit+0x474>
 8000e32:	2300      	movs	r3, #0
 8000e34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	2208      	movs	r2, #8
 8000e40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d071      	beq.n	8000f2c <HAL_DMA_DeInit+0x470>
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	221c      	movs	r2, #28
 8000e50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d067      	beq.n	8000f28 <HAL_DMA_DeInit+0x46c>
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	2230      	movs	r2, #48	; 0x30
 8000e60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d05c      	beq.n	8000f22 <HAL_DMA_DeInit+0x466>
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6812      	ldr	r2, [r2, #0]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	2244      	movs	r2, #68	; 0x44
 8000e70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d051      	beq.n	8000f1c <HAL_DMA_DeInit+0x460>
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	2258      	movs	r2, #88	; 0x58
 8000e80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d046      	beq.n	8000f16 <HAL_DMA_DeInit+0x45a>
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	226c      	movs	r2, #108	; 0x6c
 8000e90:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d03b      	beq.n	8000f10 <HAL_DMA_DeInit+0x454>
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d030      	beq.n	8000f0a <HAL_DMA_DeInit+0x44e>
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	4611      	mov	r1, r2
 8000eae:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000eb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d025      	beq.n	8000f06 <HAL_DMA_DeInit+0x44a>
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	f240 421c 	movw	r2, #1052	; 0x41c
 8000ec4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ec8:	4291      	cmp	r1, r2
 8000eca:	d01a      	beq.n	8000f02 <HAL_DMA_DeInit+0x446>
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8000ed6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eda:	4291      	cmp	r1, r2
 8000edc:	d00e      	beq.n	8000efc <HAL_DMA_DeInit+0x440>
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	f240 4244 	movw	r2, #1092	; 0x444
 8000ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eec:	4291      	cmp	r1, r2
 8000eee:	d102      	bne.n	8000ef6 <HAL_DMA_DeInit+0x43a>
 8000ef0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ef4:	e01b      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000ef6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000efa:	e018      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f00:	e015      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	e013      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f06:	2208      	movs	r2, #8
 8000f08:	e011      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f0e:	e00e      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f14:	e00b      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f1a:	e008      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f20:	e005      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f26:	e002      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	e000      	b.n	8000f2e <HAL_DMA_DeInit+0x472>
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	605a      	str	r2, [r3, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f240 8081 	bls.w	8001044 <HAL_DMA_DeInit+0x588>
 8000f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	2208      	movs	r2, #8
 8000f52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f56:	4291      	cmp	r1, r2
 8000f58:	d071      	beq.n	800103e <HAL_DMA_DeInit+0x582>
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	221c      	movs	r2, #28
 8000f62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f66:	4291      	cmp	r1, r2
 8000f68:	d067      	beq.n	800103a <HAL_DMA_DeInit+0x57e>
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	2230      	movs	r2, #48	; 0x30
 8000f72:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f76:	4291      	cmp	r1, r2
 8000f78:	d05c      	beq.n	8001034 <HAL_DMA_DeInit+0x578>
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	2244      	movs	r2, #68	; 0x44
 8000f82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f86:	4291      	cmp	r1, r2
 8000f88:	d051      	beq.n	800102e <HAL_DMA_DeInit+0x572>
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	2258      	movs	r2, #88	; 0x58
 8000f92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f96:	4291      	cmp	r1, r2
 8000f98:	d046      	beq.n	8001028 <HAL_DMA_DeInit+0x56c>
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	226c      	movs	r2, #108	; 0x6c
 8000fa2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fa6:	4291      	cmp	r1, r2
 8000fa8:	d03b      	beq.n	8001022 <HAL_DMA_DeInit+0x566>
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fb6:	4291      	cmp	r1, r2
 8000fb8:	d030      	beq.n	800101c <HAL_DMA_DeInit+0x560>
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000fc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d025      	beq.n	8001018 <HAL_DMA_DeInit+0x55c>
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	f240 421c 	movw	r2, #1052	; 0x41c
 8000fd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d01a      	beq.n	8001014 <HAL_DMA_DeInit+0x558>
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8000fe8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fec:	4291      	cmp	r1, r2
 8000fee:	d00e      	beq.n	800100e <HAL_DMA_DeInit+0x552>
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	f240 4244 	movw	r2, #1092	; 0x444
 8000ffa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d102      	bne.n	8001008 <HAL_DMA_DeInit+0x54c>
 8001002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001006:	e01b      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 8001008:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800100c:	e018      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 800100e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001012:	e015      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 8001014:	2240      	movs	r2, #64	; 0x40
 8001016:	e013      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 8001018:	2204      	movs	r2, #4
 800101a:	e011      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 800101c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001020:	e00e      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 8001022:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001026:	e00b      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 8001028:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800102c:	e008      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 800102e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001032:	e005      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 8001034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001038:	e002      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 800103a:	2240      	movs	r2, #64	; 0x40
 800103c:	e000      	b.n	8001040 <HAL_DMA_DeInit+0x584>
 800103e:	2204      	movs	r2, #4
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	e07e      	b.n	8001142 <HAL_DMA_DeInit+0x686>
 8001044:	2300      	movs	r3, #0
 8001046:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	4611      	mov	r1, r2
 8001050:	2208      	movs	r2, #8
 8001052:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001056:	4291      	cmp	r1, r2
 8001058:	d071      	beq.n	800113e <HAL_DMA_DeInit+0x682>
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	4611      	mov	r1, r2
 8001060:	221c      	movs	r2, #28
 8001062:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001066:	4291      	cmp	r1, r2
 8001068:	d067      	beq.n	800113a <HAL_DMA_DeInit+0x67e>
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	4611      	mov	r1, r2
 8001070:	2230      	movs	r2, #48	; 0x30
 8001072:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001076:	4291      	cmp	r1, r2
 8001078:	d05c      	beq.n	8001134 <HAL_DMA_DeInit+0x678>
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	4611      	mov	r1, r2
 8001080:	2244      	movs	r2, #68	; 0x44
 8001082:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001086:	4291      	cmp	r1, r2
 8001088:	d051      	beq.n	800112e <HAL_DMA_DeInit+0x672>
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	4611      	mov	r1, r2
 8001090:	2258      	movs	r2, #88	; 0x58
 8001092:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001096:	4291      	cmp	r1, r2
 8001098:	d046      	beq.n	8001128 <HAL_DMA_DeInit+0x66c>
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	4611      	mov	r1, r2
 80010a0:	226c      	movs	r2, #108	; 0x6c
 80010a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010a6:	4291      	cmp	r1, r2
 80010a8:	d03b      	beq.n	8001122 <HAL_DMA_DeInit+0x666>
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	4611      	mov	r1, r2
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010b6:	4291      	cmp	r1, r2
 80010b8:	d030      	beq.n	800111c <HAL_DMA_DeInit+0x660>
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	4611      	mov	r1, r2
 80010c0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010c8:	4291      	cmp	r1, r2
 80010ca:	d025      	beq.n	8001118 <HAL_DMA_DeInit+0x65c>
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	f240 421c 	movw	r2, #1052	; 0x41c
 80010d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010da:	4291      	cmp	r1, r2
 80010dc:	d01a      	beq.n	8001114 <HAL_DMA_DeInit+0x658>
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	4611      	mov	r1, r2
 80010e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80010e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010ec:	4291      	cmp	r1, r2
 80010ee:	d00e      	beq.n	800110e <HAL_DMA_DeInit+0x652>
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	4611      	mov	r1, r2
 80010f6:	f240 4244 	movw	r2, #1092	; 0x444
 80010fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010fe:	4291      	cmp	r1, r2
 8001100:	d102      	bne.n	8001108 <HAL_DMA_DeInit+0x64c>
 8001102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001106:	e01b      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 8001108:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800110c:	e018      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 800110e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001112:	e015      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 8001114:	2240      	movs	r2, #64	; 0x40
 8001116:	e013      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 8001118:	2204      	movs	r2, #4
 800111a:	e011      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 800111c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001120:	e00e      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 8001122:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001126:	e00b      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 8001128:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800112c:	e008      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 800112e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001132:	e005      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 8001134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001138:	e002      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	e000      	b.n	8001140 <HAL_DMA_DeInit+0x684>
 800113e:	2204      	movs	r2, #4
 8001140:	605a      	str	r2, [r3, #4]
  
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_DMA_Start+0x1c>
 8001180:	2302      	movs	r3, #2
 8001182:	e01e      	b.n	80011c2 <HAL_DMA_Start+0x5a>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f001 fd32 	bl	8002c14 <DMA_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  return HAL_OK; 
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop

080011cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_DMA_Start_IT+0x1c>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e036      	b.n	8001256 <HAL_DMA_Start_IT+0x8a>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f001 fd00 	bl	8002c14 <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f042 0202 	orr.w	r2, r2, #2
 8001222:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	f042 0204 	orr.w	r2, r2, #4
 8001232:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	f042 0208 	orr.w	r2, r2, #8
 8001242:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
} 
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop

08001260 <HAL_DMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  
  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff f834 	bl	80002e8 <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]
  
  /* Check if the DMA Channel is effectively disabled */
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
 8001282:	e017      	b.n	80012b4 <HAL_DMA_Abort+0x54>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001284:	f7ff f830 	bl	80002e8 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001292:	d90f      	bls.n	80012b4 <HAL_DMA_Abort+0x54>
    {
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001298:	f043 0220 	orr.w	r2, r3, #32
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2203      	movs	r2, #3
 80012a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e00f      	b.n	80012d4 <HAL_DMA_Abort+0x74>

  /* Get tick */
  tickstart = HAL_GetTick();
  
  /* Check if the DMA Channel is effectively disabled */
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e0      	bne.n	8001284 <HAL_DMA_Abort+0x24>

      return HAL_TIMEOUT;
    }
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.  
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0x00;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d17c      	bne.n	80013ec <HAL_DMA_PollForTransfer+0x110>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	2308      	movs	r3, #8
 80012fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012fe:	429a      	cmp	r2, r3
 8001300:	d071      	beq.n	80013e6 <HAL_DMA_PollForTransfer+0x10a>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	231c      	movs	r3, #28
 800130a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800130e:	429a      	cmp	r2, r3
 8001310:	d067      	beq.n	80013e2 <HAL_DMA_PollForTransfer+0x106>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	2330      	movs	r3, #48	; 0x30
 800131a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800131e:	429a      	cmp	r2, r3
 8001320:	d05c      	beq.n	80013dc <HAL_DMA_PollForTransfer+0x100>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	2344      	movs	r3, #68	; 0x44
 800132a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800132e:	429a      	cmp	r2, r3
 8001330:	d051      	beq.n	80013d6 <HAL_DMA_PollForTransfer+0xfa>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	2358      	movs	r3, #88	; 0x58
 800133a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800133e:	429a      	cmp	r2, r3
 8001340:	d046      	beq.n	80013d0 <HAL_DMA_PollForTransfer+0xf4>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	236c      	movs	r3, #108	; 0x6c
 800134a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800134e:	429a      	cmp	r2, r3
 8001350:	d03b      	beq.n	80013ca <HAL_DMA_PollForTransfer+0xee>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800135e:	429a      	cmp	r2, r3
 8001360:	d030      	beq.n	80013c4 <HAL_DMA_PollForTransfer+0xe8>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800136c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001370:	429a      	cmp	r2, r3
 8001372:	d025      	beq.n	80013c0 <HAL_DMA_PollForTransfer+0xe4>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	f240 431c 	movw	r3, #1052	; 0x41c
 800137e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001382:	429a      	cmp	r2, r3
 8001384:	d01a      	beq.n	80013bc <HAL_DMA_PollForTransfer+0xe0>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001390:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001394:	429a      	cmp	r2, r3
 8001396:	d00e      	beq.n	80013b6 <HAL_DMA_PollForTransfer+0xda>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	f240 4344 	movw	r3, #1092	; 0x444
 80013a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d102      	bne.n	80013b0 <HAL_DMA_PollForTransfer+0xd4>
 80013aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ae:	e01b      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b4:	e018      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ba:	e015      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013bc:	2320      	movs	r3, #32
 80013be:	e013      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e011      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013c8:	e00e      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013ce:	e00b      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d4:	e008      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	e005      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e0:	e002      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013e2:	2320      	movs	r3, #32
 80013e4:	e000      	b.n	80013e8 <HAL_DMA_PollForTransfer+0x10c>
 80013e6:	2302      	movs	r3, #2
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e07b      	b.n	80014e4 <HAL_DMA_PollForTransfer+0x208>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2308      	movs	r3, #8
 80013f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d071      	beq.n	80014e0 <HAL_DMA_PollForTransfer+0x204>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	231c      	movs	r3, #28
 8001404:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001408:	429a      	cmp	r2, r3
 800140a:	d067      	beq.n	80014dc <HAL_DMA_PollForTransfer+0x200>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	2330      	movs	r3, #48	; 0x30
 8001414:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001418:	429a      	cmp	r2, r3
 800141a:	d05c      	beq.n	80014d6 <HAL_DMA_PollForTransfer+0x1fa>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	2344      	movs	r3, #68	; 0x44
 8001424:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001428:	429a      	cmp	r2, r3
 800142a:	d051      	beq.n	80014d0 <HAL_DMA_PollForTransfer+0x1f4>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	2358      	movs	r3, #88	; 0x58
 8001434:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001438:	429a      	cmp	r2, r3
 800143a:	d046      	beq.n	80014ca <HAL_DMA_PollForTransfer+0x1ee>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	236c      	movs	r3, #108	; 0x6c
 8001444:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001448:	429a      	cmp	r2, r3
 800144a:	d03b      	beq.n	80014c4 <HAL_DMA_PollForTransfer+0x1e8>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001458:	429a      	cmp	r2, r3
 800145a:	d030      	beq.n	80014be <HAL_DMA_PollForTransfer+0x1e2>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001466:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800146a:	429a      	cmp	r2, r3
 800146c:	d025      	beq.n	80014ba <HAL_DMA_PollForTransfer+0x1de>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	f240 431c 	movw	r3, #1052	; 0x41c
 8001478:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800147c:	429a      	cmp	r2, r3
 800147e:	d01a      	beq.n	80014b6 <HAL_DMA_PollForTransfer+0x1da>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800148a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800148e:	429a      	cmp	r2, r3
 8001490:	d00e      	beq.n	80014b0 <HAL_DMA_PollForTransfer+0x1d4>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	f240 4344 	movw	r3, #1092	; 0x444
 800149c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d102      	bne.n	80014aa <HAL_DMA_PollForTransfer+0x1ce>
 80014a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014a8:	e01b      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014ae:	e018      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b4:	e015      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014b6:	2340      	movs	r3, #64	; 0x40
 80014b8:	e013      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014ba:	2304      	movs	r3, #4
 80014bc:	e011      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014c2:	e00e      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014c8:	e00b      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014ce:	e008      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d4:	e005      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014da:	e002      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	e000      	b.n	80014e2 <HAL_DMA_PollForTransfer+0x206>
 80014e0:	2304      	movs	r3, #4
 80014e2:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e4:	f7fe ff00 	bl	80002e8 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80014ea:	e24f      	b.n	800198c <HAL_DMA_PollForTransfer+0x6b0>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f240 8087 	bls.w	800160c <HAL_DMA_PollForTransfer+0x330>
 80014fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001502:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	2308      	movs	r3, #8
 8001510:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001514:	4299      	cmp	r1, r3
 8001516:	d071      	beq.n	80015fc <HAL_DMA_PollForTransfer+0x320>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	231c      	movs	r3, #28
 8001520:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001524:	4299      	cmp	r1, r3
 8001526:	d067      	beq.n	80015f8 <HAL_DMA_PollForTransfer+0x31c>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	2330      	movs	r3, #48	; 0x30
 8001530:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001534:	4299      	cmp	r1, r3
 8001536:	d05c      	beq.n	80015f2 <HAL_DMA_PollForTransfer+0x316>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	2344      	movs	r3, #68	; 0x44
 8001540:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001544:	4299      	cmp	r1, r3
 8001546:	d051      	beq.n	80015ec <HAL_DMA_PollForTransfer+0x310>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	2358      	movs	r3, #88	; 0x58
 8001550:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001554:	4299      	cmp	r1, r3
 8001556:	d046      	beq.n	80015e6 <HAL_DMA_PollForTransfer+0x30a>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	236c      	movs	r3, #108	; 0x6c
 8001560:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001564:	4299      	cmp	r1, r3
 8001566:	d03b      	beq.n	80015e0 <HAL_DMA_PollForTransfer+0x304>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001574:	4299      	cmp	r1, r3
 8001576:	d030      	beq.n	80015da <HAL_DMA_PollForTransfer+0x2fe>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001582:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001586:	4299      	cmp	r1, r3
 8001588:	d025      	beq.n	80015d6 <HAL_DMA_PollForTransfer+0x2fa>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4619      	mov	r1, r3
 8001590:	f240 431c 	movw	r3, #1052	; 0x41c
 8001594:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001598:	4299      	cmp	r1, r3
 800159a:	d01a      	beq.n	80015d2 <HAL_DMA_PollForTransfer+0x2f6>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80015a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015aa:	4299      	cmp	r1, r3
 80015ac:	d00e      	beq.n	80015cc <HAL_DMA_PollForTransfer+0x2f0>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	f240 4344 	movw	r3, #1092	; 0x444
 80015b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015bc:	4299      	cmp	r1, r3
 80015be:	d102      	bne.n	80015c6 <HAL_DMA_PollForTransfer+0x2ea>
 80015c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c4:	e01b      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80015ca:	e018      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d0:	e015      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	e013      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015d6:	2308      	movs	r3, #8
 80015d8:	e011      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015de:	e00e      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80015e4:	e00b      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80015ea:	e008      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f0:	e005      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015f6:	e002      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	e000      	b.n	80015fe <HAL_DMA_PollForTransfer+0x322>
 80015fc:	2308      	movs	r3, #8
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf0c      	ite	eq
 8001604:	2300      	moveq	r3, #0
 8001606:	2301      	movne	r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	e084      	b.n	8001716 <HAL_DMA_PollForTransfer+0x43a>
 800160c:	2300      	movs	r3, #0
 800160e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	2308      	movs	r3, #8
 800161c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001620:	4299      	cmp	r1, r3
 8001622:	d071      	beq.n	8001708 <HAL_DMA_PollForTransfer+0x42c>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	231c      	movs	r3, #28
 800162c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001630:	4299      	cmp	r1, r3
 8001632:	d067      	beq.n	8001704 <HAL_DMA_PollForTransfer+0x428>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	2330      	movs	r3, #48	; 0x30
 800163c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001640:	4299      	cmp	r1, r3
 8001642:	d05c      	beq.n	80016fe <HAL_DMA_PollForTransfer+0x422>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	2344      	movs	r3, #68	; 0x44
 800164c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001650:	4299      	cmp	r1, r3
 8001652:	d051      	beq.n	80016f8 <HAL_DMA_PollForTransfer+0x41c>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	2358      	movs	r3, #88	; 0x58
 800165c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001660:	4299      	cmp	r1, r3
 8001662:	d046      	beq.n	80016f2 <HAL_DMA_PollForTransfer+0x416>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	236c      	movs	r3, #108	; 0x6c
 800166c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001670:	4299      	cmp	r1, r3
 8001672:	d03b      	beq.n	80016ec <HAL_DMA_PollForTransfer+0x410>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001680:	4299      	cmp	r1, r3
 8001682:	d030      	beq.n	80016e6 <HAL_DMA_PollForTransfer+0x40a>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800168e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001692:	4299      	cmp	r1, r3
 8001694:	d025      	beq.n	80016e2 <HAL_DMA_PollForTransfer+0x406>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	f240 431c 	movw	r3, #1052	; 0x41c
 80016a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016a4:	4299      	cmp	r1, r3
 80016a6:	d01a      	beq.n	80016de <HAL_DMA_PollForTransfer+0x402>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80016b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016b6:	4299      	cmp	r1, r3
 80016b8:	d00e      	beq.n	80016d8 <HAL_DMA_PollForTransfer+0x3fc>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	f240 4344 	movw	r3, #1092	; 0x444
 80016c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016c8:	4299      	cmp	r1, r3
 80016ca:	d102      	bne.n	80016d2 <HAL_DMA_PollForTransfer+0x3f6>
 80016cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d0:	e01b      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016d6:	e018      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016dc:	e015      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	e013      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016e2:	2308      	movs	r3, #8
 80016e4:	e011      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016ea:	e00e      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80016f0:	e00b      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016f6:	e008      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016fc:	e005      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 80016fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001702:	e002      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	e000      	b.n	800170a <HAL_DMA_PollForTransfer+0x42e>
 8001708:	2308      	movs	r3, #8
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2300      	moveq	r3, #0
 8001712:	2301      	movne	r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8119 	beq.w	800194e <HAL_DMA_PollForTransfer+0x672>
    {      
      /* Clear the transfer error flags */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001728:	429a      	cmp	r2, r3
 800172a:	f240 8081 	bls.w	8001830 <HAL_DMA_PollForTransfer+0x554>
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	4611      	mov	r1, r2
 800173c:	2208      	movs	r2, #8
 800173e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001742:	4291      	cmp	r1, r2
 8001744:	d071      	beq.n	800182a <HAL_DMA_PollForTransfer+0x54e>
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	4611      	mov	r1, r2
 800174c:	221c      	movs	r2, #28
 800174e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001752:	4291      	cmp	r1, r2
 8001754:	d067      	beq.n	8001826 <HAL_DMA_PollForTransfer+0x54a>
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	4611      	mov	r1, r2
 800175c:	2230      	movs	r2, #48	; 0x30
 800175e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001762:	4291      	cmp	r1, r2
 8001764:	d05c      	beq.n	8001820 <HAL_DMA_PollForTransfer+0x544>
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	4611      	mov	r1, r2
 800176c:	2244      	movs	r2, #68	; 0x44
 800176e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001772:	4291      	cmp	r1, r2
 8001774:	d051      	beq.n	800181a <HAL_DMA_PollForTransfer+0x53e>
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	2258      	movs	r2, #88	; 0x58
 800177e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001782:	4291      	cmp	r1, r2
 8001784:	d046      	beq.n	8001814 <HAL_DMA_PollForTransfer+0x538>
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	4611      	mov	r1, r2
 800178c:	226c      	movs	r2, #108	; 0x6c
 800178e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001792:	4291      	cmp	r1, r2
 8001794:	d03b      	beq.n	800180e <HAL_DMA_PollForTransfer+0x532>
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4611      	mov	r1, r2
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017a2:	4291      	cmp	r1, r2
 80017a4:	d030      	beq.n	8001808 <HAL_DMA_PollForTransfer+0x52c>
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	4611      	mov	r1, r2
 80017ac:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80017b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017b4:	4291      	cmp	r1, r2
 80017b6:	d025      	beq.n	8001804 <HAL_DMA_PollForTransfer+0x528>
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	4611      	mov	r1, r2
 80017be:	f240 421c 	movw	r2, #1052	; 0x41c
 80017c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017c6:	4291      	cmp	r1, r2
 80017c8:	d01a      	beq.n	8001800 <HAL_DMA_PollForTransfer+0x524>
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	4611      	mov	r1, r2
 80017d0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80017d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017d8:	4291      	cmp	r1, r2
 80017da:	d00e      	beq.n	80017fa <HAL_DMA_PollForTransfer+0x51e>
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	4611      	mov	r1, r2
 80017e2:	f240 4244 	movw	r2, #1092	; 0x444
 80017e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017ea:	4291      	cmp	r1, r2
 80017ec:	d102      	bne.n	80017f4 <HAL_DMA_PollForTransfer+0x518>
 80017ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017f2:	e01b      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 80017f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017f8:	e018      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 80017fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017fe:	e015      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	e013      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 8001804:	2208      	movs	r2, #8
 8001806:	e011      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 8001808:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800180c:	e00e      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 800180e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001812:	e00b      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 8001814:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001818:	e008      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 800181a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800181e:	e005      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 8001820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001824:	e002      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	e000      	b.n	800182c <HAL_DMA_PollForTransfer+0x550>
 800182a:	2208      	movs	r2, #8
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	e07e      	b.n	800192e <HAL_DMA_PollForTransfer+0x652>
 8001830:	2300      	movs	r3, #0
 8001832:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	4611      	mov	r1, r2
 800183c:	2208      	movs	r2, #8
 800183e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001842:	4291      	cmp	r1, r2
 8001844:	d071      	beq.n	800192a <HAL_DMA_PollForTransfer+0x64e>
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4611      	mov	r1, r2
 800184c:	221c      	movs	r2, #28
 800184e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001852:	4291      	cmp	r1, r2
 8001854:	d067      	beq.n	8001926 <HAL_DMA_PollForTransfer+0x64a>
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	4611      	mov	r1, r2
 800185c:	2230      	movs	r2, #48	; 0x30
 800185e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001862:	4291      	cmp	r1, r2
 8001864:	d05c      	beq.n	8001920 <HAL_DMA_PollForTransfer+0x644>
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	4611      	mov	r1, r2
 800186c:	2244      	movs	r2, #68	; 0x44
 800186e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001872:	4291      	cmp	r1, r2
 8001874:	d051      	beq.n	800191a <HAL_DMA_PollForTransfer+0x63e>
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	4611      	mov	r1, r2
 800187c:	2258      	movs	r2, #88	; 0x58
 800187e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001882:	4291      	cmp	r1, r2
 8001884:	d046      	beq.n	8001914 <HAL_DMA_PollForTransfer+0x638>
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	4611      	mov	r1, r2
 800188c:	226c      	movs	r2, #108	; 0x6c
 800188e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001892:	4291      	cmp	r1, r2
 8001894:	d03b      	beq.n	800190e <HAL_DMA_PollForTransfer+0x632>
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4611      	mov	r1, r2
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018a2:	4291      	cmp	r1, r2
 80018a4:	d030      	beq.n	8001908 <HAL_DMA_PollForTransfer+0x62c>
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	4611      	mov	r1, r2
 80018ac:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80018b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018b4:	4291      	cmp	r1, r2
 80018b6:	d025      	beq.n	8001904 <HAL_DMA_PollForTransfer+0x628>
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	4611      	mov	r1, r2
 80018be:	f240 421c 	movw	r2, #1052	; 0x41c
 80018c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018c6:	4291      	cmp	r1, r2
 80018c8:	d01a      	beq.n	8001900 <HAL_DMA_PollForTransfer+0x624>
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	4611      	mov	r1, r2
 80018d0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80018d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018d8:	4291      	cmp	r1, r2
 80018da:	d00e      	beq.n	80018fa <HAL_DMA_PollForTransfer+0x61e>
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	4611      	mov	r1, r2
 80018e2:	f240 4244 	movw	r2, #1092	; 0x444
 80018e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018ea:	4291      	cmp	r1, r2
 80018ec:	d102      	bne.n	80018f4 <HAL_DMA_PollForTransfer+0x618>
 80018ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018f2:	e01b      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 80018f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018f8:	e018      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 80018fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018fe:	e015      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	e013      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 8001904:	2208      	movs	r2, #8
 8001906:	e011      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 8001908:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190c:	e00e      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 800190e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001912:	e00b      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 8001914:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001918:	e008      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 800191a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800191e:	e005      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 8001920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001924:	e002      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	e000      	b.n	800192c <HAL_DMA_PollForTransfer+0x650>
 800192a:	2208      	movs	r2, #8
 800192c:	605a      	str	r2, [r3, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_ERROR;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2204      	movs	r2, #4
 800193e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]
      
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e265      	b.n	8001e1a <HAL_DMA_PollForTransfer+0xb3e>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001954:	d01a      	beq.n	800198c <HAL_DMA_PollForTransfer+0x6b0>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_DMA_PollForTransfer+0x690>
 800195c:	f7fe fcc4 	bl	80002e8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad2      	subs	r2, r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d90f      	bls.n	800198c <HAL_DMA_PollForTransfer+0x6b0>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001970:	f043 0220 	orr.w	r2, r3, #32
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	635a      	str	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2203      	movs	r2, #3
 800197c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]
        
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e246      	b.n	8001e1a <HAL_DMA_PollForTransfer+0xb3e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001998:	429a      	cmp	r2, r3
 800199a:	d90c      	bls.n	80019b6 <HAL_DMA_PollForTransfer+0x6da>
 800199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2300      	movne	r3, #0
 80019b0:	2301      	moveq	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	e00a      	b.n	80019cc <HAL_DMA_PollForTransfer+0x6f0>
 80019b6:	2300      	movs	r3, #0
 80019b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bf14      	ite	ne
 80019c6:	2300      	movne	r3, #0
 80019c8:	2301      	moveq	r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f47f ad8d 	bne.w	80014ec <HAL_DMA_PollForTransfer+0x210>
        return HAL_TIMEOUT;
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 810e 	bne.w	8001bf6 <HAL_DMA_PollForTransfer+0x91a>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019e6:	429a      	cmp	r2, r3
 80019e8:	f240 8081 	bls.w	8001aee <HAL_DMA_PollForTransfer+0x812>
 80019ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	4611      	mov	r1, r2
 80019fa:	2208      	movs	r2, #8
 80019fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a00:	4291      	cmp	r1, r2
 8001a02:	d071      	beq.n	8001ae8 <HAL_DMA_PollForTransfer+0x80c>
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	221c      	movs	r2, #28
 8001a0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a10:	4291      	cmp	r1, r2
 8001a12:	d067      	beq.n	8001ae4 <HAL_DMA_PollForTransfer+0x808>
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	2230      	movs	r2, #48	; 0x30
 8001a1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a20:	4291      	cmp	r1, r2
 8001a22:	d05c      	beq.n	8001ade <HAL_DMA_PollForTransfer+0x802>
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	2244      	movs	r2, #68	; 0x44
 8001a2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a30:	4291      	cmp	r1, r2
 8001a32:	d051      	beq.n	8001ad8 <HAL_DMA_PollForTransfer+0x7fc>
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	4611      	mov	r1, r2
 8001a3a:	2258      	movs	r2, #88	; 0x58
 8001a3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a40:	4291      	cmp	r1, r2
 8001a42:	d046      	beq.n	8001ad2 <HAL_DMA_PollForTransfer+0x7f6>
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	4611      	mov	r1, r2
 8001a4a:	226c      	movs	r2, #108	; 0x6c
 8001a4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a50:	4291      	cmp	r1, r2
 8001a52:	d03b      	beq.n	8001acc <HAL_DMA_PollForTransfer+0x7f0>
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a60:	4291      	cmp	r1, r2
 8001a62:	d030      	beq.n	8001ac6 <HAL_DMA_PollForTransfer+0x7ea>
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001a6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a72:	4291      	cmp	r1, r2
 8001a74:	d025      	beq.n	8001ac2 <HAL_DMA_PollForTransfer+0x7e6>
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	f240 421c 	movw	r2, #1052	; 0x41c
 8001a80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a84:	4291      	cmp	r1, r2
 8001a86:	d01a      	beq.n	8001abe <HAL_DMA_PollForTransfer+0x7e2>
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8001a92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a96:	4291      	cmp	r1, r2
 8001a98:	d00e      	beq.n	8001ab8 <HAL_DMA_PollForTransfer+0x7dc>
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	f240 4244 	movw	r2, #1092	; 0x444
 8001aa4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aa8:	4291      	cmp	r1, r2
 8001aaa:	d102      	bne.n	8001ab2 <HAL_DMA_PollForTransfer+0x7d6>
 8001aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab0:	e01b      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ab2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab6:	e018      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	e015      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001abe:	2220      	movs	r2, #32
 8001ac0:	e013      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	e011      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aca:	e00e      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001acc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ad0:	e00b      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad6:	e008      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001adc:	e005      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae2:	e002      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	e000      	b.n	8001aea <HAL_DMA_PollForTransfer+0x80e>
 8001ae8:	2202      	movs	r2, #2
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	e07e      	b.n	8001bec <HAL_DMA_PollForTransfer+0x910>
 8001aee:	2300      	movs	r3, #0
 8001af0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	4611      	mov	r1, r2
 8001afa:	2208      	movs	r2, #8
 8001afc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b00:	4291      	cmp	r1, r2
 8001b02:	d071      	beq.n	8001be8 <HAL_DMA_PollForTransfer+0x90c>
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	221c      	movs	r2, #28
 8001b0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b10:	4291      	cmp	r1, r2
 8001b12:	d067      	beq.n	8001be4 <HAL_DMA_PollForTransfer+0x908>
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	2230      	movs	r2, #48	; 0x30
 8001b1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b20:	4291      	cmp	r1, r2
 8001b22:	d05c      	beq.n	8001bde <HAL_DMA_PollForTransfer+0x902>
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	2244      	movs	r2, #68	; 0x44
 8001b2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b30:	4291      	cmp	r1, r2
 8001b32:	d051      	beq.n	8001bd8 <HAL_DMA_PollForTransfer+0x8fc>
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	2258      	movs	r2, #88	; 0x58
 8001b3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b40:	4291      	cmp	r1, r2
 8001b42:	d046      	beq.n	8001bd2 <HAL_DMA_PollForTransfer+0x8f6>
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	226c      	movs	r2, #108	; 0x6c
 8001b4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b50:	4291      	cmp	r1, r2
 8001b52:	d03b      	beq.n	8001bcc <HAL_DMA_PollForTransfer+0x8f0>
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b60:	4291      	cmp	r1, r2
 8001b62:	d030      	beq.n	8001bc6 <HAL_DMA_PollForTransfer+0x8ea>
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001b6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b72:	4291      	cmp	r1, r2
 8001b74:	d025      	beq.n	8001bc2 <HAL_DMA_PollForTransfer+0x8e6>
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	f240 421c 	movw	r2, #1052	; 0x41c
 8001b80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b84:	4291      	cmp	r1, r2
 8001b86:	d01a      	beq.n	8001bbe <HAL_DMA_PollForTransfer+0x8e2>
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8001b92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b96:	4291      	cmp	r1, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_DMA_PollForTransfer+0x8dc>
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	f240 4244 	movw	r2, #1092	; 0x444
 8001ba4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ba8:	4291      	cmp	r1, r2
 8001baa:	d102      	bne.n	8001bb2 <HAL_DMA_PollForTransfer+0x8d6>
 8001bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb0:	e01b      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb6:	e018      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbc:	e015      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	e013      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	e011      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bca:	e00e      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bcc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bd0:	e00b      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd6:	e008      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bdc:	e005      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be2:	e002      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001be4:	2220      	movs	r2, #32
 8001be6:	e000      	b.n	8001bea <HAL_DMA_PollForTransfer+0x90e>
 8001be8:	2202      	movs	r2, #2
 8001bea:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and 
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001bf4:	e10c      	b.n	8001e10 <HAL_DMA_PollForTransfer+0xb34>

  }
  else
  { 
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c02:	429a      	cmp	r2, r3
 8001c04:	f240 8081 	bls.w	8001d0a <HAL_DMA_PollForTransfer+0xa2e>
 8001c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	4611      	mov	r1, r2
 8001c16:	2208      	movs	r2, #8
 8001c18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c1c:	4291      	cmp	r1, r2
 8001c1e:	d071      	beq.n	8001d04 <HAL_DMA_PollForTransfer+0xa28>
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4611      	mov	r1, r2
 8001c26:	221c      	movs	r2, #28
 8001c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c2c:	4291      	cmp	r1, r2
 8001c2e:	d067      	beq.n	8001d00 <HAL_DMA_PollForTransfer+0xa24>
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4611      	mov	r1, r2
 8001c36:	2230      	movs	r2, #48	; 0x30
 8001c38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c3c:	4291      	cmp	r1, r2
 8001c3e:	d05c      	beq.n	8001cfa <HAL_DMA_PollForTransfer+0xa1e>
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	4611      	mov	r1, r2
 8001c46:	2244      	movs	r2, #68	; 0x44
 8001c48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c4c:	4291      	cmp	r1, r2
 8001c4e:	d051      	beq.n	8001cf4 <HAL_DMA_PollForTransfer+0xa18>
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	4611      	mov	r1, r2
 8001c56:	2258      	movs	r2, #88	; 0x58
 8001c58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c5c:	4291      	cmp	r1, r2
 8001c5e:	d046      	beq.n	8001cee <HAL_DMA_PollForTransfer+0xa12>
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	4611      	mov	r1, r2
 8001c66:	226c      	movs	r2, #108	; 0x6c
 8001c68:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c6c:	4291      	cmp	r1, r2
 8001c6e:	d03b      	beq.n	8001ce8 <HAL_DMA_PollForTransfer+0xa0c>
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	4611      	mov	r1, r2
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c7c:	4291      	cmp	r1, r2
 8001c7e:	d030      	beq.n	8001ce2 <HAL_DMA_PollForTransfer+0xa06>
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	4611      	mov	r1, r2
 8001c86:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001c8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c8e:	4291      	cmp	r1, r2
 8001c90:	d025      	beq.n	8001cde <HAL_DMA_PollForTransfer+0xa02>
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	4611      	mov	r1, r2
 8001c98:	f240 421c 	movw	r2, #1052	; 0x41c
 8001c9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ca0:	4291      	cmp	r1, r2
 8001ca2:	d01a      	beq.n	8001cda <HAL_DMA_PollForTransfer+0x9fe>
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8001cae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cb2:	4291      	cmp	r1, r2
 8001cb4:	d00e      	beq.n	8001cd4 <HAL_DMA_PollForTransfer+0x9f8>
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	f240 4244 	movw	r2, #1092	; 0x444
 8001cc0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cc4:	4291      	cmp	r1, r2
 8001cc6:	d102      	bne.n	8001cce <HAL_DMA_PollForTransfer+0x9f2>
 8001cc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ccc:	e01b      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001cce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cd2:	e018      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd8:	e015      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	e013      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001cde:	2204      	movs	r2, #4
 8001ce0:	e011      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001ce2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ce6:	e00e      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001ce8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cec:	e00b      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001cee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cf2:	e008      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001cf4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cf8:	e005      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfe:	e002      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	e000      	b.n	8001d06 <HAL_DMA_PollForTransfer+0xa2a>
 8001d04:	2204      	movs	r2, #4
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	e07e      	b.n	8001e08 <HAL_DMA_PollForTransfer+0xb2c>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	4611      	mov	r1, r2
 8001d16:	2208      	movs	r2, #8
 8001d18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d1c:	4291      	cmp	r1, r2
 8001d1e:	d071      	beq.n	8001e04 <HAL_DMA_PollForTransfer+0xb28>
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	4611      	mov	r1, r2
 8001d26:	221c      	movs	r2, #28
 8001d28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d2c:	4291      	cmp	r1, r2
 8001d2e:	d067      	beq.n	8001e00 <HAL_DMA_PollForTransfer+0xb24>
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	4611      	mov	r1, r2
 8001d36:	2230      	movs	r2, #48	; 0x30
 8001d38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d3c:	4291      	cmp	r1, r2
 8001d3e:	d05c      	beq.n	8001dfa <HAL_DMA_PollForTransfer+0xb1e>
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4611      	mov	r1, r2
 8001d46:	2244      	movs	r2, #68	; 0x44
 8001d48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d4c:	4291      	cmp	r1, r2
 8001d4e:	d051      	beq.n	8001df4 <HAL_DMA_PollForTransfer+0xb18>
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	4611      	mov	r1, r2
 8001d56:	2258      	movs	r2, #88	; 0x58
 8001d58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d5c:	4291      	cmp	r1, r2
 8001d5e:	d046      	beq.n	8001dee <HAL_DMA_PollForTransfer+0xb12>
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4611      	mov	r1, r2
 8001d66:	226c      	movs	r2, #108	; 0x6c
 8001d68:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d6c:	4291      	cmp	r1, r2
 8001d6e:	d03b      	beq.n	8001de8 <HAL_DMA_PollForTransfer+0xb0c>
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4611      	mov	r1, r2
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d7c:	4291      	cmp	r1, r2
 8001d7e:	d030      	beq.n	8001de2 <HAL_DMA_PollForTransfer+0xb06>
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	4611      	mov	r1, r2
 8001d86:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001d8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d8e:	4291      	cmp	r1, r2
 8001d90:	d025      	beq.n	8001dde <HAL_DMA_PollForTransfer+0xb02>
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4611      	mov	r1, r2
 8001d98:	f240 421c 	movw	r2, #1052	; 0x41c
 8001d9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da0:	4291      	cmp	r1, r2
 8001da2:	d01a      	beq.n	8001dda <HAL_DMA_PollForTransfer+0xafe>
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4611      	mov	r1, r2
 8001daa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8001dae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001db2:	4291      	cmp	r1, r2
 8001db4:	d00e      	beq.n	8001dd4 <HAL_DMA_PollForTransfer+0xaf8>
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	f240 4244 	movw	r2, #1092	; 0x444
 8001dc0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dc4:	4291      	cmp	r1, r2
 8001dc6:	d102      	bne.n	8001dce <HAL_DMA_PollForTransfer+0xaf2>
 8001dc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dcc:	e01b      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001dce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dd2:	e018      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dd8:	e015      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	e013      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001dde:	2204      	movs	r2, #4
 8001de0:	e011      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001de2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001de6:	e00e      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001de8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dec:	e00b      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001dee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001df2:	e008      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001df4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df8:	e005      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfe:	e002      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001e00:	2240      	movs	r2, #64	; 0x40
 8001e02:	e000      	b.n	8001e06 <HAL_DMA_PollForTransfer+0xb2a>
 8001e04:	2204      	movs	r2, #4
 8001e06:	605a      	str	r2, [r3, #4]
  
    /* The selected Channelx EN bit is cleared (DMA is disabled and 
    all transfers of half buffer are complete) */
    hdma->State = HAL_DMA_STATE_READY_HALF;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2211      	movs	r2, #17
 8001e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop

08001e24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f240 8087 	bls.w	8001f4c <HAL_DMA_IRQHandler+0x128>
 8001e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	2308      	movs	r3, #8
 8001e50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e54:	4299      	cmp	r1, r3
 8001e56:	d071      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x118>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	231c      	movs	r3, #28
 8001e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e64:	4299      	cmp	r1, r3
 8001e66:	d067      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x114>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	2330      	movs	r3, #48	; 0x30
 8001e70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e74:	4299      	cmp	r1, r3
 8001e76:	d05c      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x10e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	2344      	movs	r3, #68	; 0x44
 8001e80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e84:	4299      	cmp	r1, r3
 8001e86:	d051      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x108>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	2358      	movs	r3, #88	; 0x58
 8001e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e94:	4299      	cmp	r1, r3
 8001e96:	d046      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x102>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	236c      	movs	r3, #108	; 0x6c
 8001ea0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ea4:	4299      	cmp	r1, r3
 8001ea6:	d03b      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xfc>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eb4:	4299      	cmp	r1, r3
 8001eb6:	d030      	beq.n	8001f1a <HAL_DMA_IRQHandler+0xf6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001ec2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ec6:	4299      	cmp	r1, r3
 8001ec8:	d025      	beq.n	8001f16 <HAL_DMA_IRQHandler+0xf2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f240 431c 	movw	r3, #1052	; 0x41c
 8001ed4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ed8:	4299      	cmp	r1, r3
 8001eda:	d01a      	beq.n	8001f12 <HAL_DMA_IRQHandler+0xee>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001ee6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eea:	4299      	cmp	r1, r3
 8001eec:	d00e      	beq.n	8001f0c <HAL_DMA_IRQHandler+0xe8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f240 4344 	movw	r3, #1092	; 0x444
 8001ef8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001efc:	4299      	cmp	r1, r3
 8001efe:	d102      	bne.n	8001f06 <HAL_DMA_IRQHandler+0xe2>
 8001f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f04:	e01b      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f0a:	e018      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f10:	e015      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	e013      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f16:	2308      	movs	r3, #8
 8001f18:	e011      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f1e:	e00e      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001f24:	e00b      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f2a:	e008      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f30:	e005      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f36:	e002      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	e000      	b.n	8001f3e <HAL_DMA_IRQHandler+0x11a>
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2300      	moveq	r3, #0
 8001f46:	2301      	movne	r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e084      	b.n	8002056 <HAL_DMA_IRQHandler+0x232>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f60:	4299      	cmp	r1, r3
 8001f62:	d071      	beq.n	8002048 <HAL_DMA_IRQHandler+0x224>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	231c      	movs	r3, #28
 8001f6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f70:	4299      	cmp	r1, r3
 8001f72:	d067      	beq.n	8002044 <HAL_DMA_IRQHandler+0x220>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	2330      	movs	r3, #48	; 0x30
 8001f7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f80:	4299      	cmp	r1, r3
 8001f82:	d05c      	beq.n	800203e <HAL_DMA_IRQHandler+0x21a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	2344      	movs	r3, #68	; 0x44
 8001f8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f90:	4299      	cmp	r1, r3
 8001f92:	d051      	beq.n	8002038 <HAL_DMA_IRQHandler+0x214>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	2358      	movs	r3, #88	; 0x58
 8001f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fa0:	4299      	cmp	r1, r3
 8001fa2:	d046      	beq.n	8002032 <HAL_DMA_IRQHandler+0x20e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	236c      	movs	r3, #108	; 0x6c
 8001fac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fb0:	4299      	cmp	r1, r3
 8001fb2:	d03b      	beq.n	800202c <HAL_DMA_IRQHandler+0x208>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fc0:	4299      	cmp	r1, r3
 8001fc2:	d030      	beq.n	8002026 <HAL_DMA_IRQHandler+0x202>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001fce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	d025      	beq.n	8002022 <HAL_DMA_IRQHandler+0x1fe>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f240 431c 	movw	r3, #1052	; 0x41c
 8001fe0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fe4:	4299      	cmp	r1, r3
 8001fe6:	d01a      	beq.n	800201e <HAL_DMA_IRQHandler+0x1fa>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001ff2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ff6:	4299      	cmp	r1, r3
 8001ff8:	d00e      	beq.n	8002018 <HAL_DMA_IRQHandler+0x1f4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	f240 4344 	movw	r3, #1092	; 0x444
 8002004:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002008:	4299      	cmp	r1, r3
 800200a:	d102      	bne.n	8002012 <HAL_DMA_IRQHandler+0x1ee>
 800200c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002010:	e01b      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 8002012:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002016:	e018      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 8002018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800201c:	e015      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	e013      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 8002022:	2308      	movs	r3, #8
 8002024:	e011      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 8002026:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800202a:	e00e      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 800202c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002030:	e00b      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 8002032:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002036:	e008      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 8002038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203c:	e005      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 800203e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002042:	e002      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	e000      	b.n	800204a <HAL_DMA_IRQHandler+0x226>
 8002048:	2308      	movs	r3, #8
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2300      	moveq	r3, #0
 8002052:	2301      	movne	r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 812f 	beq.w	80022ba <HAL_DMA_IRQHandler+0x496>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8127 	beq.w	80022ba <HAL_DMA_IRQHandler+0x496>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	f022 0208 	bic.w	r2, r2, #8
 800207a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002088:	429a      	cmp	r2, r3
 800208a:	f240 8081 	bls.w	8002190 <HAL_DMA_IRQHandler+0x36c>
 800208e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002092:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	4611      	mov	r1, r2
 800209c:	2208      	movs	r2, #8
 800209e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020a2:	4291      	cmp	r1, r2
 80020a4:	d071      	beq.n	800218a <HAL_DMA_IRQHandler+0x366>
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4611      	mov	r1, r2
 80020ac:	221c      	movs	r2, #28
 80020ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020b2:	4291      	cmp	r1, r2
 80020b4:	d067      	beq.n	8002186 <HAL_DMA_IRQHandler+0x362>
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	4611      	mov	r1, r2
 80020bc:	2230      	movs	r2, #48	; 0x30
 80020be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020c2:	4291      	cmp	r1, r2
 80020c4:	d05c      	beq.n	8002180 <HAL_DMA_IRQHandler+0x35c>
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4611      	mov	r1, r2
 80020cc:	2244      	movs	r2, #68	; 0x44
 80020ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020d2:	4291      	cmp	r1, r2
 80020d4:	d051      	beq.n	800217a <HAL_DMA_IRQHandler+0x356>
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	4611      	mov	r1, r2
 80020dc:	2258      	movs	r2, #88	; 0x58
 80020de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020e2:	4291      	cmp	r1, r2
 80020e4:	d046      	beq.n	8002174 <HAL_DMA_IRQHandler+0x350>
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	4611      	mov	r1, r2
 80020ec:	226c      	movs	r2, #108	; 0x6c
 80020ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80020f2:	4291      	cmp	r1, r2
 80020f4:	d03b      	beq.n	800216e <HAL_DMA_IRQHandler+0x34a>
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4611      	mov	r1, r2
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002102:	4291      	cmp	r1, r2
 8002104:	d030      	beq.n	8002168 <HAL_DMA_IRQHandler+0x344>
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	4611      	mov	r1, r2
 800210c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002110:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002114:	4291      	cmp	r1, r2
 8002116:	d025      	beq.n	8002164 <HAL_DMA_IRQHandler+0x340>
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	4611      	mov	r1, r2
 800211e:	f240 421c 	movw	r2, #1052	; 0x41c
 8002122:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002126:	4291      	cmp	r1, r2
 8002128:	d01a      	beq.n	8002160 <HAL_DMA_IRQHandler+0x33c>
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	4611      	mov	r1, r2
 8002130:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002134:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002138:	4291      	cmp	r1, r2
 800213a:	d00e      	beq.n	800215a <HAL_DMA_IRQHandler+0x336>
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	4611      	mov	r1, r2
 8002142:	f240 4244 	movw	r2, #1092	; 0x444
 8002146:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800214a:	4291      	cmp	r1, r2
 800214c:	d102      	bne.n	8002154 <HAL_DMA_IRQHandler+0x330>
 800214e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002152:	e01b      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 8002154:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002158:	e018      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 800215a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800215e:	e015      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	e013      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 8002164:	2208      	movs	r2, #8
 8002166:	e011      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 8002168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800216c:	e00e      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 800216e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002172:	e00b      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 8002174:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002178:	e008      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 800217a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800217e:	e005      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 8002180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002184:	e002      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	e000      	b.n	800218c <HAL_DMA_IRQHandler+0x368>
 800218a:	2208      	movs	r2, #8
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	e07e      	b.n	800228e <HAL_DMA_IRQHandler+0x46a>
 8002190:	2300      	movs	r3, #0
 8002192:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	4611      	mov	r1, r2
 800219c:	2208      	movs	r2, #8
 800219e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021a2:	4291      	cmp	r1, r2
 80021a4:	d071      	beq.n	800228a <HAL_DMA_IRQHandler+0x466>
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	4611      	mov	r1, r2
 80021ac:	221c      	movs	r2, #28
 80021ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021b2:	4291      	cmp	r1, r2
 80021b4:	d067      	beq.n	8002286 <HAL_DMA_IRQHandler+0x462>
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4611      	mov	r1, r2
 80021bc:	2230      	movs	r2, #48	; 0x30
 80021be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021c2:	4291      	cmp	r1, r2
 80021c4:	d05c      	beq.n	8002280 <HAL_DMA_IRQHandler+0x45c>
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	4611      	mov	r1, r2
 80021cc:	2244      	movs	r2, #68	; 0x44
 80021ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021d2:	4291      	cmp	r1, r2
 80021d4:	d051      	beq.n	800227a <HAL_DMA_IRQHandler+0x456>
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	4611      	mov	r1, r2
 80021dc:	2258      	movs	r2, #88	; 0x58
 80021de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021e2:	4291      	cmp	r1, r2
 80021e4:	d046      	beq.n	8002274 <HAL_DMA_IRQHandler+0x450>
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4611      	mov	r1, r2
 80021ec:	226c      	movs	r2, #108	; 0x6c
 80021ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021f2:	4291      	cmp	r1, r2
 80021f4:	d03b      	beq.n	800226e <HAL_DMA_IRQHandler+0x44a>
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	4611      	mov	r1, r2
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002202:	4291      	cmp	r1, r2
 8002204:	d030      	beq.n	8002268 <HAL_DMA_IRQHandler+0x444>
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	4611      	mov	r1, r2
 800220c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002210:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002214:	4291      	cmp	r1, r2
 8002216:	d025      	beq.n	8002264 <HAL_DMA_IRQHandler+0x440>
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	4611      	mov	r1, r2
 800221e:	f240 421c 	movw	r2, #1052	; 0x41c
 8002222:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002226:	4291      	cmp	r1, r2
 8002228:	d01a      	beq.n	8002260 <HAL_DMA_IRQHandler+0x43c>
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	4611      	mov	r1, r2
 8002230:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002234:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002238:	4291      	cmp	r1, r2
 800223a:	d00e      	beq.n	800225a <HAL_DMA_IRQHandler+0x436>
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	4611      	mov	r1, r2
 8002242:	f240 4244 	movw	r2, #1092	; 0x444
 8002246:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800224a:	4291      	cmp	r1, r2
 800224c:	d102      	bne.n	8002254 <HAL_DMA_IRQHandler+0x430>
 800224e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002252:	e01b      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 8002254:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002258:	e018      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 800225a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800225e:	e015      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	e013      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 8002264:	2208      	movs	r2, #8
 8002266:	e011      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 8002268:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800226c:	e00e      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 800226e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002272:	e00b      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 8002274:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002278:	e008      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 800227a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800227e:	e005      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 8002280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002284:	e002      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	e000      	b.n	800228c <HAL_DMA_IRQHandler+0x468>
 800228a:	2208      	movs	r2, #8
 800228c:	605a      	str	r2, [r3, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2204      	movs	r2, #4
 800229e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2020 	strb.w	r2, [r3, #32]
      
      if (hdma->XferErrorCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_DMA_IRQHandler+0x496>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022c6:	429a      	cmp	r2, r3
 80022c8:	f240 8087 	bls.w	80023da <HAL_DMA_IRQHandler+0x5b6>
 80022cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4619      	mov	r1, r3
 80022dc:	2308      	movs	r3, #8
 80022de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022e2:	4299      	cmp	r1, r3
 80022e4:	d071      	beq.n	80023ca <HAL_DMA_IRQHandler+0x5a6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	231c      	movs	r3, #28
 80022ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022f2:	4299      	cmp	r1, r3
 80022f4:	d067      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x5a2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	2330      	movs	r3, #48	; 0x30
 80022fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002302:	4299      	cmp	r1, r3
 8002304:	d05c      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x59c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	2344      	movs	r3, #68	; 0x44
 800230e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002312:	4299      	cmp	r1, r3
 8002314:	d051      	beq.n	80023ba <HAL_DMA_IRQHandler+0x596>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	2358      	movs	r3, #88	; 0x58
 800231e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002322:	4299      	cmp	r1, r3
 8002324:	d046      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x590>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	236c      	movs	r3, #108	; 0x6c
 800232e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002332:	4299      	cmp	r1, r3
 8002334:	d03b      	beq.n	80023ae <HAL_DMA_IRQHandler+0x58a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002342:	4299      	cmp	r1, r3
 8002344:	d030      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x584>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002350:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002354:	4299      	cmp	r1, r3
 8002356:	d025      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x580>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f240 431c 	movw	r3, #1052	; 0x41c
 8002362:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002366:	4299      	cmp	r1, r3
 8002368:	d01a      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x57c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4619      	mov	r1, r3
 8002370:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002374:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002378:	4299      	cmp	r1, r3
 800237a:	d00e      	beq.n	800239a <HAL_DMA_IRQHandler+0x576>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f240 4344 	movw	r3, #1092	; 0x444
 8002386:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800238a:	4299      	cmp	r1, r3
 800238c:	d102      	bne.n	8002394 <HAL_DMA_IRQHandler+0x570>
 800238e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002392:	e01b      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 8002394:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002398:	e018      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 800239a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239e:	e015      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023a0:	2340      	movs	r3, #64	; 0x40
 80023a2:	e013      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e011      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023ac:	e00e      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023b2:	e00b      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023b8:	e008      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023be:	e005      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c4:	e002      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023c6:	2340      	movs	r3, #64	; 0x40
 80023c8:	e000      	b.n	80023cc <HAL_DMA_IRQHandler+0x5a8>
 80023ca:	2304      	movs	r3, #4
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bf0c      	ite	eq
 80023d2:	2300      	moveq	r3, #0
 80023d4:	2301      	movne	r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	e084      	b.n	80024e4 <HAL_DMA_IRQHandler+0x6c0>
 80023da:	2300      	movs	r3, #0
 80023dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	2308      	movs	r3, #8
 80023ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023ee:	4299      	cmp	r1, r3
 80023f0:	d071      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x6b2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	231c      	movs	r3, #28
 80023fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023fe:	4299      	cmp	r1, r3
 8002400:	d067      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x6ae>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	2330      	movs	r3, #48	; 0x30
 800240a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800240e:	4299      	cmp	r1, r3
 8002410:	d05c      	beq.n	80024cc <HAL_DMA_IRQHandler+0x6a8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	2344      	movs	r3, #68	; 0x44
 800241a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800241e:	4299      	cmp	r1, r3
 8002420:	d051      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x6a2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4619      	mov	r1, r3
 8002428:	2358      	movs	r3, #88	; 0x58
 800242a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800242e:	4299      	cmp	r1, r3
 8002430:	d046      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x69c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	236c      	movs	r3, #108	; 0x6c
 800243a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800243e:	4299      	cmp	r1, r3
 8002440:	d03b      	beq.n	80024ba <HAL_DMA_IRQHandler+0x696>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800244e:	4299      	cmp	r1, r3
 8002450:	d030      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x690>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800245c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002460:	4299      	cmp	r1, r3
 8002462:	d025      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x68c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f240 431c 	movw	r3, #1052	; 0x41c
 800246e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002472:	4299      	cmp	r1, r3
 8002474:	d01a      	beq.n	80024ac <HAL_DMA_IRQHandler+0x688>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002484:	4299      	cmp	r1, r3
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x682>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f240 4344 	movw	r3, #1092	; 0x444
 8002492:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002496:	4299      	cmp	r1, r3
 8002498:	d102      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x67c>
 800249a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800249e:	e01b      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024a4:	e018      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024aa:	e015      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024ac:	2340      	movs	r3, #64	; 0x40
 80024ae:	e013      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024b0:	2304      	movs	r3, #4
 80024b2:	e011      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024b8:	e00e      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024be:	e00b      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024c4:	e008      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ca:	e005      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d0:	e002      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024d2:	2340      	movs	r3, #64	; 0x40
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_IRQHandler+0x6b4>
 80024d6:	2304      	movs	r3, #4
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf0c      	ite	eq
 80024de:	2300      	moveq	r3, #0
 80024e0:	2301      	movne	r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 812c 	beq.w	8002742 <HAL_DMA_IRQHandler+0x91e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8124 	beq.w	8002742 <HAL_DMA_IRQHandler+0x91e>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_DMA_IRQHandler+0x6f4>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002524:	429a      	cmp	r2, r3
 8002526:	f240 8081 	bls.w	800262c <HAL_DMA_IRQHandler+0x808>
 800252a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4611      	mov	r1, r2
 8002538:	2208      	movs	r2, #8
 800253a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800253e:	4291      	cmp	r1, r2
 8002540:	d071      	beq.n	8002626 <HAL_DMA_IRQHandler+0x802>
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4611      	mov	r1, r2
 8002548:	221c      	movs	r2, #28
 800254a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800254e:	4291      	cmp	r1, r2
 8002550:	d067      	beq.n	8002622 <HAL_DMA_IRQHandler+0x7fe>
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4611      	mov	r1, r2
 8002558:	2230      	movs	r2, #48	; 0x30
 800255a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800255e:	4291      	cmp	r1, r2
 8002560:	d05c      	beq.n	800261c <HAL_DMA_IRQHandler+0x7f8>
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	4611      	mov	r1, r2
 8002568:	2244      	movs	r2, #68	; 0x44
 800256a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800256e:	4291      	cmp	r1, r2
 8002570:	d051      	beq.n	8002616 <HAL_DMA_IRQHandler+0x7f2>
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4611      	mov	r1, r2
 8002578:	2258      	movs	r2, #88	; 0x58
 800257a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800257e:	4291      	cmp	r1, r2
 8002580:	d046      	beq.n	8002610 <HAL_DMA_IRQHandler+0x7ec>
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	4611      	mov	r1, r2
 8002588:	226c      	movs	r2, #108	; 0x6c
 800258a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800258e:	4291      	cmp	r1, r2
 8002590:	d03b      	beq.n	800260a <HAL_DMA_IRQHandler+0x7e6>
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	4611      	mov	r1, r2
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800259e:	4291      	cmp	r1, r2
 80025a0:	d030      	beq.n	8002604 <HAL_DMA_IRQHandler+0x7e0>
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4611      	mov	r1, r2
 80025a8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80025ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025b0:	4291      	cmp	r1, r2
 80025b2:	d025      	beq.n	8002600 <HAL_DMA_IRQHandler+0x7dc>
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	4611      	mov	r1, r2
 80025ba:	f240 421c 	movw	r2, #1052	; 0x41c
 80025be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025c2:	4291      	cmp	r1, r2
 80025c4:	d01a      	beq.n	80025fc <HAL_DMA_IRQHandler+0x7d8>
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4611      	mov	r1, r2
 80025cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80025d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025d4:	4291      	cmp	r1, r2
 80025d6:	d00e      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x7d2>
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	4611      	mov	r1, r2
 80025de:	f240 4244 	movw	r2, #1092	; 0x444
 80025e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80025e6:	4291      	cmp	r1, r2
 80025e8:	d102      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x7cc>
 80025ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ee:	e01b      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 80025f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025f4:	e018      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 80025f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fa:	e015      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 80025fc:	2240      	movs	r2, #64	; 0x40
 80025fe:	e013      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 8002600:	2204      	movs	r2, #4
 8002602:	e011      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 8002604:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002608:	e00e      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 800260a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800260e:	e00b      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 8002610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002614:	e008      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 8002616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800261a:	e005      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 800261c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002620:	e002      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	e000      	b.n	8002628 <HAL_DMA_IRQHandler+0x804>
 8002626:	2204      	movs	r2, #4
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e07e      	b.n	800272a <HAL_DMA_IRQHandler+0x906>
 800262c:	2300      	movs	r3, #0
 800262e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4611      	mov	r1, r2
 8002638:	2208      	movs	r2, #8
 800263a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800263e:	4291      	cmp	r1, r2
 8002640:	d071      	beq.n	8002726 <HAL_DMA_IRQHandler+0x902>
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4611      	mov	r1, r2
 8002648:	221c      	movs	r2, #28
 800264a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800264e:	4291      	cmp	r1, r2
 8002650:	d067      	beq.n	8002722 <HAL_DMA_IRQHandler+0x8fe>
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4611      	mov	r1, r2
 8002658:	2230      	movs	r2, #48	; 0x30
 800265a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800265e:	4291      	cmp	r1, r2
 8002660:	d05c      	beq.n	800271c <HAL_DMA_IRQHandler+0x8f8>
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	4611      	mov	r1, r2
 8002668:	2244      	movs	r2, #68	; 0x44
 800266a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800266e:	4291      	cmp	r1, r2
 8002670:	d051      	beq.n	8002716 <HAL_DMA_IRQHandler+0x8f2>
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	4611      	mov	r1, r2
 8002678:	2258      	movs	r2, #88	; 0x58
 800267a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800267e:	4291      	cmp	r1, r2
 8002680:	d046      	beq.n	8002710 <HAL_DMA_IRQHandler+0x8ec>
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4611      	mov	r1, r2
 8002688:	226c      	movs	r2, #108	; 0x6c
 800268a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800268e:	4291      	cmp	r1, r2
 8002690:	d03b      	beq.n	800270a <HAL_DMA_IRQHandler+0x8e6>
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	4611      	mov	r1, r2
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800269e:	4291      	cmp	r1, r2
 80026a0:	d030      	beq.n	8002704 <HAL_DMA_IRQHandler+0x8e0>
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4611      	mov	r1, r2
 80026a8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80026ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026b0:	4291      	cmp	r1, r2
 80026b2:	d025      	beq.n	8002700 <HAL_DMA_IRQHandler+0x8dc>
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	4611      	mov	r1, r2
 80026ba:	f240 421c 	movw	r2, #1052	; 0x41c
 80026be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026c2:	4291      	cmp	r1, r2
 80026c4:	d01a      	beq.n	80026fc <HAL_DMA_IRQHandler+0x8d8>
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	4611      	mov	r1, r2
 80026cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80026d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026d4:	4291      	cmp	r1, r2
 80026d6:	d00e      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x8d2>
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	4611      	mov	r1, r2
 80026de:	f240 4244 	movw	r2, #1092	; 0x444
 80026e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80026e6:	4291      	cmp	r1, r2
 80026e8:	d102      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x8cc>
 80026ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026ee:	e01b      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 80026f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026f4:	e018      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 80026f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026fa:	e015      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 80026fc:	2240      	movs	r2, #64	; 0x40
 80026fe:	e013      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 8002700:	2204      	movs	r2, #4
 8002702:	e011      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 8002704:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002708:	e00e      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 800270a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800270e:	e00b      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 8002710:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002714:	e008      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 8002716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800271a:	e005      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 800271c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002720:	e002      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	e000      	b.n	8002728 <HAL_DMA_IRQHandler+0x904>
 8002726:	2204      	movs	r2, #4
 8002728:	605a      	str	r2, [r3, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2211      	movs	r2, #17
 800272e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_DMA_IRQHandler+0x91e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800274e:	429a      	cmp	r2, r3
 8002750:	f240 8087 	bls.w	8002862 <HAL_DMA_IRQHandler+0xa3e>
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	2308      	movs	r3, #8
 8002766:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800276a:	4299      	cmp	r1, r3
 800276c:	d071      	beq.n	8002852 <HAL_DMA_IRQHandler+0xa2e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4619      	mov	r1, r3
 8002774:	231c      	movs	r3, #28
 8002776:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800277a:	4299      	cmp	r1, r3
 800277c:	d067      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	2330      	movs	r3, #48	; 0x30
 8002786:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800278a:	4299      	cmp	r1, r3
 800278c:	d05c      	beq.n	8002848 <HAL_DMA_IRQHandler+0xa24>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
 8002794:	2344      	movs	r3, #68	; 0x44
 8002796:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800279a:	4299      	cmp	r1, r3
 800279c:	d051      	beq.n	8002842 <HAL_DMA_IRQHandler+0xa1e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	2358      	movs	r3, #88	; 0x58
 80027a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027aa:	4299      	cmp	r1, r3
 80027ac:	d046      	beq.n	800283c <HAL_DMA_IRQHandler+0xa18>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4619      	mov	r1, r3
 80027b4:	236c      	movs	r3, #108	; 0x6c
 80027b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027ba:	4299      	cmp	r1, r3
 80027bc:	d03b      	beq.n	8002836 <HAL_DMA_IRQHandler+0xa12>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027ca:	4299      	cmp	r1, r3
 80027cc:	d030      	beq.n	8002830 <HAL_DMA_IRQHandler+0xa0c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80027d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027dc:	4299      	cmp	r1, r3
 80027de:	d025      	beq.n	800282c <HAL_DMA_IRQHandler+0xa08>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f240 431c 	movw	r3, #1052	; 0x41c
 80027ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027ee:	4299      	cmp	r1, r3
 80027f0:	d01a      	beq.n	8002828 <HAL_DMA_IRQHandler+0xa04>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80027fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002800:	4299      	cmp	r1, r3
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_IRQHandler+0x9fe>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	f240 4344 	movw	r3, #1092	; 0x444
 800280e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002812:	4299      	cmp	r1, r3
 8002814:	d102      	bne.n	800281c <HAL_DMA_IRQHandler+0x9f8>
 8002816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800281a:	e01b      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 800281c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002820:	e018      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 8002822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002826:	e015      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 8002828:	2320      	movs	r3, #32
 800282a:	e013      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 800282c:	2302      	movs	r3, #2
 800282e:	e011      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 8002830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002834:	e00e      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 8002836:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800283a:	e00b      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 800283c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002840:	e008      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 8002842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002846:	e005      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 8002848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284c:	e002      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 800284e:	2320      	movs	r3, #32
 8002850:	e000      	b.n	8002854 <HAL_DMA_IRQHandler+0xa30>
 8002852:	2302      	movs	r3, #2
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	bf0c      	ite	eq
 800285a:	2300      	moveq	r3, #0
 800285c:	2301      	movne	r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	e084      	b.n	800296c <HAL_DMA_IRQHandler+0xb48>
 8002862:	2300      	movs	r3, #0
 8002864:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	2308      	movs	r3, #8
 8002872:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002876:	4299      	cmp	r1, r3
 8002878:	d071      	beq.n	800295e <HAL_DMA_IRQHandler+0xb3a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4619      	mov	r1, r3
 8002880:	231c      	movs	r3, #28
 8002882:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002886:	4299      	cmp	r1, r3
 8002888:	d067      	beq.n	800295a <HAL_DMA_IRQHandler+0xb36>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	2330      	movs	r3, #48	; 0x30
 8002892:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002896:	4299      	cmp	r1, r3
 8002898:	d05c      	beq.n	8002954 <HAL_DMA_IRQHandler+0xb30>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4619      	mov	r1, r3
 80028a0:	2344      	movs	r3, #68	; 0x44
 80028a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028a6:	4299      	cmp	r1, r3
 80028a8:	d051      	beq.n	800294e <HAL_DMA_IRQHandler+0xb2a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4619      	mov	r1, r3
 80028b0:	2358      	movs	r3, #88	; 0x58
 80028b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028b6:	4299      	cmp	r1, r3
 80028b8:	d046      	beq.n	8002948 <HAL_DMA_IRQHandler+0xb24>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	236c      	movs	r3, #108	; 0x6c
 80028c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028c6:	4299      	cmp	r1, r3
 80028c8:	d03b      	beq.n	8002942 <HAL_DMA_IRQHandler+0xb1e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028d6:	4299      	cmp	r1, r3
 80028d8:	d030      	beq.n	800293c <HAL_DMA_IRQHandler+0xb18>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80028e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028e8:	4299      	cmp	r1, r3
 80028ea:	d025      	beq.n	8002938 <HAL_DMA_IRQHandler+0xb14>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	f240 431c 	movw	r3, #1052	; 0x41c
 80028f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028fa:	4299      	cmp	r1, r3
 80028fc:	d01a      	beq.n	8002934 <HAL_DMA_IRQHandler+0xb10>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002908:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800290c:	4299      	cmp	r1, r3
 800290e:	d00e      	beq.n	800292e <HAL_DMA_IRQHandler+0xb0a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	f240 4344 	movw	r3, #1092	; 0x444
 800291a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800291e:	4299      	cmp	r1, r3
 8002920:	d102      	bne.n	8002928 <HAL_DMA_IRQHandler+0xb04>
 8002922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002926:	e01b      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 8002928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800292c:	e018      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 800292e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002932:	e015      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 8002934:	2320      	movs	r3, #32
 8002936:	e013      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 8002938:	2302      	movs	r3, #2
 800293a:	e011      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 800293c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002940:	e00e      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 8002942:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002946:	e00b      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 8002948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294c:	e008      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 800294e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002952:	e005      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 8002954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002958:	e002      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 800295a:	2320      	movs	r3, #32
 800295c:	e000      	b.n	8002960 <HAL_DMA_IRQHandler+0xb3c>
 800295e:	2302      	movs	r3, #2
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf0c      	ite	eq
 8002966:	2300      	moveq	r3, #0
 8002968:	2301      	movne	r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8134 	beq.w	8002bda <HAL_DMA_IRQHandler+0xdb6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 812c 	beq.w	8002bda <HAL_DMA_IRQHandler+0xdb6>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_DMA_IRQHandler+0xb7c>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	f022 0202 	bic.w	r2, r2, #2
 800299e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ac:	429a      	cmp	r2, r3
 80029ae:	f240 8081 	bls.w	8002ab4 <HAL_DMA_IRQHandler+0xc90>
 80029b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	4611      	mov	r1, r2
 80029c0:	2208      	movs	r2, #8
 80029c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029c6:	4291      	cmp	r1, r2
 80029c8:	d071      	beq.n	8002aae <HAL_DMA_IRQHandler+0xc8a>
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	4611      	mov	r1, r2
 80029d0:	221c      	movs	r2, #28
 80029d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029d6:	4291      	cmp	r1, r2
 80029d8:	d067      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xc86>
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	4611      	mov	r1, r2
 80029e0:	2230      	movs	r2, #48	; 0x30
 80029e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029e6:	4291      	cmp	r1, r2
 80029e8:	d05c      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0xc80>
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4611      	mov	r1, r2
 80029f0:	2244      	movs	r2, #68	; 0x44
 80029f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029f6:	4291      	cmp	r1, r2
 80029f8:	d051      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xc7a>
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	4611      	mov	r1, r2
 8002a00:	2258      	movs	r2, #88	; 0x58
 8002a02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a06:	4291      	cmp	r1, r2
 8002a08:	d046      	beq.n	8002a98 <HAL_DMA_IRQHandler+0xc74>
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	226c      	movs	r2, #108	; 0x6c
 8002a12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a16:	4291      	cmp	r1, r2
 8002a18:	d03b      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xc6e>
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a26:	4291      	cmp	r1, r2
 8002a28:	d030      	beq.n	8002a8c <HAL_DMA_IRQHandler+0xc68>
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002a34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a38:	4291      	cmp	r1, r2
 8002a3a:	d025      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xc64>
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	4611      	mov	r1, r2
 8002a42:	f240 421c 	movw	r2, #1052	; 0x41c
 8002a46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a4a:	4291      	cmp	r1, r2
 8002a4c:	d01a      	beq.n	8002a84 <HAL_DMA_IRQHandler+0xc60>
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	4611      	mov	r1, r2
 8002a54:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002a58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a5c:	4291      	cmp	r1, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xc5a>
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	4611      	mov	r1, r2
 8002a66:	f240 4244 	movw	r2, #1092	; 0x444
 8002a6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a6e:	4291      	cmp	r1, r2
 8002a70:	d102      	bne.n	8002a78 <HAL_DMA_IRQHandler+0xc54>
 8002a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a76:	e01b      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002a78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a7c:	e018      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a82:	e015      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002a84:	2220      	movs	r2, #32
 8002a86:	e013      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002a88:	2202      	movs	r2, #2
 8002a8a:	e011      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a90:	e00e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002a92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a96:	e00b      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002a98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a9c:	e008      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa2:	e005      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa8:	e002      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002aaa:	2220      	movs	r2, #32
 8002aac:	e000      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xc8c>
 8002aae:	2202      	movs	r2, #2
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	e07e      	b.n	8002bb2 <HAL_DMA_IRQHandler+0xd8e>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ac6:	4291      	cmp	r1, r2
 8002ac8:	d071      	beq.n	8002bae <HAL_DMA_IRQHandler+0xd8a>
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	221c      	movs	r2, #28
 8002ad2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ad6:	4291      	cmp	r1, r2
 8002ad8:	d067      	beq.n	8002baa <HAL_DMA_IRQHandler+0xd86>
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	2230      	movs	r2, #48	; 0x30
 8002ae2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002ae6:	4291      	cmp	r1, r2
 8002ae8:	d05c      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd80>
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	4611      	mov	r1, r2
 8002af0:	2244      	movs	r2, #68	; 0x44
 8002af2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002af6:	4291      	cmp	r1, r2
 8002af8:	d051      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd7a>
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	4611      	mov	r1, r2
 8002b00:	2258      	movs	r2, #88	; 0x58
 8002b02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b06:	4291      	cmp	r1, r2
 8002b08:	d046      	beq.n	8002b98 <HAL_DMA_IRQHandler+0xd74>
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	226c      	movs	r2, #108	; 0x6c
 8002b12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b16:	4291      	cmp	r1, r2
 8002b18:	d03b      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xd6e>
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b26:	4291      	cmp	r1, r2
 8002b28:	d030      	beq.n	8002b8c <HAL_DMA_IRQHandler+0xd68>
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002b34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b38:	4291      	cmp	r1, r2
 8002b3a:	d025      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xd64>
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	4611      	mov	r1, r2
 8002b42:	f240 421c 	movw	r2, #1052	; 0x41c
 8002b46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b4a:	4291      	cmp	r1, r2
 8002b4c:	d01a      	beq.n	8002b84 <HAL_DMA_IRQHandler+0xd60>
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	4611      	mov	r1, r2
 8002b54:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002b58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b5c:	4291      	cmp	r1, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_DMA_IRQHandler+0xd5a>
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4611      	mov	r1, r2
 8002b66:	f240 4244 	movw	r2, #1092	; 0x444
 8002b6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002b6e:	4291      	cmp	r1, r2
 8002b70:	d102      	bne.n	8002b78 <HAL_DMA_IRQHandler+0xd54>
 8002b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b76:	e01b      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002b78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7c:	e018      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b82:	e015      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002b84:	2220      	movs	r2, #32
 8002b86:	e013      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002b88:	2202      	movs	r2, #2
 8002b8a:	e011      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b90:	e00e      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002b92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b96:	e00b      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002b98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b9c:	e008      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba2:	e005      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba8:	e002      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002baa:	2220      	movs	r2, #32
 8002bac:	e000      	b.n	8002bb0 <HAL_DMA_IRQHandler+0xd8c>
 8002bae:	2202      	movs	r2, #2
 8002bb0:	605a      	str	r2, [r3, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_DMA_IRQHandler+0xdb6>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
      }
    }
  }
}
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d108      	bne.n	8002c44 <DMA_SetConfig+0x30>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	e007      	b.n	8002c54 <DMA_SetConfig+0x40>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	60da      	str	r2, [r3, #12]
  }
}
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b08b      	sub	sp, #44	; 0x2c
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
 8002c82:	e17f      	b.n	8002f84 <HAL_GPIO_Init+0x324>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	2201      	movs	r2, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f040 816e 	bne.w	8002f7e <HAL_GPIO_Init+0x31e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b12      	cmp	r3, #18
 8002ca8:	d042      	beq.n	8002d30 <HAL_GPIO_Init+0xd0>
 8002caa:	2b12      	cmp	r3, #18
 8002cac:	d80d      	bhi.n	8002cca <HAL_GPIO_Init+0x6a>
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d039      	beq.n	8002d26 <HAL_GPIO_Init+0xc6>
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d804      	bhi.n	8002cc0 <HAL_GPIO_Init+0x60>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d03f      	beq.n	8002d3a <HAL_GPIO_Init+0xda>
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d02a      	beq.n	8002d14 <HAL_GPIO_Init+0xb4>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8002cbe:	e057      	b.n	8002d70 <HAL_GPIO_Init+0x110>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d052      	beq.n	8002d6a <HAL_GPIO_Init+0x10a>
 8002cc4:	2b11      	cmp	r3, #17
 8002cc6:	d029      	beq.n	8002d1c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8002cc8:	e052      	b.n	8002d70 <HAL_GPIO_Init+0x110>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f2c1 0221 	movt	r2, #4129	; 0x1021
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d032      	beq.n	8002d3a <HAL_GPIO_Init+0xda>
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f2c1 0221 	movt	r2, #4129	; 0x1021
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d80a      	bhi.n	8002cf4 <HAL_GPIO_Init+0x94>
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f2c1 0211 	movt	r2, #4113	; 0x1011
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d028      	beq.n	8002d3a <HAL_GPIO_Init+0xda>
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f2c1 0212 	movt	r2, #4114	; 0x1012
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d023      	beq.n	8002d3a <HAL_GPIO_Init+0xda>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8002cf2:	e03d      	b.n	8002d70 <HAL_GPIO_Init+0x110>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f2c1 0231 	movt	r2, #4145	; 0x1031
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01d      	beq.n	8002d3a <HAL_GPIO_Init+0xda>
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f2c1 0232 	movt	r2, #4146	; 0x1032
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d018      	beq.n	8002d3a <HAL_GPIO_Init+0xda>
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f2c1 0222 	movt	r2, #4130	; 0x1022
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0xda>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8002d12:	e02d      	b.n	8002d70 <HAL_GPIO_Init+0x110>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	623b      	str	r3, [r7, #32]
          break;
 8002d1a:	e029      	b.n	8002d70 <HAL_GPIO_Init+0x110>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	3304      	adds	r3, #4
 8002d22:	623b      	str	r3, [r7, #32]
          break;
 8002d24:	e024      	b.n	8002d70 <HAL_GPIO_Init+0x110>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e01f      	b.n	8002d70 <HAL_GPIO_Init+0x110>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	330c      	adds	r3, #12
 8002d36:	623b      	str	r3, [r7, #32]
          break;
 8002d38:	e01a      	b.n	8002d70 <HAL_GPIO_Init+0x110>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_GPIO_Init+0xe8>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d42:	2304      	movs	r3, #4
 8002d44:	623b      	str	r3, [r7, #32]
 8002d46:	e00f      	b.n	8002d68 <HAL_GPIO_Init+0x108>
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_GPIO_Init+0xfc>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d50:	2308      	movs	r3, #8
 8002d52:	623b      	str	r3, [r7, #32]
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	611a      	str	r2, [r3, #16]
 8002d5a:	e005      	b.n	8002d68 <HAL_GPIO_Init+0x108>
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	623b      	str	r3, [r7, #32]
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	615a      	str	r2, [r3, #20]
          }
          break; 
 8002d66:	e003      	b.n	8002d70 <HAL_GPIO_Init+0x110>
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_Init+0x110>
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
          break;
 8002d6e:	bf00      	nop
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2bff      	cmp	r3, #255	; 0xff
 8002d74:	d801      	bhi.n	8002d7a <HAL_GPIO_Init+0x11a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	e001      	b.n	8002d7e <HAL_GPIO_Init+0x11e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d802      	bhi.n	8002d8c <HAL_GPIO_Init+0x12c>
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	e002      	b.n	8002d92 <HAL_GPIO_Init+0x132>
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3b08      	subs	r3, #8
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6a39      	ldr	r1, [r7, #32]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80df 	beq.w	8002f7e <HAL_GPIO_Init+0x31e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002dd0:	6992      	ldr	r2, [r2, #24]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	619a      	str	r2, [r3, #24]
 8002dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ddc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8002dea:	2300      	movs	r3, #0
 8002dec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df2:	0892      	lsrs	r2, r2, #2
 8002df4:	3202      	adds	r2, #2
 8002df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfa:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d01c      	beq.n	8002e5a <HAL_GPIO_Init+0x1fa>
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x1f6>
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d00a      	beq.n	8002e52 <HAL_GPIO_Init+0x1f2>
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x1ee>
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x1fc>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	e004      	b.n	8002e5c <HAL_GPIO_Init+0x1fc>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e002      	b.n	8002e5c <HAL_GPIO_Init+0x1fc>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_GPIO_Init+0x1fc>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	f002 0203 	and.w	r2, r2, #3
 8002e62:	0092      	lsls	r2, r2, #2
 8002e64:	4093      	lsls	r3, r2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	0892      	lsrs	r2, r2, #2
 8002e76:	3202      	adds	r2, #2
 8002e78:	6979      	ldr	r1, [r7, #20]
 8002e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8002e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e96:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002e9a:	6811      	ldr	r1, [r2, #0]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e00c      	b.n	8002ebe <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8002ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eb0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002eb4:	6811      	ldr	r1, [r2, #0]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	43d2      	mvns	r2, r2
 8002eba:	400a      	ands	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_GPIO_Init+0x284>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8002eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ece:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002eda:	6851      	ldr	r1, [r2, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	e00c      	b.n	8002efe <HAL_GPIO_Init+0x29e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8002ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002ef4:	6851      	ldr	r1, [r2, #4]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	43d2      	mvns	r2, r2
 8002efa:	400a      	ands	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00c      	beq.n	8002f24 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8002f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f16:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002f1a:	6891      	ldr	r1, [r2, #8]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	e00c      	b.n	8002f3e <HAL_GPIO_Init+0x2de>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8002f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f30:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002f34:	6891      	ldr	r1, [r2, #8]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	43d2      	mvns	r2, r2
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00c      	beq.n	8002f64 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8002f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f56:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002f5a:	68d1      	ldr	r1, [r2, #12]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	e00c      	b.n	8002f7e <HAL_GPIO_Init+0x31e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8002f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f68:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f70:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002f74:	68d1      	ldr	r1, [r2, #12]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	43d2      	mvns	r2, r2
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	3301      	adds	r3, #1
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	f67f ae7c 	bls.w	8002c84 <HAL_GPIO_Init+0x24>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8002f8c:	372c      	adds	r7, #44	; 0x2c
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop

08002f98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002fb2:	e0c4      	b.n	800313e <HAL_GPIO_DeInit+0x1a6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & ((uint32_t)1 << position);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80b8 	beq.w	8003138 <HAL_GPIO_DeInit+0x1a0>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2bff      	cmp	r3, #255	; 0xff
 8002fcc:	d801      	bhi.n	8002fd2 <HAL_GPIO_DeInit+0x3a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	e001      	b.n	8002fd6 <HAL_GPIO_DeInit+0x3e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2bff      	cmp	r3, #255	; 0xff
 8002fdc:	d802      	bhi.n	8002fe4 <HAL_GPIO_DeInit+0x4c>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	e002      	b.n	8002fea <HAL_GPIO_DeInit+0x52>
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	3b08      	subs	r3, #8
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	613b      	str	r3, [r7, #16]
      
      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2104      	movs	r1, #4
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	601a      	str	r2, [r3, #0]
      
      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	43db      	mvns	r3, r3
 8003012:	401a      	ands	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = AFIO->EXTICR[position >> 2];
 8003018:	2300      	movs	r3, #0
 800301a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	0892      	lsrs	r2, r2, #2
 8003022:	3202      	adds	r2, #2
 8003024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003028:	617b      	str	r3, [r7, #20]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	220f      	movs	r2, #15
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4013      	ands	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003044:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003048:	429a      	cmp	r2, r3
 800304a:	d01c      	beq.n	8003086 <HAL_GPIO_DeInit+0xee>
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003052:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003056:	429a      	cmp	r2, r3
 8003058:	d013      	beq.n	8003082 <HAL_GPIO_DeInit+0xea>
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003060:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003064:	429a      	cmp	r2, r3
 8003066:	d00a      	beq.n	800307e <HAL_GPIO_DeInit+0xe6>
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800306e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003072:	429a      	cmp	r2, r3
 8003074:	d101      	bne.n	800307a <HAL_GPIO_DeInit+0xe2>
 8003076:	2303      	movs	r3, #3
 8003078:	e006      	b.n	8003088 <HAL_GPIO_DeInit+0xf0>
 800307a:	2304      	movs	r3, #4
 800307c:	e004      	b.n	8003088 <HAL_GPIO_DeInit+0xf0>
 800307e:	2302      	movs	r3, #2
 8003080:	e002      	b.n	8003088 <HAL_GPIO_DeInit+0xf0>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_GPIO_DeInit+0xf0>
 8003086:	2300      	movs	r3, #0
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	f002 0203 	and.w	r2, r2, #3
 800308e:	0092      	lsls	r2, r2, #2
 8003090:	fa03 f202 	lsl.w	r2, r3, r2
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	429a      	cmp	r2, r3
 8003098:	d14e      	bne.n	8003138 <HAL_GPIO_DeInit+0x1a0>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2], tmp);
 80030aa:	2300      	movs	r3, #0
 80030ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	0890      	lsrs	r0, r2, #2
 80030b4:	2200      	movs	r2, #0
 80030b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80030ba:	69f9      	ldr	r1, [r7, #28]
 80030bc:	0889      	lsrs	r1, r1, #2
 80030be:	3102      	adds	r1, #2
 80030c0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	43d2      	mvns	r2, r2
 80030c8:	4011      	ands	r1, r2
 80030ca:	1c82      	adds	r2, r0, #2
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80030d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80030d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030dc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	43d2      	mvns	r2, r2
 80030e6:	400a      	ands	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80030ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80030f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80030fa:	6851      	ldr	r1, [r2, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	43d2      	mvns	r2, r2
 8003100:	400a      	ands	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003108:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800310c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003110:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003114:	6891      	ldr	r1, [r2, #8]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	43d2      	mvns	r2, r2
 800311a:	400a      	ands	r2, r1
 800311c:	609a      	str	r2, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800311e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003122:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800312a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800312e:	68d1      	ldr	r1, [r2, #12]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	43d2      	mvns	r2, r2
 8003134:	400a      	ands	r2, r1
 8003136:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	3301      	adds	r3, #1
 800313c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	f47f af34 	bne.w	8002fb4 <HAL_GPIO_DeInit+0x1c>
      }
    }
    
    position++;
  }
}
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e001      	b.n	800317a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	460a      	mov	r2, r1
 8003194:	807a      	strh	r2, [r7, #2]
 8003196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	611a      	str	r2, [r3, #16]
 80031a4:	e003      	b.n	80031ae <HAL_GPIO_WritePin+0x26>
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	041a      	lsls	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	611a      	str	r2, [r3, #16]
  }
}
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	405a      	eors	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	60da      	str	r2, [r3, #12]
}
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80031e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80031fc:	887a      	ldrh	r2, [r7, #2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	619a      	str	r2, [r3, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	60fb      	str	r3, [r7, #12]

  if((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <HAL_GPIO_EXTI_IRQHandler+0x30>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800324c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f804 	bl	8003264 <HAL_GPIO_EXTI_Callback>
  }
}
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327a:	b08b      	sub	sp, #44	; 0x2c
 800327c:	af06      	add	r7, sp, #24
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t index = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0f5      	b.n	800347a <HAL_PCD_Init+0x202>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f00d fd1c 	bl	8010ce0 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2203      	movs	r2, #3
 80032ac:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f00a fedb 	bl	800e070 <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 e000 	ldr.w	lr, [r3]
 80032c0:	687e      	ldr	r6, [r7, #4]
 80032c2:	466c      	mov	r4, sp
 80032c4:	f106 0510 	add.w	r5, r6, #16
 80032c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	6023      	str	r3, [r4, #0]
 80032d0:	1d33      	adds	r3, r6, #4
 80032d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032d4:	4670      	mov	r0, lr
 80032d6:	f00a fe9b 	bl	800e010 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	2100      	movs	r1, #0
 80032e2:	f00a fed7 	bl	800e094 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e04c      	b.n	8003386 <HAL_PCD_Init+0x10e>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3328      	adds	r3, #40	; 0x28
 80032fc:	2201      	movs	r2, #1
 80032fe:	705a      	strb	r2, [r3, #1]
    hpcd->IN_ep[index].num = index;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	b2d9      	uxtb	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4403      	add	r3, r0
 8003312:	3328      	adds	r3, #40	; 0x28
 8003314:	460a      	mov	r2, r1
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	b299      	uxth	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4403      	add	r3, r0
 800332a:	3328      	adds	r3, #40	; 0x28
 800332c:	460a      	mov	r2, r1
 800332e:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3328      	adds	r3, #40	; 0x28
 8003340:	2200      	movs	r2, #0
 8003342:	70da      	strb	r2, [r3, #3]
    hpcd->IN_ep[index].maxpacket =  0;
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3330      	adds	r3, #48	; 0x30
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0;
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3334      	adds	r3, #52	; 0x34
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0;
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	333c      	adds	r3, #60	; 0x3c
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b0e      	cmp	r3, #14
 800338a:	d9af      	bls.n	80032ec <HAL_PCD_Init+0x74>
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e052      	b.n	8003438 <HAL_PCD_Init+0x1c0>
  {
    hpcd->OUT_ep[index].is_in = 0;
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80033a4:	2200      	movs	r2, #0
 80033a6:	715a      	strb	r2, [r3, #5]
    hpcd->OUT_ep[index].num = index;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	b2d9      	uxtb	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4403      	add	r3, r0
 80033ba:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80033be:	460a      	mov	r2, r1
 80033c0:	711a      	strb	r2, [r3, #4]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b299      	uxth	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4403      	add	r3, r0
 80033d4:	3328      	adds	r3, #40	; 0x28
 80033d6:	460a      	mov	r2, r1
 80033d8:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80033ec:	2200      	movs	r2, #0
 80033ee:	71da      	strb	r2, [r3, #7]
    hpcd->OUT_ep[index].maxpacket = 0;
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0;
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0;
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b0e      	cmp	r3, #14
 800343c:	d9a9      	bls.n	8003392 <HAL_PCD_Init+0x11a>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 e000 	ldr.w	lr, [r3]
 8003444:	687e      	ldr	r6, [r7, #4]
 8003446:	466c      	mov	r4, sp
 8003448:	f106 0510 	add.w	r5, r6, #16
 800344c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	1d33      	adds	r3, r6, #4
 8003456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003458:	4670      	mov	r0, lr
 800345a:	f00a fe43 	bl	800e0e4 <USB_DevInit>
  
  hpcd->USB_Address = 0;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
  
  USB_DevDisconnect (hpcd->Instance);  
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f00b fdba 	bl	800efec <USB_DevDisconnect>
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003482:	bf00      	nop

08003484 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral 
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00e      	b.n	80034b4 <HAL_PCD_DeInit+0x30>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
  
  /* Stop Device */
  HAL_PCD_Stop(hpcd);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f846 	bl	8003530 <HAL_PCD_Stop>
  
  /* DeInit the low level hardware */
  HAL_PCD_MspDeInit(hpcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f00d fc87 	bl	8010db8 <HAL_PCD_MspDeInit>
  
  hpcd->State = HAL_PCD_STATE_RESET; 
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
  
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
  * @brief  DeInitializes PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspDeInit could be implemented in the user file
   */
}
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop

080034e4 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_PCD_Start+0x16>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e016      	b.n	8003528 <HAL_PCD_Start+0x44>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	2101      	movs	r1, #1
 8003506:	f000 ff23 	bl	8004350 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f00b fd56 	bl	800efc0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f00a fd97 	bl	800e04c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_PCD_Stop>:
  * @brief  Stop The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{  
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_PCD_Stop+0x16>
 8003542:	2302      	movs	r3, #2
 8003544:	e017      	b.n	8003576 <HAL_PCD_Stop+0x46>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  __HAL_PCD_DISABLE(hpcd);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f00a fd8c 	bl	800e070 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f00b fccb 	bl	800eef8 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f00b fd40 	bl	800efec <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop

08003580 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61bb      	str	r3, [r7, #24]
  uint32_t index = 0, ep_intr = 0, epint = 0, epnum = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
  uint32_t fifoemptymsk = 0, temp = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
  USB_OTG_EPTypeDef *ep = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f00b fdda 	bl	800f168 <USB_GetMode>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 82a8 	bne.w	8003b0c <HAL_PCD_IRQHandler+0x58c>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f00b fd29 	bl	800f018 <USB_ReadInterrupts>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d100      	bne.n	80035ce <HAL_PCD_IRQHandler+0x4e>
    {
      return;
 80035cc:	e29e      	b.n	8003b0c <HAL_PCD_IRQHandler+0x58c>
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f00b fd20 	bl	800f018 <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_PCD_IRQHandler+0x6a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2202      	movs	r2, #2
 80035e8:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f00b fd12 	bl	800f018 <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d04f      	beq.n	800369e <HAL_PCD_IRQHandler+0x11e>
    {
      epnum = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f00b fd1c 	bl	800f044 <USB_ReadDevAllOutEpInterrupt>
 800360c:	6238      	str	r0, [r7, #32]
      
      while ( ep_intr )
 800360e:	e043      	b.n	8003698 <HAL_PCD_IRQHandler+0x118>
      {
        if (ep_intr & 0x1)
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d038      	beq.n	800368c <HAL_PCD_IRQHandler+0x10c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	f00b fd41 	bl	800f0ac <USB_ReadDevOutEPInterrupt>
 800362a:	6178      	str	r0, [r7, #20]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <HAL_PCD_IRQHandler+0xd2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	2201      	movs	r2, #1
 8003644:	609a      	str	r2, [r3, #8]
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4619      	mov	r1, r3
 800364e:	f00d fbdb 	bl	8010e08 <HAL_PCD_DataOutStageCallback>
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_PCD_IRQHandler+0xf2>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f00d fbc1 	bl	8010de4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	2208      	movs	r2, #8
 8003670:	609a      	str	r2, [r3, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <HAL_PCD_IRQHandler+0x10c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	2210      	movs	r2, #16
 800368a:	609a      	str	r2, [r3, #8]
          }
        }
        epnum++;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	3301      	adds	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
        ep_intr >>= 1;
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	623b      	str	r3, [r7, #32]
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1b8      	bne.n	8003610 <HAL_PCD_IRQHandler+0x90>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f00b fcb8 	bl	800f018 <USB_ReadInterrupts>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d07f      	beq.n	80037b2 <HAL_PCD_IRQHandler+0x232>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f00b fcde 	bl	800f078 <USB_ReadDevAllInEpInterrupt>
 80036bc:	6238      	str	r0, [r7, #32]
      
      epnum = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
      
      while ( ep_intr )
 80036c2:	e073      	b.n	80037ac <HAL_PCD_IRQHandler+0x22c>
      {
        if (ep_intr & 0x1) /* In ITR */
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d068      	beq.n	80037a0 <HAL_PCD_IRQHandler+0x220>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f00b fd05 	bl	800f0e8 <USB_ReadDevInEPInterrupt>
 80036de:	6178      	str	r0, [r7, #20]
          
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01d      	beq.n	8003726 <HAL_PCD_IRQHandler+0x1a6>
          {
            fifoemptymsk = 0x1 << epnum;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2201      	movs	r2, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	613b      	str	r3, [r7, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003700:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	43d2      	mvns	r2, r2
 8003706:	400a      	ands	r2, r1
 8003708:	635a      	str	r2, [r3, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003716:	2201      	movs	r2, #1
 8003718:	609a      	str	r2, [r3, #8]
            
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4619      	mov	r1, r3
 8003722:	f00d fb8d 	bl	8010e40 <HAL_PCD_DataInStageCallback>
          }
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_PCD_IRQHandler+0x1c0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	2208      	movs	r2, #8
 800373e:	609a      	str	r2, [r3, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003756:	2210      	movs	r2, #16
 8003758:	609a      	str	r2, [r3, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_PCD_IRQHandler+0x1f4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	609a      	str	r2, [r3, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <HAL_PCD_IRQHandler+0x20e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378a:	2202      	movs	r2, #2
 800378c:	609a      	str	r2, [r3, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_PCD_IRQHandler+0x220>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	69f9      	ldr	r1, [r7, #28]
 800379c:	f000 fcf0 	bl	8004180 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3301      	adds	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
        ep_intr >>= 1;
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	623b      	str	r3, [r7, #32]
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
      
      epnum = 0;
      
      while ( ep_intr )
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d188      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x144>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f00b fc2e 	bl	800f018 <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	da11      	bge.n	80037e6 <HAL_PCD_IRQHandler+0x266>
    {
     /* Clear the Remote Wake-up signalling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ce:	6852      	ldr	r2, [r2, #4]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	605a      	str	r2, [r3, #4]
     
     HAL_PCD_ResumeCallback(hpcd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f00d fb8c 	bl	8010ef4 <HAL_PCD_ResumeCallback>
     
     __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037e4:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f00b fc14 	bl	800f018 <USB_ReadInterrupts>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00f      	beq.n	800381a <HAL_PCD_IRQHandler+0x29a>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_PCD_IRQHandler+0x290>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f00d fb64 	bl	8010ed8 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003818:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f00b fbfa 	bl	800f018 <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d066      	beq.n	80038fc <HAL_PCD_IRQHandler+0x37c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383a:	6852      	ldr	r2, [r2, #4]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	605a      	str	r2, [r3, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	2100      	movs	r1, #0
 800384a:	f00a fd3f 	bl	800e2cc <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	e012      	b.n	800387a <HAL_PCD_IRQHandler+0x2fa>
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	609a      	str	r2, [r3, #8]
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	609a      	str	r2, [r3, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance ,  0 );
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	3301      	adds	r3, #1
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	429a      	cmp	r2, r3
 8003882:	d8e7      	bhi.n	8003854 <HAL_PCD_IRQHandler+0x2d4>
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800388e:	619a      	str	r2, [r3, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389c:	69d2      	ldr	r2, [r2, #28]
 800389e:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 80038a2:	61da      	str	r2, [r3, #28]
      
      USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b0:	6952      	ldr	r2, [r2, #20]
 80038b2:	f042 020b 	orr.w	r2, r2, #11
 80038b6:	615a      	str	r2, [r3, #20]
      USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c4:	6912      	ldr	r2, [r2, #16]
 80038c6:	f042 020b 	orr.w	r2, r2, #11
 80038ca:	611a      	str	r2, [r3, #16]
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 80038de:	601a      	str	r2, [r3, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	f00b fc7d 	bl	800f1ec <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038fa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f00b fb89 	bl	800f018 <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d022      	beq.n	8003956 <HAL_PCD_IRQHandler+0x3d6>
    {
      USB_ActivateSetup(hpcd->Instance);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f00b fc35 	bl	800f184 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	68d2      	ldr	r2, [r2, #12]
 8003924:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003928:	60da      	str	r2, [r3, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	60da      	str	r2, [r3, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	611a      	str	r2, [r3, #16]
      hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_FS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	68d2      	ldr	r2, [r2, #12]
 8003940:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003944:	60da      	str	r2, [r3, #12]
      
      HAL_PCD_ResetCallback(hpcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f00d faa4 	bl	8010e94 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003954:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f00b fb5c 	bl	800f018 <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	d065      	beq.n	8003a36 <HAL_PCD_IRQHandler+0x4b6>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	6992      	ldr	r2, [r2, #24]
 8003974:	f022 0210 	bic.w	r2, r2, #16
 8003978:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	60fb      	str	r3, [r7, #12]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 020f 	and.w	r2, r3, #15
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	60bb      	str	r3, [r7, #8]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 80039a0:	0c5b      	lsrs	r3, r3, #17
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d127      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x476>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d039      	beq.n	8003a26 <HAL_PCD_IRQHandler+0x4a6>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	68f9      	ldr	r1, [r7, #12]
 80039b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039bc:	400b      	ands	r3, r1
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	69b8      	ldr	r0, [r7, #24]
 80039c4:	4611      	mov	r1, r2
 80039c6:	461a      	mov	r2, r3
 80039c8:	f00b f992 	bl	800ecf0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039d6:	400b      	ands	r3, r1
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	441a      	add	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039ea:	400b      	ands	r3, r1
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	441a      	add	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	619a      	str	r2, [r3, #24]
 80039f4:	e017      	b.n	8003a26 <HAL_PCD_IRQHandler+0x4a6>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 80039fc:	0c5b      	lsrs	r3, r3, #17
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d111      	bne.n	8003a26 <HAL_PCD_IRQHandler+0x4a6>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8003a08:	69b8      	ldr	r0, [r7, #24]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	f00b f96f 	bl	800ecf0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	441a      	add	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	6992      	ldr	r2, [r2, #24]
 8003a30:	f042 0210 	orr.w	r2, r2, #16
 8003a34:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f00b faec 	bl	800f018 <USB_ReadInterrupts>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_PCD_IRQHandler+0x4d8>
    {
      HAL_PCD_SOFCallback(hpcd);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f00d fa14 	bl	8010e78 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2208      	movs	r2, #8
 8003a56:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f00b fadb 	bl	800f018 <USB_ReadInterrupts>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x502>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4619      	mov	r1, r3
 8003a74:	f00d fa5e 	bl	8010f34 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a80:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f00b fac6 	bl	800f018 <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_PCD_IRQHandler+0x52c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f00d fa37 	bl	8010f10 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003aaa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f00b fab1 	bl	800f018 <USB_ReadInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <HAL_PCD_IRQHandler+0x550>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f00d fa49 	bl	8010f58 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ace:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f00b fa9f 	bl	800f018 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x58c>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	60fb      	str	r3, [r7, #12]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_PCD_IRQHandler+0x57c>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f00d fa3c 	bl	8010f74 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	6851      	ldr	r1, [r2, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003b0c:	3728      	adds	r7, #40	; 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
  * @brief  USB Start Of Frame callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
  * @brief  USB Reset callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
  * @brief  Suspend event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
  * @brief  Resume event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
  * @brief  Connection event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
  * @brief  Disconnection event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop

08003c00 <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_PCD_DevConnect+0x16>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e011      	b.n	8003c3a <HAL_PCD_DevConnect+0x3a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	2101      	movs	r1, #1
 8003c22:	f000 fb95 	bl	8004350 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect(hpcd->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f00b f9c8 	bl	800efc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop

08003c44 <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_PCD_DevDisconnect+0x16>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e011      	b.n	8003c7e <HAL_PCD_DevDisconnect+0x3a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  HAL_PCDEx_SetConnectionState (hpcd, 0);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	2100      	movs	r1, #0
 8003c66:	f000 fb73 	bl	8004350 <HAL_PCDEx_SetConnectionState>
  USB_DevDisconnect(hpcd->Instance);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f00b f9bc 	bl	800efec <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop

08003c88 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_PCD_SetAddress+0x1a>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e013      	b.n	8003cca <HAL_PCD_SetAddress+0x42>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  hpcd->USB_Address = address;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f00b f95c 	bl	800ef78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop

08003cd4 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	70f9      	strb	r1, [r7, #3]
 8003cde:	803a      	strh	r2, [r7, #0]
 8003ce0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80) == 0x80)
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	b25b      	sxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da0b      	bge.n	8003d0a <HAL_PCD_EP_Open+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	3328      	adds	r3, #40	; 0x28
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e00c      	b.n	8003d24 <HAL_PCD_EP_Open+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	4413      	add	r3, r2
 8003d20:	3304      	adds	r3, #4
 8003d22:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	09db      	lsrs	r3, r3, #7
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8003d3c:	883a      	ldrh	r2, [r7, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	78ba      	ldrb	r2, [r7, #2]
 8003d46:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_PCD_EP_Open+0x82>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e00e      	b.n	8003d74 <HAL_PCD_EP_Open+0xa0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	f00a fb3b 	bl	800e3e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return ret;
 8003d72:	7afb      	ldrb	r3, [r7, #11]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80) == 0x80)
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	b25b      	sxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	da0b      	bge.n	8003dac <HAL_PCD_EP_Close+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3328      	adds	r3, #40	; 0x28
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e00c      	b.n	8003dc6 <HAL_PCD_EP_Close+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	09db      	lsrs	r3, r3, #7
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_PCD_EP_Close+0x70>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e00e      	b.n	8003e0a <HAL_PCD_EP_Close+0x8e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	f00a fb88 	bl	800e510 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop

08003e14 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	460b      	mov	r3, r1
 8003e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003e28:	7afb      	ldrb	r3, [r7, #11]
 8003e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3304      	adds	r3, #4
 8003e40:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2200      	movs	r2, #0
 8003e52:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
 8003e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_PCD_EP_Receive+0x60>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e01a      	b.n	8003eaa <HAL_PCD_EP_Receive+0x96>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  if ((ep_addr & 0x7F) == 0 )
 8003e7c:	7afb      	ldrb	r3, [r7, #11]
 8003e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_PCD_EP_Receive+0x80>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	f00a fdc7 	bl	800ea20 <USB_EP0StartXfer>
 8003e92:	e005      	b.n	8003ea0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	f00a fbae 	bl	800e5fc <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop

08003eb4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop

08003ee8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003efc:	7afb      	ldrb	r3, [r7, #11]
 8003efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	3328      	adds	r3, #40	; 0x28
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2201      	movs	r2, #1
 8003f28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_PCD_EP_Transmit+0x5c>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e01a      	b.n	8003f7a <HAL_PCD_EP_Transmit+0x92>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  if ((ep_addr & 0x7F) == 0 )
 8003f4c:	7afb      	ldrb	r3, [r7, #11]
 8003f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_PCD_EP_Transmit+0x7c>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	f00a fd5f 	bl	800ea20 <USB_EP0StartXfer>
 8003f62:	e005      	b.n	8003f70 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	f00a fb46 	bl	800e5fc <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop

08003f84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
  
  if ((0x80 & ep_addr) == 0x80)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da0b      	bge.n	8003fb4 <HAL_PCD_EP_SetStall+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3328      	adds	r3, #40	; 0x28
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4413      	add	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e00a      	b.n	8003fca <HAL_PCD_EP_SetStall+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	09db      	lsrs	r3, r3, #7
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_PCD_EP_SetStall+0x72>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e01c      	b.n	8004030 <HAL_PCD_EP_SetStall+0xac>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  USB_EPSetStall(hpcd->Instance , ep);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	68f9      	ldr	r1, [r7, #12]
 8004006:	f00a fe9f 	bl	800ed48 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004010:	2b00      	cmp	r3, #0
 8004012:	d108      	bne.n	8004026 <HAL_PCD_EP_SetStall+0xa2>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f503 735d 	add.w	r3, r3, #884	; 0x374
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f00b f8e3 	bl	800f1ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]
  
  if ((0x80 & ep_addr) == 0x80)
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	b25b      	sxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	da0b      	bge.n	8004068 <HAL_PCD_EP_ClrStall+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3328      	adds	r3, #40	; 0x28
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e00a      	b.n	800407e <HAL_PCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408a:	b2da      	uxtb	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	09db      	lsrs	r3, r3, #7
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_PCD_EP_ClrStall+0x72>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e00e      	b.n	80040c8 <HAL_PCD_EP_ClrStall+0x90>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  USB_EPClearStall(hpcd->Instance , ep);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	68f9      	ldr	r1, [r7, #12]
 80040ba:	f00a feb3 	bl	800ee24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_PCD_EP_Flush>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_PCD_EP_Flush+0x1a>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e01b      	b.n	8004122 <HAL_PCD_EP_Flush+0x52>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  if ((ep_addr & 0x80) == 0x80)
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da09      	bge.n	800410e <HAL_PCD_EP_Flush+0x3e>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	f00a f8e0 	bl	800e2cc <USB_FlushTxFifo>
 800410c:	e004      	b.n	8004118 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f00a f900 	bl	800e318 <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop

0800412c <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  HAL_PCD_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return(USB_ActivateRemoteWakeup(hpcd->Instance));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f00b fd57 	bl	800fbec <USB_ActivateRemoteWakeup>
 800413e:	4603      	mov	r3, r0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  HAL_PCD_DeActivateRemoteWakeup : de-active remote wakeup signalling
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  return(USB_DeActivateRemoteWakeup(hpcd->Instance));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f00b fd67 	bl	800fc28 <USB_DeActivateRemoteWakeup>
 800415a:	4603      	mov	r3, r0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_PCD_GetState>:
  * @brief  Return the PCD state
  * @param  hpcd: PCD handle
  * @retval HAL state
  */
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return hpcd->State;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8004172:	b2db      	uxtb	r3, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <PCD_WriteEmptyTxFifo>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15  
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
  int32_t len = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t len32b = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
  uint32_t fifoemptymsk = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  
  ep = &hpcd->IN_ep[epnum];
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	3328      	adds	r3, #40	; 0x28
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
  len = ep->xfer_len - ep->xfer_count;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d902      	bls.n	80041ce <PCD_WriteEmptyTxFifo+0x4e>
  {
    len = ep->maxpacket;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	61fb      	str	r3, [r7, #28]
  }
  
  len32b = (len + 3) / 4;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3303      	adds	r3, #3
 80041d2:	1cda      	adds	r2, r3, #3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bfb8      	it	lt
 80041d8:	4613      	movlt	r3, r2
 80041da:	109b      	asrs	r3, r3, #2
 80041dc:	61bb      	str	r3, [r7, #24]
  
  while ((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80041de:	e02a      	b.n	8004236 <PCD_WriteEmptyTxFifo+0xb6>
         ep->xfer_count < ep->xfer_len &&
         ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d902      	bls.n	80041fc <PCD_WriteEmptyTxFifo+0x7c>
    {
      len = ep->maxpacket;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3303      	adds	r3, #3
 8004200:	1cda      	adds	r2, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfb8      	it	lt
 8004206:	4613      	movlt	r3, r2
 8004208:	109b      	asrs	r3, r3, #2
 800420a:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	68d9      	ldr	r1, [r3, #12]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	b29b      	uxth	r3, r3
 8004218:	6978      	ldr	r0, [r7, #20]
 800421a:	f00a fd39 	bl	800ec90 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	441a      	add	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	441a      	add	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	619a      	str	r2, [r3, #24]
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  
  while ((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	b29a      	uxth	r2, r3
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	429a      	cmp	r2, r3
 800424a:	d909      	bls.n	8004260 <PCD_WriteEmptyTxFifo+0xe0>
         ep->xfer_count < ep->xfer_len &&
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	695b      	ldr	r3, [r3, #20]
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  
  while ((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004254:	429a      	cmp	r2, r3
 8004256:	d203      	bcs.n	8004260 <PCD_WriteEmptyTxFifo+0xe0>
         ep->xfer_count < ep->xfer_len &&
         ep->xfer_len != 0)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	695b      	ldr	r3, [r3, #20]
  }
  
  len32b = (len + 3) / 4;
  
  while ((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
         ep->xfer_count < ep->xfer_len &&
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1bf      	bne.n	80041e0 <PCD_WriteEmptyTxFifo+0x60>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	dc0f      	bgt.n	8004286 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	60fb      	str	r3, [r7, #12]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800427c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	43d2      	mvns	r2, r2
 8004282:	400a      	ands	r2, r1
 8004284:	635a      	str	r2, [r3, #52]	; 0x34
    
  }
  
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	460a      	mov	r2, r1
 800429c:	70fa      	strb	r2, [r7, #3]
 800429e:	803b      	strh	r3, [r7, #0]
  uint8_t index = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <HAL_PCDEx_SetTxFiFo+0x38>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	883a      	ldrh	r2, [r7, #0]
 80042bc:	0412      	lsls	r2, r2, #16
 80042be:	4611      	mov	r1, r2
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	629a      	str	r2, [r3, #40]	; 0x28
 80042c6:	e029      	b.n	800431c <HAL_PCDEx_SetTxFiFo+0x8c>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	4413      	add	r3, r2
 80042d4:	60bb      	str	r3, [r7, #8]
    for (index = 0; index < (fifo - 1); index++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	e00d      	b.n	80042f8 <HAL_PCDEx_SetTxFiFo+0x68>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	3340      	adds	r3, #64	; 0x40
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	4413      	add	r3, r2
 80042f0:	60bb      	str	r3, [r7, #8]
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
    for (index = 0; index < (fifo - 1); index++)
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	3301      	adds	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	429a      	cmp	r2, r3
 8004300:	dbec      	blt.n	80042dc <HAL_PCDEx_SetTxFiFo+0x4c>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	3b01      	subs	r3, #1
 800430a:	883a      	ldrh	r2, [r7, #0]
 800430c:	0412      	lsls	r2, r2, #16
 800430e:	4610      	mov	r0, r2
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	4302      	orrs	r2, r0
 8004314:	3340      	adds	r3, #64	; 0x40
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	605a      	str	r2, [r3, #4]
    
  }
  
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop

0800432c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd: PCD handle
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop

08004350 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */ 
}
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <HAL_RCC_DeInit>:
  *            - Peripheral clocks  
  *            - LSI, LSE and RTC clocks 
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
  /* Switch SYSCLK to HSI */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 800436e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004372:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800437a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800437e:	6852      	ldr	r2, [r2, #4]
 8004380:	f022 0203 	bic.w	r2, r2, #3
 8004384:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON, & PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 8004386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800438a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800438e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004392:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800439c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043a0:	601a      	str	r2, [r3, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80043a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80043aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043b8:	601a      	str	r2, [r3, #0]
  
  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80043ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80043c2:	2200      	movs	r2, #0
 80043c4:	605a      	str	r2, [r3, #4]
  
  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, ((uint32_t)0x10 << POSITION_VAL(RCC_CR_HSITRIM)));
 80043c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80043ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 80043dc:	22f8      	movs	r2, #248	; 0xf8
 80043de:	607a      	str	r2, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	fa92 f2a2 	rbit	r2, r2
 80043e6:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	fab2 f282 	clz	r2, r2
 80043ee:	2010      	movs	r0, #16
 80043f0:	fa00 f202 	lsl.w	r2, r0, r2
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]
  
#if (defined(STM32F105xC) || defined(STM32F107xC) || defined (STM32F100xB) || defined (STM32F100xE))
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 80043f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004400:	2200      	movs	r2, #0
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8004404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004408:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop

0800441c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8004422:	af00      	add	r7, sp, #0
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 823e 	beq.w	80048ba <HAL_RCC_OscConfig+0x49e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800443e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004442:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b04      	cmp	r3, #4
 800444e:	d011      	beq.n	8004474 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004454:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b08      	cmp	r3, #8
 8004460:	d16a      	bne.n	8004538 <HAL_RCC_OscConfig+0x11c>
 8004462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004466:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d061      	beq.n	8004538 <HAL_RCC_OscConfig+0x11c>
 8004474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004478:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004480:	fa93 f3a3 	rbit	r3, r3
 8004484:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004488:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f043 0320 	orr.w	r3, r3, #32
 8004496:	b2db      	uxtb	r3, r3
 8004498:	b2db      	uxtb	r3, r3
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <HAL_RCC_OscConfig+0x92>
 80044a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	e021      	b.n	80044f2 <HAL_RCC_OscConfig+0xd6>
 80044ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80044ba:	fa93 f3a3 	rbit	r3, r3
 80044be:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80044c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f043 0320 	orr.w	r3, r3, #32
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d105      	bne.n	80044e8 <HAL_RCC_OscConfig+0xcc>
 80044dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	e004      	b.n	80044f2 <HAL_RCC_OscConfig+0xd6>
 80044e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044f6:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80044fe:	fa92 f2a2 	rbit	r2, r2
 8004502:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004506:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800450a:	fab2 f282 	clz	r2, r2
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	f042 0220 	orr.w	r2, r2, #32
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	f002 021f 	and.w	r2, r2, #31
 800451c:	40d3      	lsrs	r3, r2
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_RCC_OscConfig+0x11a>
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f001 bac3 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004536:	e1c0      	b.n	80048ba <HAL_RCC_OscConfig+0x49e>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8004538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800453c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004544:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004554:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800455c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004566:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004568:	f7fb febe 	bl	80002e8 <HAL_GetTick>
 800456c:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x16c>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004572:	f7fb feb9 	bl	80002e8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d902      	bls.n	8004588 <HAL_RCC_OscConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	f001 ba9a 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 8004588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800458c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800459c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a0:	fab3 f383 	clz	r3, r3
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f043 0320 	orr.w	r3, r3, #32
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_RCC_OscConfig+0x1a6>
 80045b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	e021      	b.n	8004606 <HAL_RCC_OscConfig+0x1ea>
 80045c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045c6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80045d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f043 0320 	orr.w	r3, r3, #32
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d105      	bne.n	80045fc <HAL_RCC_OscConfig+0x1e0>
 80045f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	e004      	b.n	8004606 <HAL_RCC_OscConfig+0x1ea>
 80045fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800460a:	f8c7 21f0 	str.w	r2, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8004612:	fa92 f2a2 	rbit	r2, r2
 8004616:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800461a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800461e:	fab2 f282 	clz	r2, r2
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	f042 0220 	orr.w	r2, r2, #32
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	f002 021f 	and.w	r2, r2, #31
 8004630:	40d3      	lsrs	r3, r2
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d19b      	bne.n	8004572 <HAL_RCC_OscConfig+0x156>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x244>
 8004646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800464a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800464e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004652:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e054      	b.n	800470a <HAL_RCC_OscConfig+0x2ee>
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d118      	bne.n	800469c <HAL_RCC_OscConfig+0x280>
 800466a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800466e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004676:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004686:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800468a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800468e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e036      	b.n	800470a <HAL_RCC_OscConfig+0x2ee>
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a6:	d118      	bne.n	80046da <HAL_RCC_OscConfig+0x2be>
 80046a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80046b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80046c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e017      	b.n	800470a <HAL_RCC_OscConfig+0x2ee>
 80046da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80046e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80046fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004708:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d069      	beq.n	80047e8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fb fde8 	bl	80002e8 <HAL_GetTick>
 8004718:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471c:	e00a      	b.n	8004734 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800471e:	f7fb fde3 	bl	80002e8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d902      	bls.n	8004734 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	f001 b9c4 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 8004734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004738:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004748:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474c:	fab3 f383 	clz	r3, r3
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f043 0320 	orr.w	r3, r3, #32
 8004756:	b2db      	uxtb	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <HAL_RCC_OscConfig+0x352>
 8004762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004766:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	e021      	b.n	80047b2 <HAL_RCC_OscConfig+0x396>
 800476e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004772:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004782:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f043 0320 	orr.w	r3, r3, #32
 8004790:	b2db      	uxtb	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d105      	bne.n	80047a8 <HAL_RCC_OscConfig+0x38c>
 800479c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	e004      	b.n	80047b2 <HAL_RCC_OscConfig+0x396>
 80047a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80047be:	fa92 f2a2 	rbit	r2, r2
 80047c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80047c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80047ca:	fab2 f282 	clz	r2, r2
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	f042 0220 	orr.w	r2, r2, #32
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	f002 021f 	and.w	r2, r2, #31
 80047dc:	40d3      	lsrs	r3, r2
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d09b      	beq.n	800471e <HAL_RCC_OscConfig+0x302>
 80047e6:	e068      	b.n	80048ba <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7fb fd7e 	bl	80002e8 <HAL_GetTick>
 80047ec:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_OscConfig+0x3ec>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f2:	f7fb fd79 	bl	80002e8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	; 0x64
 8004800:	d902      	bls.n	8004808 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	f001 b95a 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 8004808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800480c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800481c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f043 0320 	orr.w	r3, r3, #32
 800482a:	b2db      	uxtb	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d105      	bne.n	8004842 <HAL_RCC_OscConfig+0x426>
 8004836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800483a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	e021      	b.n	8004886 <HAL_RCC_OscConfig+0x46a>
 8004842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004846:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004856:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f043 0320 	orr.w	r3, r3, #32
 8004864:	b2db      	uxtb	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d105      	bne.n	800487c <HAL_RCC_OscConfig+0x460>
 8004870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004874:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	e004      	b.n	8004886 <HAL_RCC_OscConfig+0x46a>
 800487c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004880:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800488a:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004892:	fa92 f2a2 	rbit	r2, r2
 8004896:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800489a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800489e:	fab2 f282 	clz	r2, r2
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	f042 0220 	orr.w	r2, r2, #32
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	f002 021f 	and.w	r2, r2, #31
 80048b0:	40d3      	lsrs	r3, r2
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d19b      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 81b4 	beq.w	8004c32 <HAL_RCC_OscConfig+0x816>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80048ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d012      	beq.n	8004902 <HAL_RCC_OscConfig+0x4e6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	f040 8087 	bne.w	80049fe <HAL_RCC_OscConfig+0x5e2>
 80048f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d17d      	bne.n	80049fe <HAL_RCC_OscConfig+0x5e2>
 8004902:	2302      	movs	r3, #2
 8004904:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004914:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004918:	fab3 f383 	clz	r3, r3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f043 0320 	orr.w	r3, r3, #32
 8004922:	b2db      	uxtb	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d105      	bne.n	800493a <HAL_RCC_OscConfig+0x51e>
 800492e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004932:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	e020      	b.n	800497c <HAL_RCC_OscConfig+0x560>
 800493a:	2302      	movs	r3, #2
 800493c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800494c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f043 0320 	orr.w	r3, r3, #32
 800495a:	b2db      	uxtb	r3, r3
 800495c:	b2db      	uxtb	r3, r3
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d105      	bne.n	8004972 <HAL_RCC_OscConfig+0x556>
 8004966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800496a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	e004      	b.n	800497c <HAL_RCC_OscConfig+0x560>
 8004972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004976:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2202      	movs	r2, #2
 800497e:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8004986:	fa92 f2a2 	rbit	r2, r2
 800498a:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800498e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004992:	fab2 f282 	clz	r2, r2
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	f042 0220 	orr.w	r2, r2, #32
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	f002 021f 	and.w	r2, r2, #31
 80049a4:	40d3      	lsrs	r3, r2
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_RCC_OscConfig+0x5a2>
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d002      	beq.n	80049be <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f001 b87f 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80049c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 80049d4:	1d3a      	adds	r2, r7, #4
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	6990      	ldr	r0, [r2, #24]
 80049da:	22f8      	movs	r2, #248	; 0xf8
 80049dc:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80049e4:	fa92 f2a2 	rbit	r2, r2
 80049e8:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80049ec:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80049f0:	fab2 f282 	clz	r2, r2
 80049f4:	fa00 f202 	lsl.w	r2, r0, r2
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fc:	e119      	b.n	8004c32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 809a 	beq.w	8004b3e <HAL_RCC_OscConfig+0x722>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004a14:	fa93 f3a3 	rbit	r3, r3
 8004a18:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a1c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a20:	fab3 f383 	clz	r3, r3
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004a2a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fb fc59 	bl	80002e8 <HAL_GetTick>
 8004a36:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fb fc54 	bl	80002e8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d902      	bls.n	8004a52 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	f001 b835 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 8004a52:	2302      	movs	r3, #2
 8004a54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a64:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a68:	fab3 f383 	clz	r3, r3
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f043 0320 	orr.w	r3, r3, #32
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <HAL_RCC_OscConfig+0x66e>
 8004a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	e020      	b.n	8004acc <HAL_RCC_OscConfig+0x6b0>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004aa0:	fab3 f383 	clz	r3, r3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f043 0320 	orr.w	r3, r3, #32
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d105      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x6a6>
 8004ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	e004      	b.n	8004acc <HAL_RCC_OscConfig+0x6b0>
 8004ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ac6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2202      	movs	r2, #2
 8004ace:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004ad6:	fa92 f2a2 	rbit	r2, r2
 8004ada:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ade:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004ae2:	fab2 f282 	clz	r2, r2
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	f042 0220 	orr.w	r2, r2, #32
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	f002 021f 	and.w	r2, r2, #31
 8004af4:	40d3      	lsrs	r3, r2
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d09e      	beq.n	8004a3c <HAL_RCC_OscConfig+0x620>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 8004b14:	1d3a      	adds	r2, r7, #4
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	6990      	ldr	r0, [r2, #24]
 8004b1a:	22f8      	movs	r2, #248	; 0xf8
 8004b1c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b24:	fa92 f2a2 	rbit	r2, r2
 8004b28:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b2c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b30:	fab2 f282 	clz	r2, r2
 8004b34:	fa00 f202 	lsl.w	r2, r0, r2
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e079      	b.n	8004c32 <HAL_RCC_OscConfig+0x816>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b44:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004b5e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fb fbbf 	bl	80002e8 <HAL_GetTick>
 8004b6a:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_OscConfig+0x76a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b70:	f7fb fbba 	bl	80002e8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d902      	bls.n	8004b86 <HAL_RCC_OscConfig+0x76a>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	f000 bf9b 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 8004b86:	2302      	movs	r3, #2
 8004b88:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b90:	fa93 f3a3 	rbit	r3, r3
 8004b94:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b98:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9c:	fab3 f383 	clz	r3, r3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f043 0320 	orr.w	r3, r3, #32
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCC_OscConfig+0x7a2>
 8004bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	e020      	b.n	8004c00 <HAL_RCC_OscConfig+0x7e4>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004bc8:	fa93 f3a3 	rbit	r3, r3
 8004bcc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004bd0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f043 0320 	orr.w	r3, r3, #32
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d105      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x7da>
 8004bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	e004      	b.n	8004c00 <HAL_RCC_OscConfig+0x7e4>
 8004bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2202      	movs	r2, #2
 8004c02:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8004c0a:	fa92 f2a2 	rbit	r2, r2
 8004c0e:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c12:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004c16:	fab2 f282 	clz	r2, r2
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f042 0220 	orr.w	r2, r2, #32
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	f002 021f 	and.w	r2, r2, #31
 8004c28:	40d3      	lsrs	r3, r2
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d19e      	bne.n	8004b70 <HAL_RCC_OscConfig+0x754>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c32:	1d3b      	adds	r3, r7, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8109 	beq.w	8004e54 <HAL_RCC_OscConfig+0xa38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c42:	1d3b      	adds	r3, r7, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d07f      	beq.n	8004d4c <HAL_RCC_OscConfig+0x930>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c56:	fa93 f3a3 	rbit	r3, r3
 8004c5a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c62:	fab3 f383 	clz	r3, r3
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8004c6e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8004c72:	4413      	add	r3, r2
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c78:	f7fb fb36 	bl	80002e8 <HAL_GetTick>
 8004c7c:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c80:	e00a      	b.n	8004c98 <HAL_RCC_OscConfig+0x87c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c82:	f7fb fb31 	bl	80002e8 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d902      	bls.n	8004c98 <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	f000 bf12 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004caa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	fab3 f383 	clz	r3, r3
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x8b4>
 8004cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	e020      	b.n	8004d12 <HAL_RCC_OscConfig+0x8f6>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ce2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0x8ec>
 8004cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	e004      	b.n	8004d12 <HAL_RCC_OscConfig+0x8f6>
 8004d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2202      	movs	r2, #2
 8004d14:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004d1c:	fa92 f2a2 	rbit	r2, r2
 8004d20:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d24:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004d28:	fab2 f282 	clz	r2, r2
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	f002 021f 	and.w	r2, r2, #31
 8004d3a:	40d3      	lsrs	r3, r2
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d09e      	beq.n	8004c82 <HAL_RCC_OscConfig+0x866>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 8004d44:	2001      	movs	r0, #1
 8004d46:	f7fb fadb 	bl	8000300 <HAL_Delay>
 8004d4a:	e083      	b.n	8004e54 <HAL_RCC_OscConfig+0xa38>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d56:	fa93 f3a3 	rbit	r3, r3
 8004d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d62:	fab3 f383 	clz	r3, r3
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8004d6e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8004d72:	4413      	add	r3, r2
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d78:	f7fb fab6 	bl	80002e8 <HAL_GetTick>
 8004d7c:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d80:	e00a      	b.n	8004d98 <HAL_RCC_OscConfig+0x97c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d82:	f7fb fab1 	bl	80002e8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d902      	bls.n	8004d98 <HAL_RCC_OscConfig+0x97c>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	f000 be92 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004da2:	fa93 f3a3 	rbit	r3, r3
 8004da6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004daa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x9b4>
 8004dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	e024      	b.n	8004e1a <HAL_RCC_OscConfig+0x9fe>
 8004dd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	fa93 f2a3 	rbit	r2, r3
 8004de2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004de6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004de8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d105      	bne.n	8004e10 <HAL_RCC_OscConfig+0x9f4>
 8004e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	e004      	b.n	8004e1a <HAL_RCC_OscConfig+0x9fe>
 8004e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004e1e:	2102      	movs	r1, #2
 8004e20:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	fa92 f1a2 	rbit	r1, r2
 8004e2c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8004e30:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e32:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	fab2 f282 	clz	r2, r2
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	f002 021f 	and.w	r2, r2, #31
 8004e4a:	40d3      	lsrs	r3, r2
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d196      	bne.n	8004d82 <HAL_RCC_OscConfig+0x966>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e54:	1d3b      	adds	r3, r7, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 821e 	beq.w	80052a0 <HAL_RCC_OscConfig+0xe84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e74:	69d2      	ldr	r2, [r2, #28]
 8004e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e7a:	61da      	str	r2, [r3, #28]
 8004e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004e8a:	f107 0308 	add.w	r3, r7, #8
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f107 0308 	add.w	r3, r7, #8
 8004e94:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e96:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004e9a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004e9e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8004ea2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eae:	f7fb fa1b 	bl	80002e8 <HAL_GetTick>
 8004eb2:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_OscConfig+0xab2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eb8:	f7fb fa16 	bl	80002e8 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b64      	cmp	r3, #100	; 0x64
 8004ec6:	d902      	bls.n	8004ece <HAL_RCC_OscConfig+0xab2>
      {
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	f000 bdf7 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
    SET_BIT(PWR->CR, PWR_CR_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ece:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004ed2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0eb      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xa9c>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8004ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ee4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ee8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004eec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ef0:	6a12      	ldr	r2, [r2, #32]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	621a      	str	r2, [r3, #32]
 8004ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004efc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004f08:	6a12      	ldr	r2, [r2, #32]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	621a      	str	r2, [r3, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f10:	f7fb f9ea 	bl	80002e8 <HAL_GetTick>
 8004f14:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f18:	e00c      	b.n	8004f34 <HAL_RCC_OscConfig+0xb18>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fb f9e5 	bl	80002e8 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004f24:	1ad2      	subs	r2, r2, r3
 8004f26:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d902      	bls.n	8004f34 <HAL_RCC_OscConfig+0xb18>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	f000 bdc4 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 8004f34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f38:	2202      	movs	r2, #2
 8004f3a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	fa93 f2a3 	rbit	r2, r3
 8004f46:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004f4a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f4c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004f50:	681b      	ldr	r3, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f52:	fab3 f383 	clz	r3, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <HAL_RCC_OscConfig+0xb58>
 8004f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	e024      	b.n	8004fbe <HAL_RCC_OscConfig+0xba2>
 8004f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f78:	2202      	movs	r2, #2
 8004f7a:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	fa93 f2a3 	rbit	r2, r3
 8004f86:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004f8a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f8c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	fab3 f383 	clz	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCC_OscConfig+0xb98>
 8004fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	e004      	b.n	8004fbe <HAL_RCC_OscConfig+0xba2>
 8004fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	fa92 f1a2 	rbit	r1, r2
 8004fd0:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8004fd4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004fd6:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	fab2 f282 	clz	r2, r2
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	f002 021f 	and.w	r2, r2, #31
 8004fee:	40d3      	lsrs	r3, r2
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d190      	bne.n	8004f1a <HAL_RCC_OscConfig+0xafe>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff8:	1d3b      	adds	r3, r7, #4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0xc00>
 8005002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005006:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800500a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800500e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005012:	6a12      	ldr	r2, [r2, #32]
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	621a      	str	r2, [r3, #32]
 800501a:	e053      	b.n	80050c4 <HAL_RCC_OscConfig+0xca8>
 800501c:	1d3b      	adds	r3, r7, #4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d118      	bne.n	8005058 <HAL_RCC_OscConfig+0xc3c>
 8005026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800502a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800502e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005032:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005036:	6a12      	ldr	r2, [r2, #32]
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	621a      	str	r2, [r3, #32]
 800503e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005042:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800504a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800504e:	6a12      	ldr	r2, [r2, #32]
 8005050:	f022 0204 	bic.w	r2, r2, #4
 8005054:	621a      	str	r2, [r3, #32]
 8005056:	e035      	b.n	80050c4 <HAL_RCC_OscConfig+0xca8>
 8005058:	1d3b      	adds	r3, r7, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b05      	cmp	r3, #5
 8005060:	d118      	bne.n	8005094 <HAL_RCC_OscConfig+0xc78>
 8005062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005066:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800506a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800506e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005072:	6a12      	ldr	r2, [r2, #32]
 8005074:	f042 0204 	orr.w	r2, r2, #4
 8005078:	621a      	str	r2, [r3, #32]
 800507a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800507e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005082:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005086:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800508a:	6a12      	ldr	r2, [r2, #32]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	621a      	str	r2, [r3, #32]
 8005092:	e017      	b.n	80050c4 <HAL_RCC_OscConfig+0xca8>
 8005094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005098:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800509c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80050a4:	6a12      	ldr	r2, [r2, #32]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	621a      	str	r2, [r3, #32]
 80050ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80050b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80050bc:	6a12      	ldr	r2, [r2, #32]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d074      	beq.n	80051b8 <HAL_RCC_OscConfig+0xd9c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7fb f90b 	bl	80002e8 <HAL_GetTick>
 80050d2:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d6:	e00c      	b.n	80050f2 <HAL_RCC_OscConfig+0xcd6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d8:	f7fb f906 	bl	80002e8 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d902      	bls.n	80050f2 <HAL_RCC_OscConfig+0xcd6>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	f000 bce5 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 80050f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80050f6:	2202      	movs	r2, #2
 80050f8:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	fa93 f2a3 	rbit	r2, r3
 8005104:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005108:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800510a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800510e:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005110:	fab3 f383 	clz	r3, r3
 8005114:	b2db      	uxtb	r3, r3
 8005116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511a:	b2db      	uxtb	r3, r3
 800511c:	b2db      	uxtb	r3, r3
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	d105      	bne.n	8005132 <HAL_RCC_OscConfig+0xd16>
 8005126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800512a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	e024      	b.n	800517c <HAL_RCC_OscConfig+0xd60>
 8005132:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005136:	2202      	movs	r2, #2
 8005138:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	fa93 f2a3 	rbit	r2, r3
 8005144:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005148:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800514a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	fab3 f383 	clz	r3, r3
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515a:	b2db      	uxtb	r3, r3
 800515c:	b2db      	uxtb	r3, r3
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d105      	bne.n	8005172 <HAL_RCC_OscConfig+0xd56>
 8005166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800516a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	e004      	b.n	800517c <HAL_RCC_OscConfig+0xd60>
 8005172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005176:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8005180:	2102      	movs	r1, #2
 8005182:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	fa92 f1a2 	rbit	r1, r2
 800518e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8005192:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005194:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	fab2 f282 	clz	r2, r2
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	f002 021f 	and.w	r2, r2, #31
 80051ac:	40d3      	lsrs	r3, r2
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d090      	beq.n	80050d8 <HAL_RCC_OscConfig+0xcbc>
 80051b6:	e073      	b.n	80052a0 <HAL_RCC_OscConfig+0xe84>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b8:	f7fb f896 	bl	80002e8 <HAL_GetTick>
 80051bc:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c0:	e00c      	b.n	80051dc <HAL_RCC_OscConfig+0xdc0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fb f891 	bl	80002e8 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80051cc:	1ad2      	subs	r2, r2, r3
 80051ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d902      	bls.n	80051dc <HAL_RCC_OscConfig+0xdc0>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	f000 bc70 	b.w	8005abc <HAL_RCC_OscConfig+0x16a0>
 80051dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80051e0:	2202      	movs	r2, #2
 80051e2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	fa93 f2a3 	rbit	r2, r3
 80051ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80051f2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80051f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80051f8:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fa:	fab3 f383 	clz	r3, r3
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005204:	b2db      	uxtb	r3, r3
 8005206:	b2db      	uxtb	r3, r3
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d105      	bne.n	800521c <HAL_RCC_OscConfig+0xe00>
 8005210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005214:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	e024      	b.n	8005266 <HAL_RCC_OscConfig+0xe4a>
 800521c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005220:	2202      	movs	r2, #2
 8005222:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	fa93 f2a3 	rbit	r2, r3
 800522e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005232:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005234:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	fab3 f383 	clz	r3, r3
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005244:	b2db      	uxtb	r3, r3
 8005246:	b2db      	uxtb	r3, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d105      	bne.n	800525c <HAL_RCC_OscConfig+0xe40>
 8005250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	e004      	b.n	8005266 <HAL_RCC_OscConfig+0xe4a>
 800525c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005260:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800526a:	2102      	movs	r1, #2
 800526c:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	fa92 f1a2 	rbit	r1, r2
 8005278:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800527c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800527e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	fab2 f282 	clz	r2, r2
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	f002 021f 	and.w	r2, r2, #31
 8005296:	40d3      	lsrs	r3, r2
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d190      	bne.n	80051c2 <HAL_RCC_OscConfig+0xda6>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 820e 	beq.w	80056c8 <HAL_RCC_OscConfig+0x12ac>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80052ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d013      	beq.n	80052e6 <HAL_RCC_OscConfig+0xeca>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80052be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 030c 	and.w	r3, r3, #12
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d10a      	bne.n	80052e6 <HAL_RCC_OscConfig+0xeca>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80052d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RCC_OscConfig+0xeca>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
    {
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e3ea      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
    }
    else
    {
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f040 8152 	bne.w	8005596 <HAL_RCC_OscConfig+0x117a>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80052f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <HAL_RCC_OscConfig+0xf04>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005308:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_OscConfig+0xf04>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
        {
          return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e3cd      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
 8005320:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005324:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005328:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	fa93 f2a3 	rbit	r2, r3
 8005334:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005338:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800533a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800533e:	681b      	ldr	r3, [r3, #0]
        }
        
        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005340:	fab3 f383 	clz	r3, r3
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800534a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005352:	f7fa ffc9 	bl	80002e8 <HAL_GetTick>
 8005356:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till PLL2 is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800535a:	e009      	b.n	8005370 <HAL_RCC_OscConfig+0xf54>
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800535c:	f7fa ffc4 	bl	80002e8 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b64      	cmp	r3, #100	; 0x64
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e3a5      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
 8005370:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005374:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005378:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	fa93 f2a3 	rbit	r2, r3
 8005384:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005388:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800538a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800538e:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005390:	fab3 f383 	clz	r3, r3
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f043 0320 	orr.w	r3, r3, #32
 800539a:	b2db      	uxtb	r3, r3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d105      	bne.n	80053b2 <HAL_RCC_OscConfig+0xf96>
 80053a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	e025      	b.n	80053fe <HAL_RCC_OscConfig+0xfe2>
 80053b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80053b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053ba:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	fa93 f2a3 	rbit	r2, r3
 80053c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80053ca:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80053cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	fab3 f383 	clz	r3, r3
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f043 0320 	orr.w	r3, r3, #32
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d105      	bne.n	80053f4 <HAL_RCC_OscConfig+0xfd8>
 80053e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	e004      	b.n	80053fe <HAL_RCC_OscConfig+0xfe2>
 80053f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005402:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005406:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005408:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	fa92 f1a2 	rbit	r1, r2
 8005412:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005416:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005418:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	fab2 f282 	clz	r2, r2
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	f042 0220 	orr.w	r2, r2, #32
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	f002 021f 	and.w	r2, r2, #31
 8005430:	40d3      	lsrs	r3, r2
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d190      	bne.n	800535c <HAL_RCC_OscConfig+0xf40>
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800543a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800543e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005446:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800544a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800544c:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8005450:	1d3a      	adds	r2, r7, #4
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005456:	430a      	orrs	r2, r1
 8005458:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800545a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800545e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005462:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005466:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800546a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800546c:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8005470:	1d3a      	adds	r2, r7, #4
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005476:	430a      	orrs	r2, r1
 8005478:	62da      	str	r2, [r3, #44]	; 0x2c
 800547a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800547e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005482:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	fa93 f2a3 	rbit	r2, r3
 800548e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005492:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005494:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005498:	681b      	ldr	r3, [r3, #0]
        
        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80054a4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fa ff1c 	bl	80002e8 <HAL_GetTick>
 80054b0:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till PLL2 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054b4:	e009      	b.n	80054ca <HAL_RCC_OscConfig+0x10ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054b6:	f7fa ff17 	bl	80002e8 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	; 0x64
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x10ae>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e2f8      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
 80054ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054d2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	fa93 f2a3 	rbit	r2, r3
 80054de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80054e2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80054e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80054e8:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054ea:	fab3 f383 	clz	r3, r3
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f043 0320 	orr.w	r3, r3, #32
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d105      	bne.n	800550c <HAL_RCC_OscConfig+0x10f0>
 8005500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005504:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	e025      	b.n	8005558 <HAL_RCC_OscConfig+0x113c>
 800550c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005514:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005516:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	fa93 f2a3 	rbit	r2, r3
 8005520:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005524:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005526:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	fab3 f383 	clz	r3, r3
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f043 0320 	orr.w	r3, r3, #32
 8005536:	b2db      	uxtb	r3, r3
 8005538:	b2db      	uxtb	r3, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d105      	bne.n	800554e <HAL_RCC_OscConfig+0x1132>
 8005542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005546:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	e004      	b.n	8005558 <HAL_RCC_OscConfig+0x113c>
 800554e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005552:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800555c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005560:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	fa92 f1a2 	rbit	r1, r2
 800556c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005570:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005572:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	fab2 f282 	clz	r2, r2
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	f042 0220 	orr.w	r2, r2, #32
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	f002 021f 	and.w	r2, r2, #31
 800558a:	40d3      	lsrs	r3, r2
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d090      	beq.n	80054b6 <HAL_RCC_OscConfig+0x109a>
 8005594:	e098      	b.n	80056c8 <HAL_RCC_OscConfig+0x12ac>
        }
      }
      else
      {
       /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800559a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800559e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80055a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80055ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80055b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80055b6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	fa93 f2a3 	rbit	r2, r3
 80055c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80055c6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80055c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80055cc:	681b      	ldr	r3, [r3, #0]

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80055d8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fa fe82 	bl	80002e8 <HAL_GetTick>
 80055e4:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till PLL2 is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80055e8:	e009      	b.n	80055fe <HAL_RCC_OscConfig+0x11e2>
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055ea:	f7fa fe7d 	bl	80002e8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x11e2>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e25e      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
 80055fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005606:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	fa93 f2a3 	rbit	r2, r3
 8005612:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005616:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005618:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800561c:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f043 0320 	orr.w	r3, r3, #32
 8005628:	b2db      	uxtb	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <HAL_RCC_OscConfig+0x1224>
 8005634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005638:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	e025      	b.n	800568c <HAL_RCC_OscConfig+0x1270>
 8005640:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005648:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	fa93 f2a3 	rbit	r2, r3
 8005654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005658:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800565a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	fab3 f383 	clz	r3, r3
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f043 0320 	orr.w	r3, r3, #32
 800566a:	b2db      	uxtb	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d105      	bne.n	8005682 <HAL_RCC_OscConfig+0x1266>
 8005676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800567a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	e004      	b.n	800568c <HAL_RCC_OscConfig+0x1270>
 8005682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005686:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005690:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005694:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	fa92 f1a2 	rbit	r1, r2
 80056a0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80056a4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80056a6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	fab2 f282 	clz	r2, r2
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	f042 0220 	orr.w	r2, r2, #32
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	f002 021f 	and.w	r2, r2, #31
 80056be:	40d3      	lsrs	r3, r2
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d190      	bne.n	80055ea <HAL_RCC_OscConfig+0x11ce>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 81f3 	beq.w	8005aba <HAL_RCC_OscConfig+0x169e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 030c 	and.w	r3, r3, #12
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	f000 81e7 	beq.w	8005ab6 <HAL_RCC_OscConfig+0x169a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	f040 8153 	bne.w	800599a <HAL_RCC_OscConfig+0x157e>
 80056f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056fc:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	fa93 f2a3 	rbit	r2, r3
 8005708:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800570c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800570e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005712:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005714:	fab3 f383 	clz	r3, r3
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800571e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fa fddf 	bl	80002e8 <HAL_GetTick>
 800572a:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800572e:	e009      	b.n	8005744 <HAL_RCC_OscConfig+0x1328>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005730:	f7fa fdda 	bl	80002e8 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x1328>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e1bb      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
 8005744:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800574c:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f2a3 	rbit	r2, r3
 8005758:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800575c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800575e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005762:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f043 0320 	orr.w	r3, r3, #32
 800576e:	b2db      	uxtb	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d105      	bne.n	8005786 <HAL_RCC_OscConfig+0x136a>
 800577a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800577e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	e025      	b.n	80057d2 <HAL_RCC_OscConfig+0x13b6>
 8005786:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800578a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800578e:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005790:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	fa93 f2a3 	rbit	r2, r3
 800579a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800579e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80057a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	fab3 f383 	clz	r3, r3
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f043 0320 	orr.w	r3, r3, #32
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d105      	bne.n	80057c8 <HAL_RCC_OscConfig+0x13ac>
 80057bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	e004      	b.n	80057d2 <HAL_RCC_OscConfig+0x13b6>
 80057c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80057d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057da:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	fa92 f1a2 	rbit	r1, r2
 80057e6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80057ea:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80057ec:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	fab2 f282 	clz	r2, r2
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	f042 0220 	orr.w	r2, r2, #32
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	f002 021f 	and.w	r2, r2, #31
 8005804:	40d3      	lsrs	r3, r2
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d190      	bne.n	8005730 <HAL_RCC_OscConfig+0x1314>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005818:	d11d      	bne.n	8005856 <HAL_RCC_OscConfig+0x143a>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
          
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800581a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800581e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005826:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800582a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800582c:	1d3a      	adds	r2, r7, #4
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	6852      	ldr	r2, [r2, #4]
 8005832:	430a      	orrs	r2, r1
 8005834:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800583a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800583e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005842:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005846:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005848:	f022 010f 	bic.w	r1, r2, #15
 800584c:	1d3a      	adds	r2, r7, #4
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	68d2      	ldr	r2, [r2, #12]
 8005852:	430a      	orrs	r2, r1
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800585a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800585e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005862:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005866:	6852      	ldr	r2, [r2, #4]
 8005868:	f422 1174 	bic.w	r1, r2, #3997696	; 0x3d0000
 800586c:	1d3a      	adds	r2, r7, #4
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8005872:	1d3a      	adds	r2, r7, #4
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005878:	4302      	orrs	r2, r0
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005882:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005886:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005888:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	fa93 f2a3 	rbit	r2, r3
 8005892:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005896:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005898:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800589c:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800589e:	fab3 f383 	clz	r3, r3
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80058a8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b0:	f7fa fd1a 	bl	80002e8 <HAL_GetTick>
 80058b4:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058b8:	e009      	b.n	80058ce <HAL_RCC_OscConfig+0x14b2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ba:	f7fa fd15 	bl	80002e8 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x14b2>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e0f6      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
 80058ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058d6:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	fa93 f2a3 	rbit	r2, r3
 80058e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058e6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80058e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058ec:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058ee:	fab3 f383 	clz	r3, r3
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f043 0320 	orr.w	r3, r3, #32
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d105      	bne.n	8005910 <HAL_RCC_OscConfig+0x14f4>
 8005904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005908:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	e025      	b.n	800595c <HAL_RCC_OscConfig+0x1540>
 8005910:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005918:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	fa93 f2a3 	rbit	r2, r3
 8005924:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005928:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800592a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fab3 f383 	clz	r3, r3
 8005934:	b2db      	uxtb	r3, r3
 8005936:	f043 0320 	orr.w	r3, r3, #32
 800593a:	b2db      	uxtb	r3, r3
 800593c:	b2db      	uxtb	r3, r3
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d105      	bne.n	8005952 <HAL_RCC_OscConfig+0x1536>
 8005946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800594a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	e004      	b.n	800595c <HAL_RCC_OscConfig+0x1540>
 8005952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005956:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005960:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005964:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005966:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	fa92 f1a2 	rbit	r1, r2
 8005970:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005974:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005976:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	fab2 f282 	clz	r2, r2
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	f042 0220 	orr.w	r2, r2, #32
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	f002 021f 	and.w	r2, r2, #31
 800598e:	40d3      	lsrs	r3, r2
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d090      	beq.n	80058ba <HAL_RCC_OscConfig+0x149e>
 8005998:	e08f      	b.n	8005aba <HAL_RCC_OscConfig+0x169e>
 800599a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800599e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059a2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	fa93 f2a3 	rbit	r2, r3
 80059ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059b2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80059b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	fab3 f383 	clz	r3, r3
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80059c4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fa fc8c 	bl	80002e8 <HAL_GetTick>
 80059d0:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059d4:	e009      	b.n	80059ea <HAL_RCC_OscConfig+0x15ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d6:	f7fa fc87 	bl	80002e8 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x15ce>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e068      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
 80059ea:	f107 0320 	add.w	r3, r7, #32
 80059ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059f2:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f4:	f107 0320 	add.w	r3, r7, #32
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	fa93 f2a3 	rbit	r2, r3
 80059fe:	f107 031c 	add.w	r3, r7, #28
 8005a02:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005a04:	f107 031c 	add.w	r3, r7, #28
 8005a08:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a0a:	fab3 f383 	clz	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f043 0320 	orr.w	r3, r3, #32
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d105      	bne.n	8005a2c <HAL_RCC_OscConfig+0x1610>
 8005a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	e025      	b.n	8005a78 <HAL_RCC_OscConfig+0x165c>
 8005a2c:	f107 0318 	add.w	r3, r7, #24
 8005a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a34:	601a      	str	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a36:	f107 0318 	add.w	r3, r7, #24
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	fa93 f2a3 	rbit	r2, r3
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005a46:	f107 0314 	add.w	r3, r7, #20
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	fab3 f383 	clz	r3, r3
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f043 0320 	orr.w	r3, r3, #32
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d105      	bne.n	8005a6e <HAL_RCC_OscConfig+0x1652>
 8005a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	e004      	b.n	8005a78 <HAL_RCC_OscConfig+0x165c>
 8005a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f107 0210 	add.w	r2, r7, #16
 8005a7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a80:	6011      	str	r1, [r2, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a82:	f107 0210 	add.w	r2, r7, #16
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	fa92 f1a2 	rbit	r1, r2
 8005a8c:	f107 020c 	add.w	r2, r7, #12
 8005a90:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005a92:	f107 020c 	add.w	r2, r7, #12
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	fab2 f282 	clz	r2, r2
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	f042 0220 	orr.w	r2, r2, #32
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	f002 021f 	and.w	r2, r2, #31
 8005aaa:	40d3      	lsrs	r3, r2
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d190      	bne.n	80059d6 <HAL_RCC_OscConfig+0x15ba>
 8005ab4:	e001      	b.n	8005aba <HAL_RCC_OscConfig+0x169e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_RCC_OscConfig+0x16a0>
    }
  }
  
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop

08005ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b0a8      	sub	sp, #160	; 0xa0
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0207 	and.w	r2, r3, #7
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	f080 8197 	bcs.w	8005e1c <HAL_RCC_ClockConfig+0x354>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005af2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005afa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	f022 0107 	bic.w	r1, r2, #7
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0207 	and.w	r2, r3, #7
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x5a>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e333      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00e      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x84>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005b3e:	6852      	ldr	r2, [r2, #4]
 8005b40:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6892      	ldr	r2, [r2, #8]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 82e9 	beq.w	800612c <HAL_RCC_ClockConfig+0x664>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d15b      	bne.n	8005c1a <HAL_RCC_ClockConfig+0x152>
 8005b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b6e:	fa93 f3a3 	rbit	r3, r3
 8005b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005b76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7a:	fab3 f383 	clz	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f043 0320 	orr.w	r3, r3, #32
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCC_ClockConfig+0xd4>
 8005b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	e021      	b.n	8005be0 <HAL_RCC_ClockConfig+0x118>
 8005b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ba8:	fa93 f3a3 	rbit	r3, r3
 8005bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bb4:	fab3 f383 	clz	r3, r3
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	f043 0320 	orr.w	r3, r3, #32
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d105      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0x10e>
 8005bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	e004      	b.n	8005be0 <HAL_RCC_ClockConfig+0x118>
 8005bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005be4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005bec:	fa92 f2a2 	rbit	r2, r2
 8005bf0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005bf4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005bf8:	fab2 f282 	clz	r2, r2
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	f042 0220 	orr.w	r2, r2, #32
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	f002 021f 	and.w	r2, r2, #31
 8005c0a:	40d3      	lsrs	r3, r2
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 80a3 	bne.w	8005d5c <HAL_RCC_ClockConfig+0x294>
        {
          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e2b7      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d150      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x1fc>
 8005c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c2e:	fa93 f3a3 	rbit	r3, r3
 8005c32:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c36:	fab3 f383 	clz	r3, r3
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d105      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x190>
 8005c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	e01d      	b.n	8005c94 <HAL_RCC_ClockConfig+0x1cc>
 8005c58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c5c:	67bb      	str	r3, [r7, #120]	; 0x78
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c60:	fa93 f3a3 	rbit	r3, r3
 8005c64:	677b      	str	r3, [r7, #116]	; 0x74
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c68:	fab3 f383 	clz	r3, r3
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f043 0320 	orr.w	r3, r3, #32
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d105      	bne.n	8005c8a <HAL_RCC_ClockConfig+0x1c2>
 8005c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	e004      	b.n	8005c94 <HAL_RCC_ClockConfig+0x1cc>
 8005c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c98:	673a      	str	r2, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005c9c:	fa92 f2a2 	rbit	r2, r2
 8005ca0:	66fa      	str	r2, [r7, #108]	; 0x6c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005ca2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ca4:	fab2 f282 	clz	r2, r2
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	f042 0220 	orr.w	r2, r2, #32
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	f002 021f 	and.w	r2, r2, #31
 8005cb6:	40d3      	lsrs	r3, r2
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d14d      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x294>
        {
          return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e262      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	66bb      	str	r3, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cca:	fa93 f3a3 	rbit	r3, r3
 8005cce:	667b      	str	r3, [r7, #100]	; 0x64
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd2:	fab3 f383 	clz	r3, r3
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f043 0320 	orr.w	r3, r3, #32
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x22c>
 8005ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	e01c      	b.n	8005d2e <HAL_RCC_ClockConfig+0x266>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cfa:	fa93 f3a3 	rbit	r3, r3
 8005cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d02:	fab3 f383 	clz	r3, r3
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f043 0320 	orr.w	r3, r3, #32
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d105      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x25c>
 8005d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	e004      	b.n	8005d2e <HAL_RCC_ClockConfig+0x266>
 8005d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2202      	movs	r2, #2
 8005d30:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d34:	fa92 f2a2 	rbit	r2, r2
 8005d38:	657a      	str	r2, [r7, #84]	; 0x54
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005d3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d3c:	fab2 f282 	clz	r2, r2
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	f042 0220 	orr.w	r2, r2, #32
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	f002 021f 	and.w	r2, r2, #31
 8005d4e:	40d3      	lsrs	r3, r2
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x294>
        {
          return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e216      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d68:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d6c:	6852      	ldr	r2, [r2, #4]
 8005d6e:	f022 0103 	bic.w	r1, r2, #3
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6852      	ldr	r2, [r2, #4]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7a:	f7fa fab5 	bl	80002e8 <HAL_GetTick>
 8005d7e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d116      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x2f0>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d8a:	e00b      	b.n	8005da4 <HAL_RCC_ClockConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d8c:	f7fa faac 	bl	80002e8 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d96:	1ad2      	subs	r2, r2, r3
 8005d98:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_ClockConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e1f2      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005da8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d1ea      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x2c4>
 8005db6:	e1b9      	b.n	800612c <HAL_RCC_ClockConfig+0x664>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d116      	bne.n	8005dee <HAL_RCC_ClockConfig+0x326>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc0:	e00b      	b.n	8005dda <HAL_RCC_ClockConfig+0x312>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc2:	f7fa fa91 	bl	80002e8 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_ClockConfig+0x312>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e1d7      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d1ea      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0x2fa>
 8005dec:	e19e      	b.n	800612c <HAL_RCC_ClockConfig+0x664>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dee:	e00b      	b.n	8005e08 <HAL_RCC_ClockConfig+0x340>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df0:	f7fa fa7a 	bl	80002e8 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dfa:	1ad2      	subs	r2, r2, r3
 8005dfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_ClockConfig+0x340>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e1c0      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1ea      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x328>
 8005e1a:	e187      	b.n	800612c <HAL_RCC_ClockConfig+0x664>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00e      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x37e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e38:	6852      	ldr	r2, [r2, #4]
 8005e3a:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6892      	ldr	r2, [r2, #8]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8152 	beq.w	80060f8 <HAL_RCC_ClockConfig+0x630>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d14f      	bne.n	8005efc <HAL_RCC_ClockConfig+0x434>
 8005e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e60:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e64:	fa93 f3a3 	rbit	r3, r3
 8005e68:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f043 0320 	orr.w	r3, r3, #32
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d105      	bne.n	8005e8e <HAL_RCC_ClockConfig+0x3c6>
 8005e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	e01d      	b.n	8005eca <HAL_RCC_ClockConfig+0x402>
 8005e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e92:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e96:	fa93 f3a3 	rbit	r3, r3
 8005e9a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9e:	fab3 f383 	clz	r3, r3
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f043 0320 	orr.w	r3, r3, #32
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x3f8>
 8005eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	e004      	b.n	8005eca <HAL_RCC_ClockConfig+0x402>
 8005ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ece:	643a      	str	r2, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ed2:	fa92 f2a2 	rbit	r2, r2
 8005ed6:	63fa      	str	r2, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eda:	fab2 f282 	clz	r2, r2
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	f042 0220 	orr.w	r2, r2, #32
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	f002 021f 	and.w	r2, r2, #31
 8005eec:	40d3      	lsrs	r3, r2
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f040 80a1 	bne.w	800603a <HAL_RCC_ClockConfig+0x572>
        {
          return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e146      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d14e      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0x4da>
 8005f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f08:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	fa93 f3a3 	rbit	r3, r3
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f14:	fab3 f383 	clz	r3, r3
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f043 0320 	orr.w	r3, r3, #32
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d105      	bne.n	8005f36 <HAL_RCC_ClockConfig+0x46e>
 8005f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	e01d      	b.n	8005f72 <HAL_RCC_ClockConfig+0x4aa>
 8005f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f3a:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	fa93 f3a3 	rbit	r3, r3
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	fab3 f383 	clz	r3, r3
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f043 0320 	orr.w	r3, r3, #32
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x4a0>
 8005f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	e004      	b.n	8005f72 <HAL_RCC_ClockConfig+0x4aa>
 8005f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f76:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f7a:	fa92 f2a2 	rbit	r2, r2
 8005f7e:	627a      	str	r2, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	fab2 f282 	clz	r2, r2
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	f042 0220 	orr.w	r2, r2, #32
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	f002 021f 	and.w	r2, r2, #31
 8005f94:	40d3      	lsrs	r3, r2
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d14d      	bne.n	800603a <HAL_RCC_ClockConfig+0x572>
        {
          return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e0f3      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	fa93 f3a3 	rbit	r3, r3
 8005fac:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005fae:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb0:	fab3 f383 	clz	r3, r3
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f043 0320 	orr.w	r3, r3, #32
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d105      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0x50a>
 8005fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	e01c      	b.n	800600c <HAL_RCC_ClockConfig+0x544>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	fa93 f3a3 	rbit	r3, r3
 8005fdc:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	fab3 f383 	clz	r3, r3
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f043 0320 	orr.w	r3, r3, #32
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d105      	bne.n	8006002 <HAL_RCC_ClockConfig+0x53a>
 8005ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ffa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	e004      	b.n	800600c <HAL_RCC_ClockConfig+0x544>
 8006002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006006:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2202      	movs	r2, #2
 800600e:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	fa92 f2a2 	rbit	r2, r2
 8006016:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	fab2 f282 	clz	r2, r2
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	f042 0220 	orr.w	r2, r2, #32
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	f002 021f 	and.w	r2, r2, #31
 800602c:	40d3      	lsrs	r3, r2
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_RCC_ClockConfig+0x572>
        {
          return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e0a7      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800603a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800603e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006042:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006046:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800604a:	6852      	ldr	r2, [r2, #4]
 800604c:	f022 0103 	bic.w	r1, r2, #3
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6852      	ldr	r2, [r2, #4]
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006058:	f7fa f946 	bl	80002e8 <HAL_GetTick>
 800605c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d116      	bne.n	8006096 <HAL_RCC_ClockConfig+0x5ce>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006068:	e00b      	b.n	8006082 <HAL_RCC_ClockConfig+0x5ba>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800606a:	f7fa f93d 	bl	80002e8 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006074:	1ad2      	subs	r2, r2, r3
 8006076:	f241 3388 	movw	r3, #5000	; 0x1388
 800607a:	429a      	cmp	r2, r3
 800607c:	d901      	bls.n	8006082 <HAL_RCC_ClockConfig+0x5ba>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e083      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006086:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 030c 	and.w	r3, r3, #12
 8006090:	2b04      	cmp	r3, #4
 8006092:	d1ea      	bne.n	800606a <HAL_RCC_ClockConfig+0x5a2>
 8006094:	e030      	b.n	80060f8 <HAL_RCC_ClockConfig+0x630>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d116      	bne.n	80060cc <HAL_RCC_ClockConfig+0x604>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800609e:	e00b      	b.n	80060b8 <HAL_RCC_ClockConfig+0x5f0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a0:	f7fa f922 	bl	80002e8 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060aa:	1ad2      	subs	r2, r2, r3
 80060ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_ClockConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e068      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d1ea      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x5d8>
 80060ca:	e015      	b.n	80060f8 <HAL_RCC_ClockConfig+0x630>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060cc:	e00b      	b.n	80060e6 <HAL_RCC_ClockConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ce:	f7fa f90b 	bl	80002e8 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	f241 3388 	movw	r3, #5000	; 0x1388
 80060de:	429a      	cmp	r2, r3
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e051      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
          }
        }
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f003 030c 	and.w	r3, r3, #12
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1ea      	bne.n	80060ce <HAL_RCC_ClockConfig+0x606>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006104:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	f022 0107 	bic.w	r1, r2, #7
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006118:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0207 	and.w	r2, r3, #7
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d001      	beq.n	800612c <HAL_RCC_ClockConfig+0x664>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e02e      	b.n	800618a <HAL_RCC_ClockConfig+0x6c2>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00e      	beq.n	8006156 <HAL_RCC_ClockConfig+0x68e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800613c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006144:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006148:	6852      	ldr	r2, [r2, #4]
 800614a:	f422 61e0 	bic.w	r1, r2, #1792	; 0x700
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68d2      	ldr	r2, [r2, #12]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00f      	beq.n	8006182 <HAL_RCC_ClockConfig+0x6ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800616a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800616e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006172:	6852      	ldr	r2, [r2, #4]
 8006174:	f422 5160 	bic.w	r1, r2, #14336	; 0x3800
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6912      	ldr	r2, [r2, #16]
 800617c:	00d2      	lsls	r2, r2, #3
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006182:	2000      	movs	r0, #0
 8006184:	f7fa f882 	bl	800028c <HAL_InitTick>
  
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	37a0      	adds	r7, #160	; 0xa0
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop

08006194 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 80061a0:	f107 0318 	add.w	r3, r7, #24
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	3304      	adds	r3, #4
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	3304      	adds	r3, #4
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	3304      	adds	r3, #4
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	3304      	adds	r3, #4
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 80061bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80061cc:	6992      	ldr	r2, [r2, #24]
 80061ce:	f042 0204 	orr.w	r2, r2, #4
 80061d2:	619a      	str	r2, [r3, #24]
 80061d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	697b      	ldr	r3, [r7, #20]
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Pin = MCO1_PIN;
 80061e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ea:	61bb      	str	r3, [r7, #24]
  gpio.Mode = GPIO_MODE_AF_PP;
 80061ec:	2302      	movs	r3, #2
 80061ee:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80061f0:	2303      	movs	r3, #3
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull = GPIO_NOPULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80061f8:	f107 0318 	add.w	r3, r7, #24
 80061fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006200:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006204:	4619      	mov	r1, r3
 8006206:	f7fc fd2b 	bl	8002c60 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800620a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800620e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006216:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800621a:	6852      	ldr	r2, [r2, #4]
 800621c:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
}
 8006226:	3728      	adds	r7, #40	; 0x28
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006236:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	fa93 f3a3 	rbit	r3, r3
 800623e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006240:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006242:	fab3 f383 	clz	r3, r3
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800624c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8006250:	2201      	movs	r2, #1
 8006252:	601a      	str	r2, [r3, #0]
}
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop

08006260 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800626a:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	fa93 f3a3 	rbit	r3, r3
 8006272:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006274:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8006276:	fab3 f383 	clz	r3, r3
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8006280:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
}
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop

08006294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006294:	b490      	push	{r4, r7}
 8006296:	b098      	sub	sp, #96	; 0x60
 8006298:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 800629a:	f642 4208 	movw	r2, #11272	; 0x2c08
 800629e:	f6c0 0201 	movt	r2, #2049	; 0x801
 80062a2:	f107 0310 	add.w	r3, r7, #16
 80062a6:	6810      	ldr	r0, [r2, #0]
 80062a8:	6851      	ldr	r1, [r2, #4]
 80062aa:	6892      	ldr	r2, [r2, #8]
 80062ac:	c307      	stmia	r3!, {r0, r1, r2}
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 80062ae:	f642 4314 	movw	r3, #11284	; 0x2c14
 80062b2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80062b6:	463c      	mov	r4, r7
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	657b      	str	r3, [r7, #84]	; 0x54
 80062c6:	2300      	movs	r3, #0
 80062c8:	653b      	str	r3, [r7, #80]	; 0x50
 80062ca:	2300      	movs	r3, #0
 80062cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ce:	2300      	movs	r3, #0
 80062d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062da:	2300      	movs	r3, #0
 80062dc:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80062de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	657b      	str	r3, [r7, #84]	; 0x54
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80062ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ec:	f003 030c 	and.w	r3, r3, #12
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d002      	beq.n	80062fa <HAL_RCC_GetSysClockFreq+0x66>
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d006      	beq.n	8006306 <HAL_RCC_GetSysClockFreq+0x72>
 80062f8:	e0ad      	b.n	8006456 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80062fa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80062fe:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006302:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8006304:	e0ad      	b.n	8006462 <HAL_RCC_GetSysClockFreq+0x1ce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8006306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006308:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800630c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8006310:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006314:	fa93 f3a3 	rbit	r3, r3
 8006318:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	fab3 f383 	clz	r3, r3
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006328:	4413      	add	r3, r2
 800632a:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8082 	beq.w	8006440 <HAL_RCC_GetSysClockFreq+0x1ac>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
 800633c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006340:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	f003 020f 	and.w	r2, r3, #15
 800634a:	230f      	movs	r3, #15
 800634c:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	fa93 f3a3 	rbit	r3, r3
 8006354:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006358:	fab3 f383 	clz	r3, r3
 800635c:	fa22 f303 	lsr.w	r3, r2, r3
 8006360:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006364:	4413      	add	r3, r2
 8006366:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 800636a:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800636c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006370:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03a      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0x160>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 800637e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800638c:	23f0      	movs	r3, #240	; 0xf0
 800638e:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	fa93 f3a3 	rbit	r3, r3
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	fab3 f383 	clz	r3, r3
 800639e:	fa22 f303 	lsr.w	r3, r2, r3
 80063a2:	3301      	adds	r3, #1
 80063a4:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 80063a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80063b4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80063b8:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	fa93 f3a3 	rbit	r3, r3
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	fab3 f383 	clz	r3, r3
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
 80063cc:	3302      	adds	r3, #2
 80063ce:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 80063d0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80063d4:	f2c0 037a 	movt	r3, #122	; 0x7a
 80063d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063da:	fbb3 f3f2 	udiv	r3, r3, r2
 80063de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e0:	fb02 f203 	mul.w	r2, r2, r3
 80063e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ec:	fb02 f303 	mul.w	r3, r2, r3
 80063f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063f2:	e00a      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x176>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80063f4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80063f8:	f2c0 037a 	movt	r3, #122	; 0x7a
 80063fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006404:	fb02 f303 	mul.w	r3, r2, r3
 8006408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800640a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800640e:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	fa93 f3a3 	rbit	r3, r3
 8006416:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006418:	69fb      	ldr	r3, [r7, #28]
        }
        
        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
 800641a:	fab3 f383 	clz	r3, r3
 800641e:	f44f 1250 	mov.w	r2, #3407872	; 0x340000
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800642a:	4413      	add	r3, r2
 800642c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8006430:	461a      	mov	r2, r3
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	429a      	cmp	r2, r3
 8006436:	d10b      	bne.n	8006450 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
            pllclk = pllclk / 2;
 8006438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800643e:	e007      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006442:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006446:	f2c0 033d 	movt	r3, #61	; 0x3d
 800644a:	fb03 f302 	mul.w	r3, r3, r2
 800644e:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8006450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006452:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8006454:	e005      	b.n	8006462 <HAL_RCC_GetSysClockFreq+0x1ce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006456:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800645a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800645e:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8006460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8006464:	4618      	mov	r0, r3
 8006466:	3760      	adds	r7, #96	; 0x60
 8006468:	46bd      	mov	sp, r7
 800646a:	bc90      	pop	{r4, r7}
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop

08006470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006476:	f7ff ff0d 	bl	8006294 <HAL_RCC_GetSysClockFreq>
 800647a:	4602      	mov	r2, r0
 800647c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800648a:	23f0      	movs	r3, #240	; 0xf0
 800648c:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	fa93 f3a3 	rbit	r3, r3
 8006494:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	fab3 f383 	clz	r3, r3
 800649c:	40d9      	lsrs	r1, r3
 800649e:	f642 33f8 	movw	r3, #11256	; 0x2bf8
 80064a2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80064a6:	5c5b      	ldrb	r3, [r3, r1]
 80064a8:	40da      	lsrs	r2, r3
 80064aa:	f240 0300 	movw	r3, #0
 80064ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064b2:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80064b4:	f240 0300 	movw	r3, #0
 80064b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80064bc:	681b      	ldr	r3, [r3, #0]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop

080064c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80064ce:	f7ff ffcf 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 80064d2:	4602      	mov	r2, r0
 80064d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 80064e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80064e6:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	fab3 f383 	clz	r3, r3
 80064f6:	40d9      	lsrs	r1, r3
 80064f8:	f642 33f8 	movw	r3, #11256	; 0x2bf8
 80064fc:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006500:	5c5b      	ldrb	r3, [r3, r1]
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop

08006510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006516:	f7ff ffab 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 800651a:	4602      	mov	r2, r0
 800651c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006520:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 5160 	and.w	r1, r3, #14336	; 0x3800
 800652a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800652e:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	fa93 f3a3 	rbit	r3, r3
 8006536:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	40d9      	lsrs	r1, r3
 8006540:	f642 33f8 	movw	r3, #11256	; 0x2bf8
 8006544:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006548:	5c5b      	ldrb	r3, [r3, r1]
 800654a:	fa22 f303 	lsr.w	r3, r2, r3
} 
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	220f      	movs	r2, #15
 8006564:	601a      	str	r2, [r3, #0]
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;

#if defined(RCC_CFGR2_PREDIV1SRC)
  /* Get the Prediv1 source --------------------------------------------------*/
  RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
 8006566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800656a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	605a      	str	r2, [r3, #4]
#endif /* RCC_CFGR2_PREDIV1SRC */

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8006578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800657c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d004      	beq.n	8006594 <HAL_RCC_GetOscConfig+0x3c>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8006590:	609a      	str	r2, [r3, #8]
 8006592:	e010      	b.n	80065b6 <HAL_RCC_GetOscConfig+0x5e>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8006594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006598:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065ac:	609a      	str	r2, [r3, #8]
 80065ae:	e002      	b.n	80065b6 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	609a      	str	r2, [r3, #8]
  }
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 80065b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	f003 020f 	and.w	r2, r3, #15
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60da      	str	r2, [r3, #12]

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80065c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_RCC_GetOscConfig+0x8a>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	615a      	str	r2, [r3, #20]
 80065e0:	e002      	b.n	80065e8 <HAL_RCC_GetOscConfig+0x90>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	615a      	str	r2, [r3, #20]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 80065e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 80065f6:	23f8      	movs	r3, #248	; 0xf8
 80065f8:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	fa93 f3a3 	rbit	r3, r3
 8006600:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	fab3 f383 	clz	r3, r3
 8006608:	40da      	lsrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	619a      	str	r2, [r3, #24]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800660e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006612:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_RCC_GetOscConfig+0xd0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2205      	movs	r2, #5
 8006624:	611a      	str	r2, [r3, #16]
 8006626:	e00f      	b.n	8006648 <HAL_RCC_GetOscConfig+0xf0>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8006628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800662c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_RCC_GetOscConfig+0xea>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	611a      	str	r2, [r3, #16]
 8006640:	e002      	b.n	8006648 <HAL_RCC_GetOscConfig+0xf0>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	611a      	str	r2, [r3, #16]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8006648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800664c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_RCC_GetOscConfig+0x10a>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	61da      	str	r2, [r3, #28]
 8006660:	e002      	b.n	8006668 <HAL_RCC_GetOscConfig+0x110>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	61da      	str	r2, [r3, #28]
  }
  
  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8006668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800666c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_RCC_GetOscConfig+0x12a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	621a      	str	r2, [r3, #32]
 8006680:	e002      	b.n	8006688 <HAL_RCC_GetOscConfig+0x130>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	621a      	str	r2, [r3, #32]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8006688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800668c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 800669a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800669e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28
#if defined(RCC_CR_PLL2ON)
  /* Get the PLL2 configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
 80066ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_RCC_GetOscConfig+0x16e>
  {
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80066c4:	e002      	b.n	80066cc <HAL_RCC_GetOscConfig+0x174>
  }
  else
  {
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
 80066cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
 80066de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL2ON */
}
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop

080066fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	220f      	movs	r2, #15
 800670a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800670c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006710:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f003 0203 	and.w	r2, r3, #3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800671e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006722:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006734:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006746:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006750:	08da      	lsrs	r2, r3, #3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800675a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0207 	and.w	r2, r3, #7
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop

08006774 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800677c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800678a:	f000 f807 	bl	800679c <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800678e:	f241 030a 	movw	r3, #4106	; 0x100a
 8006792:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006796:	2280      	movs	r2, #128	; 0x80
 8006798:	701a      	strb	r2, [r3, #0]
  }
}
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b098      	sub	sp, #96	; 0x60
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0, temp_reg = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b4:	2300      	movs	r3, #0
 80067b6:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80e5 	beq.w	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80067da:	69d2      	ldr	r2, [r2, #28]
 80067dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80067e0:	61da      	str	r2, [r3, #28]
 80067e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80067f4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80067f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80067fc:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8006800:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800680a:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800680c:	f7f9 fd6c 	bl	80002e8 <HAL_GetTick>
 8006810:	65b8      	str	r0, [r7, #88]	; 0x58
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006814:	f7f9 fd68 	bl	80002e8 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	; 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e1da      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x434>
    SET_BIT(PWR->CR, PWR_CR_DBP);
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006826:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800682a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0ed      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800683c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006840:	6a1a      	ldr	r2, [r3, #32]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	4053      	eors	r3, r2
 8006848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80a1 	beq.w	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006856:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006860:	657b      	str	r3, [r7, #84]	; 0x54
 8006862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006866:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686a:	fa93 f3a3 	rbit	r3, r3
 800686e:	64fb      	str	r3, [r7, #76]	; 0x4c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006872:	fab3 f383 	clz	r3, r3
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	461a      	mov	r2, r3
 800687a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800687e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8006882:	4413      	add	r3, r2
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800688c:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006890:	fa93 f3a3 	rbit	r3, r3
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006898:	fab3 f383 	clz	r3, r3
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	461a      	mov	r2, r3
 80068a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80068a8:	4413      	add	r3, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80068b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068b8:	621a      	str	r2, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80068ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d058      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80068c4:	f7f9 fd10 	bl	80002e8 <HAL_GetTick>
 80068c8:	65b8      	str	r0, [r7, #88]	; 0x58
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7f9 fd0c 	bl	80002e8 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068d4:	1ad2      	subs	r2, r2, r3
 80068d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80068da:	429a      	cmp	r2, r3
 80068dc:	d901      	bls.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e17c      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80068e2:	2302      	movs	r3, #2
 80068e4:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e8:	fa93 f3a3 	rbit	r3, r3
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	fab3 f383 	clz	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	d105      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8006906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800690a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	e01c      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006912:	2302      	movs	r3, #2
 8006914:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	fa93 f3a3 	rbit	r3, r3
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	fab3 f383 	clz	r3, r3
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800692a:	b2db      	uxtb	r3, r3
 800692c:	b2db      	uxtb	r3, r3
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d105      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8006936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800693a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	e004      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006946:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	2202      	movs	r2, #2
 800694e:	633a      	str	r2, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	fa92 f2a2 	rbit	r2, r2
 8006956:	62fa      	str	r2, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800695a:	fab2 f282 	clz	r2, r2
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	f002 021f 	and.w	r2, r2, #31
 800696c:	40d3      	lsrs	r3, r2
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0aa      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x124>
          {
            return HAL_TIMEOUT;
          }      
        }  
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800697a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800697e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006982:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006986:	6a12      	ldr	r2, [r2, #32]
 8006988:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6852      	ldr	r2, [r2, #4]
 8006990:	430a      	orrs	r2, r1
 8006992:	621a      	str	r2, [r3, #32]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00e      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80069b0:	6852      	ldr	r2, [r2, #4]
 80069b2:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6892      	ldr	r2, [r2, #8]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00e      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80069ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80069da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069dc:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	68d2      	ldr	r2, [r2, #12]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80069f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80069fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a06:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6912      	ldr	r2, [r2, #16]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8006a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d108      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8006a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	f040 80b7 	bne.w	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8006a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 80a0 	bne.w	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8006a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00c      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8006a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d001      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
      {
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e0ac      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x434>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8006a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006a92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a94:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6992      	ldr	r2, [r2, #24]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8006aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006aac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006ab0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ab2:	f422 4170 	bic.w	r1, r2, #61440	; 0xf000
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6952      	ldr	r2, [r2, #20]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006abe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ac2:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	fa93 f3a3 	rbit	r3, r3
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      
      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8006ace:	fab3 f383 	clz	r3, r3
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8006ad8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae0:	f7f9 fc02 	bl	80002e8 <HAL_GetTick>
 8006ae4:	65b8      	str	r0, [r7, #88]	; 0x58
      
      /* Wait till PLLI2S is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x352>
      {
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ae8:	f7f9 fbfe 	bl	80002e8 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	; 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x352>
        {
          return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e070      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006afa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006afe:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	fa93 f3a3 	rbit	r3, r3
 8006b06:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006b08:	69fb      	ldr	r3, [r7, #28]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till PLLI2S is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b0a:	fab3 f383 	clz	r3, r3
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f043 0320 	orr.w	r3, r3, #32
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d105      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	e01d      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006b2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006b30:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	fa93 f3a3 	rbit	r3, r3
 8006b38:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	fab3 f383 	clz	r3, r3
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f043 0320 	orr.w	r3, r3, #32
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d105      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	e004      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006b6c:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	fa92 f2a2 	rbit	r2, r2
 8006b74:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	fab2 f282 	clz	r2, r2
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	f042 0220 	orr.w	r2, r2, #32
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	f002 021f 	and.w	r2, r2, #31
 8006b8a:	40d3      	lsrs	r3, r2
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0a9      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8006b94:	e00c      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8006b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d001      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
      {
          return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e015      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x434>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00e      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006bcc:	6852      	ldr	r2, [r2, #4]
 8006bce:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	69d2      	ldr	r2, [r2, #28]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3760      	adds	r7, #96	; 0x60
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that 
  *         returns the configuration information for the Extended Peripherals clocks(RTC, I2S, ADC clocks).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t srcclk = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Get the RTC configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Source clock is LSE or LSI*/
  PeriphClkInit->RTCClockSelection = srcclk;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	605a      	str	r2, [r3, #4]

  /* Get the ADC clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f043 0202 	orr.w	r2, r3, #2
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	601a      	str	r2, [r3, #0]
  PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 8006c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	609a      	str	r2, [r3, #8]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the I2S2 clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f043 0204 	orr.w	r2, r3, #4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
  PeriphClkInit->I2s2ClockSelection = __HAL_RCC_GET_I2S2_SOURCE();
 8006c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60da      	str	r2, [r3, #12]

  /* Get the I2S3 clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S3;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f043 0208 	orr.w	r2, r3, #8
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	601a      	str	r2, [r3, #0]
  PeriphClkInit->I2s3ClockSelection = __HAL_RCC_GET_I2S3_SOURCE();
 8006c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	611a      	str	r2, [r3, #16]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f043 0210 	orr.w	r2, r3, #16
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 8006c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	61da      	str	r2, [r3, #28]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
}
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop

08006c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b0a7      	sub	sp, #156	; 0x9c
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 8006c98:	f642 4224 	movw	r2, #11300	; 0x2c24
 8006c9c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006ca0:	f107 031c 	add.w	r3, r7, #28
 8006ca4:	6810      	ldr	r0, [r2, #0]
 8006ca6:	6851      	ldr	r1, [r2, #4]
 8006ca8:	6892      	ldr	r2, [r2, #8]
 8006caa:	c307      	stmia	r3!, {r0, r1, r2}
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 8006cac:	f642 4330 	movw	r3, #11312	; 0x2c30
 8006cb0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006cb4:	f107 040c 	add.w	r4, r7, #12
 8006cb8:	6818      	ldr	r0, [r3, #0]
 8006cba:	6859      	ldr	r1, [r3, #4]
 8006cbc:	689a      	ldr	r2, [r3, #8]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = { 1, 2};
#endif
#endif
  uint32_t temp_reg = 0, frequency = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1 = 0, pllclk = 0, pllmul = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t pll2mul = 0, pll3mul = 0, prediv2 = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cea:	2300      	movs	r3, #0
 8006cec:	67bb      	str	r3, [r7, #120]	; 0x78
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	2b0f      	cmp	r3, #15
 8006cf4:	f200 820a 	bhi.w	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8006cf8:	a101      	add	r1, pc, #4	; (adr r1, 8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8006cfa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08007043 	.word	0x08007043
 8006d04:	080070d3 	.word	0x080070d3
 8006d08:	0800710d 	.word	0x0800710d
 8006d0c:	08006f07 	.word	0x08006f07
 8006d10:	0800710d 	.word	0x0800710d
 8006d14:	0800710d 	.word	0x0800710d
 8006d18:	0800710d 	.word	0x0800710d
 8006d1c:	08006fa5 	.word	0x08006fa5
 8006d20:	0800710d 	.word	0x0800710d
 8006d24:	0800710d 	.word	0x0800710d
 8006d28:	0800710d 	.word	0x0800710d
 8006d2c:	0800710d 	.word	0x0800710d
 8006d30:	0800710d 	.word	0x0800710d
 8006d34:	0800710d 	.word	0x0800710d
 8006d38:	0800710d 	.word	0x0800710d
 8006d3c:	08006d41 	.word	0x08006d41
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8006d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80d1 	beq.w	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8006d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d6a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8006d6e:	677b      	str	r3, [r7, #116]	; 0x74
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d72:	fa93 f3a3 	rbit	r3, r3
 8006d76:	673b      	str	r3, [r7, #112]	; 0x70
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d7a:	fab3 f383 	clz	r3, r3
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8006d86:	4413      	add	r3, r2
 8006d88:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 8006d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 808e 	beq.w	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
 8006d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006da2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	f003 020f 	and.w	r2, r3, #15
 8006dac:	230f      	movs	r3, #15
 8006dae:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	fa93 f3a3 	rbit	r3, r3
 8006db6:	66bb      	str	r3, [r7, #104]	; 0x68
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dba:	fab3 f383 	clz	r3, r3
 8006dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8006dc6:	440b      	add	r3, r1
 8006dc8:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8006dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8006dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d03f      	beq.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 8006de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006de6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006df0:	23f0      	movs	r3, #240	; 0xf0
 8006df2:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006df6:	fa93 f3a3 	rbit	r3, r3
 8006dfa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dfe:	fab3 f383 	clz	r3, r3
 8006e02:	fa22 f303 	lsr.w	r3, r2, r3
 8006e06:	3301      	adds	r3, #1
 8006e08:	67bb      	str	r3, [r7, #120]	; 0x78
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 8006e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006e18:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e20:	fa93 f3a3 	rbit	r3, r3
 8006e24:	65bb      	str	r3, [r7, #88]	; 0x58
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e28:	fab3 f383 	clz	r3, r3
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e30:	3302      	adds	r3, #2
 8006e32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8006e36:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8006e3a:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006e3e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e48:	fb02 f203 	mul.w	r2, r2, r3
 8006e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e58:	fb02 f303 	mul.w	r3, r2, r3
 8006e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e60:	e00d      	b.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006e62:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8006e66:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006e6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e72:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e7e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8006e82:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e86:	fa93 f3a3 	rbit	r3, r3
 8006e8a:	653b      	str	r3, [r7, #80]	; 0x50
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
          }
          
          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
 8006e8e:	fab3 f383 	clz	r3, r3
 8006e92:	f44f 1250 	mov.w	r2, #3407872	; 0x340000
 8006e96:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d10f      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          {
              pllclk = pllclk / 2;
 8006eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eb2:	085b      	lsrs	r3, r3, #1
 8006eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eb8:	e009      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006eba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006ebe:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006ec2:	f2c0 033d 	movt	r3, #61	; 0x3d
 8006ec6:	fb03 f302 	mul.w	r3, r3, r2
 8006eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8006ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ed2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d004      	beq.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* Prescaler of 2 selected for USB */ 
          frequency = pllclk;
 8006ee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ee8:	e00c      	b.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        }
        else
        {
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
 8006eea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eee:	005a      	lsls	r2, r3, #1
 8006ef0:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8006ef4:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
 8006ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8006efc:	085b      	lsrs	r3, r3, #1
 8006efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006f02:	e104      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006f04:	e103      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8006f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8006f18:	f7ff f9bc 	bl	8006294 <HAL_RCC_GetSysClockFreq>
 8006f1c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8006f20:	e03f      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
      }
      else
      {
         /* Check if PLLI2S is enabled */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8006f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d036      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        {
          /* PLLI2SVCO = 2 * PLLI2SCLK = 2 * (HSE/PREDIV2 * PLL3MUL) */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 8006f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f42:	23f0      	movs	r3, #240	; 0xf0
 8006f44:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f48:	fa93 f3a3 	rbit	r3, r3
 8006f4c:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f50:	fab3 f383 	clz	r3, r3
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
 8006f58:	3301      	adds	r3, #1
 8006f5a:	67bb      	str	r3, [r7, #120]	; 0x78
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> POSITION_VAL(RCC_CFGR2_PLL3MUL)) + 2;
 8006f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8006f6a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006f6e:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f72:	fa93 f3a3 	rbit	r3, r3
 8006f76:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f7a:	fab3 f383 	clz	r3, r3
 8006f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f82:	3302      	adds	r3, #2
 8006f84:	67fb      	str	r3, [r7, #124]	; 0x7c
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8006f86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8006f8a:	f2c0 037a 	movt	r3, #122	; 0x7a
 8006f8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f96:	fb02 f303 	mul.w	r3, r2, r3
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006fa0:	e0b5      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006fa2:	e0b4      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8006fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7ff f96d 	bl	8006294 <HAL_RCC_GetSysClockFreq>
 8006fba:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8006fbe:	e03f      	b.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
      }
      else
      {
         /* Check if PLLI2S is enabled */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8006fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d036      	beq.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
        {
          /* PLLI2SVCO = 2 * PLLI2SCLK = 2 * (HSE/PREDIV2 * PLL3MUL) */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 8006fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fe0:	23f0      	movs	r3, #240	; 0xf0
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe6:	fa93 f3a3 	rbit	r3, r3
 8006fea:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	fab3 f383 	clz	r3, r3
 8006ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	67bb      	str	r3, [r7, #120]	; 0x78
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> POSITION_VAL(RCC_CFGR2_PLL3MUL)) + 2;
 8006ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ffe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007008:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	fa93 f3a3 	rbit	r3, r3
 8007014:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	fab3 f383 	clz	r3, r3
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
 8007020:	3302      	adds	r3, #2
 8007022:	67fb      	str	r3, [r7, #124]	; 0x7c
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8007024:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8007028:	f2c0 037a 	movt	r3, #122	; 0x7a
 800702c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800702e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007032:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800703e:	e066      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8007040:	e065      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8007042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007046:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705c:	d10a      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 800705e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      {
        frequency = LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007072:	e02d      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007080:	d10d      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007086:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        frequency = LSI_VALUE;
 8007094:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007098:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800709c:	e018      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800709e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070aa:	d10d      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
 80070ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
      {
        frequency = HSE_VALUE / 128;
 80070be:	f24f 4324 	movw	r3, #62500	; 0xf424
 80070c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070c6:	e003      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      break;
 80070ce:	e01e      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80070d0:	e01d      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 80070d2:	f7ff fa1d 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
 80070d6:	4602      	mov	r2, r0
 80070d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 4140 	and.w	r1, r3, #49152	; 0xc000
 80070e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070ea:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	fa93 f3a3 	rbit	r3, r3
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	fab3 f383 	clz	r3, r3
 80070fa:	fa21 f303 	lsr.w	r3, r1, r3
 80070fe:	3301      	adds	r3, #1
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	fbb2 f3f3 	udiv	r3, r2, r3
 8007106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      break;
 800710a:	e000      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
    }
  default: 
    {
      break;
 800710c:	bf00      	nop
    }
  }
  return(frequency);
 800710e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 8007112:	4618      	mov	r0, r3
 8007114:	379c      	adds	r7, #156	; 0x9c
 8007116:	46bd      	mov	sp, r7
 8007118:	bd90      	pop	{r4, r7, pc}
 800711a:	bf00      	nop

0800711c <HAL_RCCEx_EnablePLLI2S>:
  *         contains the configuration information for the PLLI2S
  * @note   The PLLI2S configuration not modified if used by I2S2 or I2S3 Interface.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b094      	sub	sp, #80	; 0x50
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Check that PLL I2S has not been already enabled by I2S2 or I2S3*/
  if (HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S2SRC) && HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8007128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800712c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	f040 8117 	bne.w	800736a <HAL_RCCEx_EnablePLLI2S+0x24e>
 800713c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007140:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800714a:	2b00      	cmp	r3, #0
 800714c:	f040 810d 	bne.w	800736a <HAL_RCCEx_EnablePLLI2S+0x24e>
    assert_param(IS_RCC_PLLI2S_MUL(PLLI2SInit->PLLI2SMUL));
    assert_param(IS_RCC_HSE_PREDIV2(PLLI2SInit->HSEPrediv2Value));

    /* Prediv2 can be written only when the PLL2 is disabled. */
    /* Return an error only if new value is different from the programmed value */
    if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8007150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007154:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00c      	beq.n	800717c <HAL_RCCEx_EnablePLLI2S+0x60>
      (__HAL_RCC_HSE_GET_PREDIV2() != PLLI2SInit->HSEPrediv2Value))
 8007162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
    assert_param(IS_RCC_PLLI2S_MUL(PLLI2SInit->PLLI2SMUL));
    assert_param(IS_RCC_HSE_PREDIV2(PLLI2SInit->HSEPrediv2Value));

    /* Prediv2 can be written only when the PLL2 is disabled. */
    /* Return an error only if new value is different from the programmed value */
    if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8007174:	429a      	cmp	r2, r3
 8007176:	d001      	beq.n	800717c <HAL_RCCEx_EnablePLLI2S+0x60>
      (__HAL_RCC_HSE_GET_PREDIV2() != PLLI2SInit->HSEPrediv2Value))
    {
      return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e0f7      	b.n	800736c <HAL_RCCEx_EnablePLLI2S+0x250>
 800717c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007180:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007184:	fa93 f3a3 	rbit	r3, r3
 8007188:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800718a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }

    /* Disable the main PLLI2S. */
    __HAL_RCC_PLLI2S_DISABLE();
 800718c:	fab3 f383 	clz	r3, r3
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007196:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800719e:	f7f9 f8a3 	bl	80002e8 <HAL_GetTick>
 80071a2:	64f8      	str	r0, [r7, #76]	; 0x4c
    
    /* Wait till PLLI2S is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071a4:	e008      	b.n	80071b8 <HAL_RCCEx_EnablePLLI2S+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071a6:	f7f9 f89f 	bl	80002e8 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b64      	cmp	r3, #100	; 0x64
 80071b2:	d901      	bls.n	80071b8 <HAL_RCCEx_EnablePLLI2S+0x9c>
      {
        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e0d9      	b.n	800736c <HAL_RCCEx_EnablePLLI2S+0x250>
 80071b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80071bc:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c0:	fa93 f3a3 	rbit	r3, r3
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80071c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLLI2S is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071c8:	fab3 f383 	clz	r3, r3
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f043 0320 	orr.w	r3, r3, #32
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d105      	bne.n	80071ea <HAL_RCCEx_EnablePLLI2S+0xce>
 80071de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	e01d      	b.n	8007226 <HAL_RCCEx_EnablePLLI2S+0x10a>
 80071ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	fa93 f3a3 	rbit	r3, r3
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80071f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fa:	fab3 f383 	clz	r3, r3
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f043 0320 	orr.w	r3, r3, #32
 8007204:	b2db      	uxtb	r3, r3
 8007206:	b2db      	uxtb	r3, r3
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d105      	bne.n	800721c <HAL_RCCEx_EnablePLLI2S+0x100>
 8007210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007214:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	e004      	b.n	8007226 <HAL_RCCEx_EnablePLLI2S+0x10a>
 800721c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007220:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800722a:	633a      	str	r2, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800722c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800722e:	fa92 f2a2 	rbit	r2, r2
 8007232:	62fa      	str	r2, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007236:	fab2 f282 	clz	r2, r2
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	f042 0220 	orr.w	r2, r2, #32
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	f002 021f 	and.w	r2, r2, #31
 8007248:	40d3      	lsrs	r3, r2
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1a9      	bne.n	80071a6 <HAL_RCCEx_EnablePLLI2S+0x8a>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the HSE prediv2 factor --------------------------------*/
    __HAL_RCC_HSE_PREDIV2_CONFIG(PLLI2SInit->HSEPrediv2Value);
 8007252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007256:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800725a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800725e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007264:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6852      	ldr	r2, [r2, #4]
 800726c:	430a      	orrs	r2, r1
 800726e:	62da      	str	r2, [r3, #44]	; 0x2c
    

    /* Configure the main PLLI2S multiplication factors. */
    __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SMUL);
 8007270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007274:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800727c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007280:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007282:	f422 4170 	bic.w	r1, r2, #61440	; 0xf000
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	62da      	str	r2, [r3, #44]	; 0x2c
 800728e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007292:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	fa93 f3a3 	rbit	r3, r3
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    
    /* Enable the main PLLI2S. */
    __HAL_RCC_PLLI2S_ENABLE();
 800729e:	fab3 f383 	clz	r3, r3
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80072a8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80072ac:	2201      	movs	r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b0:	f7f9 f81a 	bl	80002e8 <HAL_GetTick>
 80072b4:	64f8      	str	r0, [r7, #76]	; 0x4c
    
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072b6:	e008      	b.n	80072ca <HAL_RCCEx_EnablePLLI2S+0x1ae>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072b8:	f7f9 f816 	bl	80002e8 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b64      	cmp	r3, #100	; 0x64
 80072c4:	d901      	bls.n	80072ca <HAL_RCCEx_EnablePLLI2S+0x1ae>
      {
        return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e050      	b.n	800736c <HAL_RCCEx_EnablePLLI2S+0x250>
 80072ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80072ce:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	fa93 f3a3 	rbit	r3, r3
 80072d6:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80072d8:	69fb      	ldr	r3, [r7, #28]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f043 0320 	orr.w	r3, r3, #32
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	095b      	lsrs	r3, r3, #5
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d105      	bne.n	80072fc <HAL_RCCEx_EnablePLLI2S+0x1e0>
 80072f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	e01d      	b.n	8007338 <HAL_RCCEx_EnablePLLI2S+0x21c>
 80072fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007300:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	fa93 f3a3 	rbit	r3, r3
 8007308:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	fab3 f383 	clz	r3, r3
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f043 0320 	orr.w	r3, r3, #32
 8007316:	b2db      	uxtb	r3, r3
 8007318:	b2db      	uxtb	r3, r3
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d105      	bne.n	800732e <HAL_RCCEx_EnablePLLI2S+0x212>
 8007322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007326:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	e004      	b.n	8007338 <HAL_RCCEx_EnablePLLI2S+0x21c>
 800732e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007332:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800733c:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	fa92 f2a2 	rbit	r2, r2
 8007344:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	fab2 f282 	clz	r2, r2
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	f042 0220 	orr.w	r2, r2, #32
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	f002 021f 	and.w	r2, r2, #31
 800735a:	40d3      	lsrs	r3, r2
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0a9      	beq.n	80072b8 <HAL_RCCEx_EnablePLLI2S+0x19c>
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
  uint32_t tickstart = 0;

  /* Check that PLL I2S has not been already enabled by I2S2 or I2S3*/
  if (HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S2SRC) && HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8007364:	bf00      	nop
  {
    /* PLLI2S cannot be modified as already used by I2S2 or I2S3 */
    return HAL_ERROR;
  }

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	e000      	b.n	800736c <HAL_RCCEx_EnablePLLI2S+0x250>
    }
  }
  else
  {
    /* PLLI2S cannot be modified as already used by I2S2 or I2S3 */
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
  }

  return HAL_OK;
}
 800736c:	4618      	mov	r0, r3
 800736e:	3750      	adds	r7, #80	; 0x50
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_RCCEx_DisablePLLI2S>:
  * @brief  Disable PLLI2S
  * @note   PLLI2S is not disabled if used by I2S2 or I2S3 Interface.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08a      	sub	sp, #40	; 0x28
 8007378:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Disable PLL I2S as not requested by I2S2 or I2S3*/
  if (HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S2SRC) && HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800737e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d176      	bne.n	800747e <HAL_RCCEx_DisablePLLI2S+0x10a>
 8007390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007394:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d16d      	bne.n	800747e <HAL_RCCEx_DisablePLLI2S+0x10a>
 80073a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073a6:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80073b0:	69fb      	ldr	r3, [r7, #28]
  {
    /* Disable the main PLLI2S. */
    __HAL_RCC_PLLI2S_DISABLE();
 80073b2:	fab3 f383 	clz	r3, r3
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80073bc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c4:	f7f8 ff90 	bl	80002e8 <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	; 0x24
    
    /* Wait till PLLI2S is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCCEx_DisablePLLI2S+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073cc:	f7f8 ff8c 	bl	80002e8 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b64      	cmp	r3, #100	; 0x64
 80073d8:	d901      	bls.n	80073de <HAL_RCCEx_DisablePLLI2S+0x6a>
      {
        return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e050      	b.n	8007480 <HAL_RCCEx_DisablePLLI2S+0x10c>
 80073de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80073e2:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	fa93 f3a3 	rbit	r3, r3
 80073ea:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80073ec:	697b      	ldr	r3, [r7, #20]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLLI2S is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073ee:	fab3 f383 	clz	r3, r3
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f043 0320 	orr.w	r3, r3, #32
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d105      	bne.n	8007410 <HAL_RCCEx_DisablePLLI2S+0x9c>
 8007404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007408:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	e01d      	b.n	800744c <HAL_RCCEx_DisablePLLI2S+0xd8>
 8007410:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007414:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	fa93 f3a3 	rbit	r3, r3
 800741c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	fab3 f383 	clz	r3, r3
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f043 0320 	orr.w	r3, r3, #32
 800742a:	b2db      	uxtb	r3, r3
 800742c:	b2db      	uxtb	r3, r3
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d105      	bne.n	8007442 <HAL_RCCEx_DisablePLLI2S+0xce>
 8007436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800743a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	e004      	b.n	800744c <HAL_RCCEx_DisablePLLI2S+0xd8>
 8007442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007446:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007450:	60ba      	str	r2, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	fa92 f2a2 	rbit	r2, r2
 8007458:	607a      	str	r2, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	fab2 f282 	clz	r2, r2
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	f042 0220 	orr.w	r2, r2, #32
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	b2d2      	uxtb	r2, r2
 800746a:	f002 021f 	and.w	r2, r2, #31
 800746e:	40d3      	lsrs	r3, r2
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1a9      	bne.n	80073cc <HAL_RCCEx_DisablePLLI2S+0x58>
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
  uint32_t tickstart = 0;

  /* Disable PLL I2S as not requested by I2S2 or I2S3*/
  if (HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S2SRC) && HAL_IS_BIT_CLR(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8007478:	bf00      	nop
  {
    /* PLLI2S is currently used by I2S2 or I2S3. Cannot be disabled.*/
    return HAL_ERROR;
  }
  
  return HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	e000      	b.n	8007480 <HAL_RCCEx_DisablePLLI2S+0x10c>
    }
  }
  else
  {
    /* PLLI2S is currently used by I2S2 or I2S3. Cannot be disabled.*/
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
  }
  
  return HAL_OK;
}
 8007480:	4618      	mov	r0, r3
 8007482:	3728      	adds	r7, #40	; 0x28
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_RCCEx_EnablePLL2>:
  *         contains the configuration information for the PLL2
  * @note   The PLL2 configuration not modified if used indirectly as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLL2(RCC_PLL2InitTypeDef  *PLL2Init)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b094      	sub	sp, #80	; 0x50
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
    clock (i.e. it is used as PLL clock entry that is used as system clock). */
  if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007498:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d013      	beq.n	80074ce <HAL_RCCEx_EnablePLL2+0x46>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80074a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f003 030c 	and.w	r3, r3, #12
{
  uint32_t tickstart = 0;

  /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
    clock (i.e. it is used as PLL clock entry that is used as system clock). */
  if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d10a      	bne.n	80074ce <HAL_RCCEx_EnablePLL2+0x46>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80074b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  uint32_t tickstart = 0;

  /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
    clock (i.e. it is used as PLL clock entry that is used as system clock). */
  if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_RCCEx_EnablePLL2+0x46>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e10a      	b.n	80076e4 <HAL_RCCEx_EnablePLL2+0x25c>
    assert_param(IS_RCC_PLL2_MUL(PLL2Init->PLL2MUL));
    assert_param(IS_RCC_HSE_PREDIV2(PLL2Init->HSEPrediv2Value));

    /* Prediv2 can be written only when the PLLI2S is disabled. */
    /* Return an error only if new value is different from the programmed value */
    if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80074ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00c      	beq.n	80074fa <HAL_RCCEx_EnablePLL2+0x72>
      (__HAL_RCC_HSE_GET_PREDIV2() != PLL2Init->HSEPrediv2Value))
 80074e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
    assert_param(IS_RCC_PLL2_MUL(PLL2Init->PLL2MUL));
    assert_param(IS_RCC_HSE_PREDIV2(PLL2Init->HSEPrediv2Value));

    /* Prediv2 can be written only when the PLLI2S is disabled. */
    /* Return an error only if new value is different from the programmed value */
    if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d001      	beq.n	80074fa <HAL_RCCEx_EnablePLL2+0x72>
      (__HAL_RCC_HSE_GET_PREDIV2() != PLL2Init->HSEPrediv2Value))
    {
      return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e0f4      	b.n	80076e4 <HAL_RCCEx_EnablePLL2+0x25c>
 80074fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80074fe:	64bb      	str	r3, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007502:	fa93 f3a3 	rbit	r3, r3
 8007506:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }

    /* Disable the main PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800750a:	fab3 f383 	clz	r3, r3
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007514:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751c:	f7f8 fee4 	bl	80002e8 <HAL_GetTick>
 8007520:	64f8      	str	r0, [r7, #76]	; 0x4c
    
    /* Wait till PLL2 is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007522:	e008      	b.n	8007536 <HAL_RCCEx_EnablePLL2+0xae>
    {
      if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007524:	f7f8 fee0 	bl	80002e8 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b64      	cmp	r3, #100	; 0x64
 8007530:	d901      	bls.n	8007536 <HAL_RCCEx_EnablePLL2+0xae>
      {
        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e0d6      	b.n	80076e4 <HAL_RCCEx_EnablePLL2+0x25c>
 8007536:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800753a:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800753e:	fa93 f3a3 	rbit	r3, r3
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL2 is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007546:	fab3 f383 	clz	r3, r3
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f043 0320 	orr.w	r3, r3, #32
 8007550:	b2db      	uxtb	r3, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b01      	cmp	r3, #1
 800755a:	d105      	bne.n	8007568 <HAL_RCCEx_EnablePLL2+0xe0>
 800755c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007560:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	e01d      	b.n	80075a4 <HAL_RCCEx_EnablePLL2+0x11c>
 8007568:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800756c:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	fa93 f3a3 	rbit	r3, r3
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	fab3 f383 	clz	r3, r3
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f043 0320 	orr.w	r3, r3, #32
 8007582:	b2db      	uxtb	r3, r3
 8007584:	b2db      	uxtb	r3, r3
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d105      	bne.n	800759a <HAL_RCCEx_EnablePLL2+0x112>
 800758e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007592:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	e004      	b.n	80075a4 <HAL_RCCEx_EnablePLL2+0x11c>
 800759a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800759e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075a8:	633a      	str	r2, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ac:	fa92 f2a2 	rbit	r2, r2
 80075b0:	62fa      	str	r2, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80075b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b4:	fab2 f282 	clz	r2, r2
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	f042 0220 	orr.w	r2, r2, #32
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	f002 021f 	and.w	r2, r2, #31
 80075c6:	40d3      	lsrs	r3, r2
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1a9      	bne.n	8007524 <HAL_RCCEx_EnablePLL2+0x9c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Configure the HSE prediv2 factor --------------------------------*/
    __HAL_RCC_HSE_PREDIV2_CONFIG(PLL2Init->HSEPrediv2Value);
 80075d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80075dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80075e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075e2:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6892      	ldr	r2, [r2, #8]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure the main PLL2 multiplication factors. */
    __HAL_RCC_PLL2_CONFIG(PLL2Init->PLL2MUL);
 80075ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80075fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80075fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007600:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6852      	ldr	r2, [r2, #4]
 8007608:	430a      	orrs	r2, r1
 800760a:	62da      	str	r2, [r3, #44]	; 0x2c
 800760c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	fa93 f3a3 	rbit	r3, r3
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    
    /* Enable the main PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800761c:	fab3 f383 	clz	r3, r3
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007626:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800762a:	2201      	movs	r2, #1
 800762c:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762e:	f7f8 fe5b 	bl	80002e8 <HAL_GetTick>
 8007632:	64f8      	str	r0, [r7, #76]	; 0x4c
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007634:	e008      	b.n	8007648 <HAL_RCCEx_EnablePLL2+0x1c0>
    {
      if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007636:	f7f8 fe57 	bl	80002e8 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b64      	cmp	r3, #100	; 0x64
 8007642:	d901      	bls.n	8007648 <HAL_RCCEx_EnablePLL2+0x1c0>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e04d      	b.n	80076e4 <HAL_RCCEx_EnablePLL2+0x25c>
 8007648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800764c:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	fa93 f3a3 	rbit	r3, r3
 8007654:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007656:	69fb      	ldr	r3, [r7, #28]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007658:	fab3 f383 	clz	r3, r3
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f043 0320 	orr.w	r3, r3, #32
 8007662:	b2db      	uxtb	r3, r3
 8007664:	b2db      	uxtb	r3, r3
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b01      	cmp	r3, #1
 800766c:	d105      	bne.n	800767a <HAL_RCCEx_EnablePLL2+0x1f2>
 800766e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007672:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	e01d      	b.n	80076b6 <HAL_RCCEx_EnablePLL2+0x22e>
 800767a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800767e:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	fa93 f3a3 	rbit	r3, r3
 8007686:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	fab3 f383 	clz	r3, r3
 800768e:	b2db      	uxtb	r3, r3
 8007690:	f043 0320 	orr.w	r3, r3, #32
 8007694:	b2db      	uxtb	r3, r3
 8007696:	b2db      	uxtb	r3, r3
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d105      	bne.n	80076ac <HAL_RCCEx_EnablePLL2+0x224>
 80076a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	e004      	b.n	80076b6 <HAL_RCCEx_EnablePLL2+0x22e>
 80076ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80076ba:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	fa92 f2a2 	rbit	r2, r2
 80076c2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	fab2 f282 	clz	r2, r2
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	f042 0220 	orr.w	r2, r2, #32
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	f002 021f 	and.w	r2, r2, #31
 80076d8:	40d3      	lsrs	r3, r2
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0a9      	beq.n	8007636 <HAL_RCCEx_EnablePLL2+0x1ae>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3750      	adds	r7, #80	; 0x50
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <HAL_RCCEx_DisablePLL2>:
  * @brief  Disable PLL2
  * @note   PLL2 is not disabled if used indirectly as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLL2(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	; 0x28
 80076f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
    clock (i.e. it is used as PLL clock entry that is used as system clock). */
  if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80076f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d013      	beq.n	8007730 <HAL_RCCEx_DisablePLL2+0x44>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800770c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f003 030c 	and.w	r3, r3, #12
{
  uint32_t tickstart = 0;

  /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
    clock (i.e. it is used as PLL clock entry that is used as system clock). */
  if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007716:	2b08      	cmp	r3, #8
 8007718:	d10a      	bne.n	8007730 <HAL_RCCEx_DisablePLL2+0x44>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800771a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800771e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  uint32_t tickstart = 0;

  /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
    clock (i.e. it is used as PLL clock entry that is used as system clock). */
  if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <HAL_RCCEx_DisablePLL2+0x44>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e06b      	b.n	8007808 <HAL_RCCEx_DisablePLL2+0x11c>
 8007730:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007734:	623b      	str	r3, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	fa93 f3a3 	rbit	r3, r3
 800773c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800773e:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    /* Disable the main PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007740:	fab3 f383 	clz	r3, r3
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800774a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007752:	f7f8 fdc9 	bl	80002e8 <HAL_GetTick>
 8007756:	6278      	str	r0, [r7, #36]	; 0x24
    
    /* Wait till PLL2 is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007758:	e008      	b.n	800776c <HAL_RCCEx_DisablePLL2+0x80>
    {
      if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800775a:	f7f8 fdc5 	bl	80002e8 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b64      	cmp	r3, #100	; 0x64
 8007766:	d901      	bls.n	800776c <HAL_RCCEx_DisablePLL2+0x80>
      {
        return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e04d      	b.n	8007808 <HAL_RCCEx_DisablePLL2+0x11c>
 800776c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007770:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	fa93 f3a3 	rbit	r3, r3
 8007778:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800777a:	697b      	ldr	r3, [r7, #20]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till PLL2 is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800777c:	fab3 f383 	clz	r3, r3
 8007780:	b2db      	uxtb	r3, r3
 8007782:	f043 0320 	orr.w	r3, r3, #32
 8007786:	b2db      	uxtb	r3, r3
 8007788:	b2db      	uxtb	r3, r3
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b01      	cmp	r3, #1
 8007790:	d105      	bne.n	800779e <HAL_RCCEx_DisablePLL2+0xb2>
 8007792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007796:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	e01d      	b.n	80077da <HAL_RCCEx_DisablePLL2+0xee>
 800779e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077a2:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	fa93 f3a3 	rbit	r3, r3
 80077aa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	fab3 f383 	clz	r3, r3
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f043 0320 	orr.w	r3, r3, #32
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d105      	bne.n	80077d0 <HAL_RCCEx_DisablePLL2+0xe4>
 80077c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	e004      	b.n	80077da <HAL_RCCEx_DisablePLL2+0xee>
 80077d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077de:	60ba      	str	r2, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	fa92 f2a2 	rbit	r2, r2
 80077e6:	607a      	str	r2, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	fab2 f282 	clz	r2, r2
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	f042 0220 	orr.w	r2, r2, #32
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	f002 021f 	and.w	r2, r2, #31
 80077fc:	40d3      	lsrs	r3, r2
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1a9      	bne.n	800775a <HAL_RCCEx_DisablePLL2+0x6e>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3728      	adds	r7, #40	; 0x28
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e01d      	b.n	800785e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f846 	bl	80078c8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3304      	adds	r3, #4
 800784c:	4610      	mov	r0, r2
 800784e:	4619      	mov	r1, r3
 8007850:	f003 fa38 	bl	800acc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop

08007868 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral 
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6a1a      	ldr	r2, [r3, #32]
 800787e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007882:	4013      	ands	r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10f      	bne.n	80078a8 <HAL_TIM_Base_DeInit+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6a1a      	ldr	r2, [r3, #32]
 800788e:	f240 4344 	movw	r3, #1092	; 0x444
 8007892:	4013      	ands	r3, r2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_Base_DeInit+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	f022 0201 	bic.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f817 	bl	80078dc <HAL_TIM_Base_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop

080078dc <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6812      	ldr	r2, [r2, #0]
 8007908:	6812      	ldr	r2, [r2, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop

08007928 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6a1a      	ldr	r2, [r3, #32]
 800793e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007942:	4013      	ands	r3, r2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10f      	bne.n	8007968 <HAL_TIM_Base_Stop+0x40>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6a1a      	ldr	r2, [r3, #32]
 800794e:	f240 4344 	movw	r3, #1092	; 0x444
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d107      	bne.n	8007968 <HAL_TIM_Base_Stop+0x40>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	f022 0201 	bic.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop

08007980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	68d2      	ldr	r2, [r2, #12]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6812      	ldr	r2, [r2, #0]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	f042 0201 	orr.w	r2, r2, #1
 80079a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop

080079b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6812      	ldr	r2, [r2, #0]
 80079c8:	68d2      	ldr	r2, [r2, #12]
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6a1a      	ldr	r2, [r3, #32]
 80079d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10f      	bne.n	8007a00 <HAL_TIM_Base_Stop_IT+0x48>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6a1a      	ldr	r2, [r3, #32]
 80079e6:	f240 4344 	movw	r3, #1092	; 0x444
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d107      	bne.n	8007a00 <HAL_TIM_Base_Stop_IT+0x48>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	f022 0201 	bic.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop

08007a10 <HAL_TIM_Base_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to peripheral.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d101      	bne.n	8007a2e <HAL_TIM_Base_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e03a      	b.n	8007aa4 <HAL_TIM_Base_Start_DMA+0x94>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d10b      	bne.n	8007a52 <HAL_TIM_Base_Start_DMA+0x42>
  {
    if((pData == 0 ) && (Length > 0))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <HAL_TIM_Base_Start_DMA+0x3a>
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e02c      	b.n	8007aa4 <HAL_TIM_Base_Start_DMA+0x94>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  /* Set the DMA Period elapsed callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	69da      	ldr	r2, [r3, #28]
 8007a56:	f64a 437d 	movw	r3, #44157	; 0xac7d
 8007a5a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007a5e:	6293      	str	r3, [r2, #40]	; 0x28

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	f64a 3379 	movw	r3, #43897	; 0xab79
 8007a68:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007a6c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable the DMA channel */
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	69d8      	ldr	r0, [r3, #28]
 8007a72:	68b9      	ldr	r1, [r7, #8]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	332c      	adds	r3, #44	; 0x2c
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	f7f9 fba5 	bl	80011cc <HAL_DMA_Start_IT>

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	68d2      	ldr	r2, [r2, #12]
 8007a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a90:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	f042 0201 	orr.w	r2, r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	68d2      	ldr	r2, [r2, #12]
 8007abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ac2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6a1a      	ldr	r2, [r3, #32]
 8007aca:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ace:	4013      	ands	r3, r2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10f      	bne.n	8007af4 <HAL_TIM_Base_Stop_DMA+0x48>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6a1a      	ldr	r2, [r3, #32]
 8007ada:	f240 4344 	movw	r3, #1092	; 0x444
 8007ade:	4013      	ands	r3, r2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d107      	bne.n	8007af4 <HAL_TIM_Base_Stop_DMA+0x48>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	6812      	ldr	r2, [r2, #0]
 8007aee:	f022 0201 	bic.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop

08007b0c <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e01d      	b.n	8007b5a <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f846 	bl	8007bc4 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	f003 f8ba 	bl	800acc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop

08007b64 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   htim->State = HAL_TIM_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6a1a      	ldr	r2, [r3, #32]
 8007b7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10f      	bne.n	8007ba4 <HAL_TIM_OC_DeInit+0x40>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6a1a      	ldr	r2, [r3, #32]
 8007b8a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <HAL_TIM_OC_DeInit+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	6812      	ldr	r2, [r2, #0]
 8007b9e:	f022 0201 	bic.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f817 	bl	8007bd8 <HAL_TIM_OC_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop

08007bd8 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop

08007bec <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f003 fce4 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007c0c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d107      	bne.n	8007c24 <HAL_TIM_OC_Start+0x38>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop

08007c40 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f003 fcba 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007c60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d117      	bne.n	8007c98 <HAL_TIM_OC_Stop+0x58>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6a1a      	ldr	r2, [r3, #32]
 8007c6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c72:	4013      	ands	r3, r2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10f      	bne.n	8007c98 <HAL_TIM_OC_Stop+0x58>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6a1a      	ldr	r2, [r3, #32]
 8007c7e:	f240 4344 	movw	r3, #1092	; 0x444
 8007c82:	4013      	ands	r3, r2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d107      	bne.n	8007c98 <HAL_TIM_OC_Stop+0x58>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6a1a      	ldr	r2, [r3, #32]
 8007c9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10f      	bne.n	8007cc8 <HAL_TIM_OC_Stop+0x88>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6a1a      	ldr	r2, [r3, #32]
 8007cae:	f240 4344 	movw	r3, #1092	; 0x444
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d107      	bne.n	8007cc8 <HAL_TIM_OC_Stop+0x88>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6812      	ldr	r2, [r2, #0]
 8007cc0:	6812      	ldr	r2, [r2, #0]
 8007cc2:	f022 0201 	bic.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop

08007cd4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b0c      	cmp	r3, #12
 8007ce2:	d841      	bhi.n	8007d68 <HAL_TIM_OC_Start_IT+0x94>
 8007ce4:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <HAL_TIM_OC_Start_IT+0x18>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d21 	.word	0x08007d21
 8007cf0:	08007d69 	.word	0x08007d69
 8007cf4:	08007d69 	.word	0x08007d69
 8007cf8:	08007d69 	.word	0x08007d69
 8007cfc:	08007d33 	.word	0x08007d33
 8007d00:	08007d69 	.word	0x08007d69
 8007d04:	08007d69 	.word	0x08007d69
 8007d08:	08007d69 	.word	0x08007d69
 8007d0c:	08007d45 	.word	0x08007d45
 8007d10:	08007d69 	.word	0x08007d69
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007d69 	.word	0x08007d69
 8007d1c:	08007d57 	.word	0x08007d57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	68d2      	ldr	r2, [r2, #12]
 8007d2a:	f042 0202 	orr.w	r2, r2, #2
 8007d2e:	60da      	str	r2, [r3, #12]
    }
    break;
 8007d30:	e01b      	b.n	8007d6a <HAL_TIM_OC_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6812      	ldr	r2, [r2, #0]
 8007d3a:	68d2      	ldr	r2, [r2, #12]
 8007d3c:	f042 0204 	orr.w	r2, r2, #4
 8007d40:	60da      	str	r2, [r3, #12]
    }
    break;
 8007d42:	e012      	b.n	8007d6a <HAL_TIM_OC_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6812      	ldr	r2, [r2, #0]
 8007d4c:	68d2      	ldr	r2, [r2, #12]
 8007d4e:	f042 0208 	orr.w	r2, r2, #8
 8007d52:	60da      	str	r2, [r3, #12]
    }
    break;
 8007d54:	e009      	b.n	8007d6a <HAL_TIM_OC_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	68d2      	ldr	r2, [r2, #12]
 8007d60:	f042 0210 	orr.w	r2, r2, #16
 8007d64:	60da      	str	r2, [r3, #12]
    }
    break;
 8007d66:	e000      	b.n	8007d6a <HAL_TIM_OC_Start_IT+0x96>

    default:
    break;
 8007d68:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f003 fc2a 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007d80:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d107      	bne.n	8007d98 <HAL_TIM_OC_Start_IT+0xc4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6812      	ldr	r2, [r2, #0]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop

08007db4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b0c      	cmp	r3, #12
 8007dc2:	d841      	bhi.n	8007e48 <HAL_TIM_OC_Stop_IT+0x94>
 8007dc4:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <HAL_TIM_OC_Stop_IT+0x18>)
 8007dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007e01 	.word	0x08007e01
 8007dd0:	08007e49 	.word	0x08007e49
 8007dd4:	08007e49 	.word	0x08007e49
 8007dd8:	08007e49 	.word	0x08007e49
 8007ddc:	08007e13 	.word	0x08007e13
 8007de0:	08007e49 	.word	0x08007e49
 8007de4:	08007e49 	.word	0x08007e49
 8007de8:	08007e49 	.word	0x08007e49
 8007dec:	08007e25 	.word	0x08007e25
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e49 	.word	0x08007e49
 8007df8:	08007e49 	.word	0x08007e49
 8007dfc:	08007e37 	.word	0x08007e37
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	68d2      	ldr	r2, [r2, #12]
 8007e0a:	f022 0202 	bic.w	r2, r2, #2
 8007e0e:	60da      	str	r2, [r3, #12]
    }
    break;
 8007e10:	e01b      	b.n	8007e4a <HAL_TIM_OC_Stop_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	68d2      	ldr	r2, [r2, #12]
 8007e1c:	f022 0204 	bic.w	r2, r2, #4
 8007e20:	60da      	str	r2, [r3, #12]
    }
    break;
 8007e22:	e012      	b.n	8007e4a <HAL_TIM_OC_Stop_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6812      	ldr	r2, [r2, #0]
 8007e2c:	68d2      	ldr	r2, [r2, #12]
 8007e2e:	f022 0208 	bic.w	r2, r2, #8
 8007e32:	60da      	str	r2, [r3, #12]
    }
    break;
 8007e34:	e009      	b.n	8007e4a <HAL_TIM_OC_Stop_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6812      	ldr	r2, [r2, #0]
 8007e3e:	68d2      	ldr	r2, [r2, #12]
 8007e40:	f022 0210 	bic.w	r2, r2, #16
 8007e44:	60da      	str	r2, [r3, #12]
    }
    break;
 8007e46:	e000      	b.n	8007e4a <HAL_TIM_OC_Stop_IT+0x96>

    default:
    break;
 8007e48:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f003 fbba 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007e60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d117      	bne.n	8007e98 <HAL_TIM_OC_Stop_IT+0xe4>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6a1a      	ldr	r2, [r3, #32]
 8007e6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10f      	bne.n	8007e98 <HAL_TIM_OC_Stop_IT+0xe4>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a1a      	ldr	r2, [r3, #32]
 8007e7e:	f240 4344 	movw	r3, #1092	; 0x444
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <HAL_TIM_OC_Stop_IT+0xe4>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6812      	ldr	r2, [r2, #0]
 8007e90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6a1a      	ldr	r2, [r3, #32]
 8007e9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10f      	bne.n	8007ec8 <HAL_TIM_OC_Stop_IT+0x114>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6a1a      	ldr	r2, [r3, #32]
 8007eae:	f240 4344 	movw	r3, #1092	; 0x444
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d107      	bne.n	8007ec8 <HAL_TIM_OC_Stop_IT+0x114>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	f022 0201 	bic.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop

08007ed4 <HAL_TIM_OC_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d101      	bne.n	8007ef2 <HAL_TIM_OC_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e0d7      	b.n	80080a2 <HAL_TIM_OC_Start_DMA+0x1ce>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d10b      	bne.n	8007f16 <HAL_TIM_OC_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0 ) && (Length > 0))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_TIM_OC_Start_DMA+0x3a>
 8007f04:	887b      	ldrh	r3, [r7, #2]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <HAL_TIM_OC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e0c9      	b.n	80080a2 <HAL_TIM_OC_Start_DMA+0x1ce>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2202      	movs	r2, #2
 8007f12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  switch (Channel)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b0c      	cmp	r3, #12
 8007f1a:	f200 80a1 	bhi.w	8008060 <HAL_TIM_OC_Start_DMA+0x18c>
 8007f1e:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <HAL_TIM_OC_Start_DMA+0x50>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f59 	.word	0x08007f59
 8007f28:	08008061 	.word	0x08008061
 8007f2c:	08008061 	.word	0x08008061
 8007f30:	08008061 	.word	0x08008061
 8007f34:	08007f9b 	.word	0x08007f9b
 8007f38:	08008061 	.word	0x08008061
 8007f3c:	08008061 	.word	0x08008061
 8007f40:	08008061 	.word	0x08008061
 8007f44:	08007fdd 	.word	0x08007fdd
 8007f48:	08008061 	.word	0x08008061
 8007f4c:	08008061 	.word	0x08008061
 8007f50:	08008061 	.word	0x08008061
 8007f54:	0800801f 	.word	0x0800801f
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a1a      	ldr	r2, [r3, #32]
 8007f5c:	f64a 339d 	movw	r3, #43933	; 0xab9d
 8007f60:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007f64:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1a      	ldr	r2, [r3, #32]
 8007f6a:	f64a 3379 	movw	r3, #43897	; 0xab79
 8007f6e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007f72:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a18      	ldr	r0, [r3, #32]
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3334      	adds	r3, #52	; 0x34
 8007f80:	461a      	mov	r2, r3
 8007f82:	887b      	ldrh	r3, [r7, #2]
 8007f84:	f7f9 f922 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	6812      	ldr	r2, [r2, #0]
 8007f90:	68d2      	ldr	r2, [r2, #12]
 8007f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f96:	60da      	str	r2, [r3, #12]
    }
    break;
 8007f98:	e063      	b.n	8008062 <HAL_TIM_OC_Start_DMA+0x18e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f9e:	f64a 339d 	movw	r3, #43933	; 0xab9d
 8007fa2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007fa6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fac:	f64a 3379 	movw	r3, #43897	; 0xab79
 8007fb0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007fb4:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3338      	adds	r3, #56	; 0x38
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	887b      	ldrh	r3, [r7, #2]
 8007fc6:	f7f9 f901 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	68d2      	ldr	r2, [r2, #12]
 8007fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fd8:	60da      	str	r2, [r3, #12]
    }
    break;
 8007fda:	e042      	b.n	8008062 <HAL_TIM_OC_Start_DMA+0x18e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fe0:	f64a 339d 	movw	r3, #43933	; 0xab9d
 8007fe4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007fe8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fee:	f64a 3379 	movw	r3, #43897	; 0xab79
 8007ff2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007ff6:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	333c      	adds	r3, #60	; 0x3c
 8008004:	461a      	mov	r2, r3
 8008006:	887b      	ldrh	r3, [r7, #2]
 8008008:	f7f9 f8e0 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	68d2      	ldr	r2, [r2, #12]
 8008016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800801a:	60da      	str	r2, [r3, #12]
    }
    break;
 800801c:	e021      	b.n	8008062 <HAL_TIM_OC_Start_DMA+0x18e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008022:	f64a 339d 	movw	r3, #43933	; 0xab9d
 8008026:	f6c0 0300 	movt	r3, #2048	; 0x800
 800802a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008030:	f64a 3379 	movw	r3, #43897	; 0xab79
 8008034:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008038:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3340      	adds	r3, #64	; 0x40
 8008046:	461a      	mov	r2, r3
 8008048:	887b      	ldrh	r3, [r7, #2]
 800804a:	f7f9 f8bf 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	6812      	ldr	r2, [r2, #0]
 8008056:	68d2      	ldr	r2, [r2, #12]
 8008058:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800805c:	60da      	str	r2, [r3, #12]
    }
    break;
 800805e:	e000      	b.n	8008062 <HAL_TIM_OC_Start_DMA+0x18e>

    default:
    break;
 8008060:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	2201      	movs	r2, #1
 800806c:	f003 faae 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008078:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800807c:	429a      	cmp	r2, r3
 800807e:	d107      	bne.n	8008090 <HAL_TIM_OC_Start_DMA+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	6812      	ldr	r2, [r2, #0]
 8008088:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800808a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800808e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	6812      	ldr	r2, [r2, #0]
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	f042 0201 	orr.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop

080080ac <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b0c      	cmp	r3, #12
 80080ba:	d841      	bhi.n	8008140 <HAL_TIM_OC_Stop_DMA+0x94>
 80080bc:	a201      	add	r2, pc, #4	; (adr r2, 80080c4 <HAL_TIM_OC_Stop_DMA+0x18>)
 80080be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c2:	bf00      	nop
 80080c4:	080080f9 	.word	0x080080f9
 80080c8:	08008141 	.word	0x08008141
 80080cc:	08008141 	.word	0x08008141
 80080d0:	08008141 	.word	0x08008141
 80080d4:	0800810b 	.word	0x0800810b
 80080d8:	08008141 	.word	0x08008141
 80080dc:	08008141 	.word	0x08008141
 80080e0:	08008141 	.word	0x08008141
 80080e4:	0800811d 	.word	0x0800811d
 80080e8:	08008141 	.word	0x08008141
 80080ec:	08008141 	.word	0x08008141
 80080f0:	08008141 	.word	0x08008141
 80080f4:	0800812f 	.word	0x0800812f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	68d2      	ldr	r2, [r2, #12]
 8008102:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008106:	60da      	str	r2, [r3, #12]
    }
    break;
 8008108:	e01b      	b.n	8008142 <HAL_TIM_OC_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6812      	ldr	r2, [r2, #0]
 8008112:	68d2      	ldr	r2, [r2, #12]
 8008114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008118:	60da      	str	r2, [r3, #12]
    }
    break;
 800811a:	e012      	b.n	8008142 <HAL_TIM_OC_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	68d2      	ldr	r2, [r2, #12]
 8008126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800812a:	60da      	str	r2, [r3, #12]
    }
    break;
 800812c:	e009      	b.n	8008142 <HAL_TIM_OC_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6812      	ldr	r2, [r2, #0]
 8008136:	68d2      	ldr	r2, [r2, #12]
 8008138:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800813c:	60da      	str	r2, [r3, #12]
    }
    break;
 800813e:	e000      	b.n	8008142 <HAL_TIM_OC_Stop_DMA+0x96>

    default:
    break;
 8008140:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4618      	mov	r0, r3
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	f003 fa3e 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008158:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800815c:	429a      	cmp	r2, r3
 800815e:	d117      	bne.n	8008190 <HAL_TIM_OC_Stop_DMA+0xe4>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6a1a      	ldr	r2, [r3, #32]
 8008166:	f241 1311 	movw	r3, #4369	; 0x1111
 800816a:	4013      	ands	r3, r2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10f      	bne.n	8008190 <HAL_TIM_OC_Stop_DMA+0xe4>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6a1a      	ldr	r2, [r3, #32]
 8008176:	f240 4344 	movw	r3, #1092	; 0x444
 800817a:	4013      	ands	r3, r2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d107      	bne.n	8008190 <HAL_TIM_OC_Stop_DMA+0xe4>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	6812      	ldr	r2, [r2, #0]
 8008188:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800818a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800818e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6a1a      	ldr	r2, [r3, #32]
 8008196:	f241 1311 	movw	r3, #4369	; 0x1111
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10f      	bne.n	80081c0 <HAL_TIM_OC_Stop_DMA+0x114>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6a1a      	ldr	r2, [r3, #32]
 80081a6:	f240 4344 	movw	r3, #1092	; 0x444
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d107      	bne.n	80081c0 <HAL_TIM_OC_Stop_DMA+0x114>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	6812      	ldr	r2, [r2, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop

080081d4 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e01d      	b.n	8008222 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f846 	bl	800828c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3304      	adds	r3, #4
 8008210:	4610      	mov	r0, r2
 8008212:	4619      	mov	r1, r3
 8008214:	f002 fd56 	bl	800acc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop

0800822c <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6a1a      	ldr	r2, [r3, #32]
 8008242:	f241 1311 	movw	r3, #4369	; 0x1111
 8008246:	4013      	ands	r3, r2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10f      	bne.n	800826c <HAL_TIM_PWM_DeInit+0x40>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6a1a      	ldr	r2, [r3, #32]
 8008252:	f240 4344 	movw	r3, #1092	; 0x444
 8008256:	4013      	ands	r3, r2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d107      	bne.n	800826c <HAL_TIM_PWM_DeInit+0x40>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6812      	ldr	r2, [r2, #0]
 8008264:	6812      	ldr	r2, [r2, #0]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f817 	bl	80082a0 <HAL_TIM_PWM_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop

080082b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f003 f980 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80082d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80082d8:	429a      	cmp	r2, r3
 80082da:	d107      	bne.n	80082ec <HAL_TIM_PWM_Start+0x38>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80082e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	f042 0201 	orr.w	r2, r2, #1
 80082fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop

08008308 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4618      	mov	r0, r3
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	2200      	movs	r2, #0
 800831c:	f003 f956 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008328:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800832c:	429a      	cmp	r2, r3
 800832e:	d117      	bne.n	8008360 <HAL_TIM_PWM_Stop+0x58>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6a1a      	ldr	r2, [r3, #32]
 8008336:	f241 1311 	movw	r3, #4369	; 0x1111
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10f      	bne.n	8008360 <HAL_TIM_PWM_Stop+0x58>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6a1a      	ldr	r2, [r3, #32]
 8008346:	f240 4344 	movw	r3, #1092	; 0x444
 800834a:	4013      	ands	r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d107      	bne.n	8008360 <HAL_TIM_PWM_Stop+0x58>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800835a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800835e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6a1a      	ldr	r2, [r3, #32]
 8008366:	f241 1311 	movw	r3, #4369	; 0x1111
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10f      	bne.n	8008390 <HAL_TIM_PWM_Stop+0x88>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6a1a      	ldr	r2, [r3, #32]
 8008376:	f240 4344 	movw	r3, #1092	; 0x444
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d107      	bne.n	8008390 <HAL_TIM_PWM_Stop+0x88>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	f022 0201 	bic.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop

080083a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b0c      	cmp	r3, #12
 80083b2:	d841      	bhi.n	8008438 <HAL_TIM_PWM_Start_IT+0x94>
 80083b4:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <HAL_TIM_PWM_Start_IT+0x18>)
 80083b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ba:	bf00      	nop
 80083bc:	080083f1 	.word	0x080083f1
 80083c0:	08008439 	.word	0x08008439
 80083c4:	08008439 	.word	0x08008439
 80083c8:	08008439 	.word	0x08008439
 80083cc:	08008403 	.word	0x08008403
 80083d0:	08008439 	.word	0x08008439
 80083d4:	08008439 	.word	0x08008439
 80083d8:	08008439 	.word	0x08008439
 80083dc:	08008415 	.word	0x08008415
 80083e0:	08008439 	.word	0x08008439
 80083e4:	08008439 	.word	0x08008439
 80083e8:	08008439 	.word	0x08008439
 80083ec:	08008427 	.word	0x08008427
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	68d2      	ldr	r2, [r2, #12]
 80083fa:	f042 0202 	orr.w	r2, r2, #2
 80083fe:	60da      	str	r2, [r3, #12]
    }
    break;
 8008400:	e01b      	b.n	800843a <HAL_TIM_PWM_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	68d2      	ldr	r2, [r2, #12]
 800840c:	f042 0204 	orr.w	r2, r2, #4
 8008410:	60da      	str	r2, [r3, #12]
    }
    break;
 8008412:	e012      	b.n	800843a <HAL_TIM_PWM_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	68d2      	ldr	r2, [r2, #12]
 800841e:	f042 0208 	orr.w	r2, r2, #8
 8008422:	60da      	str	r2, [r3, #12]
    }
    break;
 8008424:	e009      	b.n	800843a <HAL_TIM_PWM_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6812      	ldr	r2, [r2, #0]
 800842e:	68d2      	ldr	r2, [r2, #12]
 8008430:	f042 0210 	orr.w	r2, r2, #16
 8008434:	60da      	str	r2, [r3, #12]
    }
    break;
 8008436:	e000      	b.n	800843a <HAL_TIM_PWM_Start_IT+0x96>

    default:
    break;
 8008438:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	2201      	movs	r2, #1
 8008444:	f003 f8c2 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008450:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008454:	429a      	cmp	r2, r3
 8008456:	d107      	bne.n	8008468 <HAL_TIM_PWM_Start_IT+0xc4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6812      	ldr	r2, [r2, #0]
 8008460:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008466:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	6812      	ldr	r2, [r2, #0]
 8008472:	f042 0201 	orr.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop

08008484 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b0c      	cmp	r3, #12
 8008492:	d841      	bhi.n	8008518 <HAL_TIM_PWM_Stop_IT+0x94>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <HAL_TIM_PWM_Stop_IT+0x18>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084d1 	.word	0x080084d1
 80084a0:	08008519 	.word	0x08008519
 80084a4:	08008519 	.word	0x08008519
 80084a8:	08008519 	.word	0x08008519
 80084ac:	080084e3 	.word	0x080084e3
 80084b0:	08008519 	.word	0x08008519
 80084b4:	08008519 	.word	0x08008519
 80084b8:	08008519 	.word	0x08008519
 80084bc:	080084f5 	.word	0x080084f5
 80084c0:	08008519 	.word	0x08008519
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008519 	.word	0x08008519
 80084cc:	08008507 	.word	0x08008507
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	68d2      	ldr	r2, [r2, #12]
 80084da:	f022 0202 	bic.w	r2, r2, #2
 80084de:	60da      	str	r2, [r3, #12]
    }
    break;
 80084e0:	e01b      	b.n	800851a <HAL_TIM_PWM_Stop_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	68d2      	ldr	r2, [r2, #12]
 80084ec:	f022 0204 	bic.w	r2, r2, #4
 80084f0:	60da      	str	r2, [r3, #12]
    }
    break;
 80084f2:	e012      	b.n	800851a <HAL_TIM_PWM_Stop_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6812      	ldr	r2, [r2, #0]
 80084fc:	68d2      	ldr	r2, [r2, #12]
 80084fe:	f022 0208 	bic.w	r2, r2, #8
 8008502:	60da      	str	r2, [r3, #12]
    }
    break;
 8008504:	e009      	b.n	800851a <HAL_TIM_PWM_Stop_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	6812      	ldr	r2, [r2, #0]
 800850e:	68d2      	ldr	r2, [r2, #12]
 8008510:	f022 0210 	bic.w	r2, r2, #16
 8008514:	60da      	str	r2, [r3, #12]
    }
    break;
 8008516:	e000      	b.n	800851a <HAL_TIM_PWM_Stop_IT+0x96>

    default:
    break;
 8008518:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	2200      	movs	r2, #0
 8008524:	f003 f852 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008530:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008534:	429a      	cmp	r2, r3
 8008536:	d117      	bne.n	8008568 <HAL_TIM_PWM_Stop_IT+0xe4>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a1a      	ldr	r2, [r3, #32]
 800853e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008542:	4013      	ands	r3, r2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10f      	bne.n	8008568 <HAL_TIM_PWM_Stop_IT+0xe4>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6a1a      	ldr	r2, [r3, #32]
 800854e:	f240 4344 	movw	r3, #1092	; 0x444
 8008552:	4013      	ands	r3, r2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d107      	bne.n	8008568 <HAL_TIM_PWM_Stop_IT+0xe4>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6812      	ldr	r2, [r2, #0]
 8008560:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008566:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6a1a      	ldr	r2, [r3, #32]
 800856e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008572:	4013      	ands	r3, r2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10f      	bne.n	8008598 <HAL_TIM_PWM_Stop_IT+0x114>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6a1a      	ldr	r2, [r3, #32]
 800857e:	f240 4344 	movw	r3, #1092	; 0x444
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d107      	bne.n	8008598 <HAL_TIM_PWM_Stop_IT+0x114>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	f022 0201 	bic.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop

080085a4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d101      	bne.n	80085c2 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 80085be:	2302      	movs	r3, #2
 80085c0:	e0d7      	b.n	8008772 <HAL_TIM_PWM_Start_DMA+0x1ce>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d10b      	bne.n	80085e6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0 ) && (Length > 0))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d104      	bne.n	80085de <HAL_TIM_PWM_Start_DMA+0x3a>
 80085d4:	887b      	ldrh	r3, [r7, #2]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e0c9      	b.n	8008772 <HAL_TIM_PWM_Start_DMA+0x1ce>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  switch (Channel)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b0c      	cmp	r3, #12
 80085ea:	f200 80a1 	bhi.w	8008730 <HAL_TIM_PWM_Start_DMA+0x18c>
 80085ee:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <HAL_TIM_PWM_Start_DMA+0x50>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008629 	.word	0x08008629
 80085f8:	08008731 	.word	0x08008731
 80085fc:	08008731 	.word	0x08008731
 8008600:	08008731 	.word	0x08008731
 8008604:	0800866b 	.word	0x0800866b
 8008608:	08008731 	.word	0x08008731
 800860c:	08008731 	.word	0x08008731
 8008610:	08008731 	.word	0x08008731
 8008614:	080086ad 	.word	0x080086ad
 8008618:	08008731 	.word	0x08008731
 800861c:	08008731 	.word	0x08008731
 8008620:	08008731 	.word	0x08008731
 8008624:	080086ef 	.word	0x080086ef
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1a      	ldr	r2, [r3, #32]
 800862c:	f64a 339d 	movw	r3, #43933	; 0xab9d
 8008630:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008634:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a1a      	ldr	r2, [r3, #32]
 800863a:	f64a 3379 	movw	r3, #43897	; 0xab79
 800863e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008642:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a18      	ldr	r0, [r3, #32]
 8008648:	6879      	ldr	r1, [r7, #4]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3334      	adds	r3, #52	; 0x34
 8008650:	461a      	mov	r2, r3
 8008652:	887b      	ldrh	r3, [r7, #2]
 8008654:	f7f8 fdba 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	6812      	ldr	r2, [r2, #0]
 8008660:	68d2      	ldr	r2, [r2, #12]
 8008662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008666:	60da      	str	r2, [r3, #12]
    }
    break;
 8008668:	e063      	b.n	8008732 <HAL_TIM_PWM_Start_DMA+0x18e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800866e:	f64a 339d 	movw	r3, #43933	; 0xab9d
 8008672:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008676:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800867c:	f64a 3379 	movw	r3, #43897	; 0xab79
 8008680:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008684:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3338      	adds	r3, #56	; 0x38
 8008692:	461a      	mov	r2, r3
 8008694:	887b      	ldrh	r3, [r7, #2]
 8008696:	f7f8 fd99 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	68d2      	ldr	r2, [r2, #12]
 80086a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086a8:	60da      	str	r2, [r3, #12]
    }
    break;
 80086aa:	e042      	b.n	8008732 <HAL_TIM_PWM_Start_DMA+0x18e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086b0:	f64a 339d 	movw	r3, #43933	; 0xab9d
 80086b4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80086b8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086be:	f64a 3379 	movw	r3, #43897	; 0xab79
 80086c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80086c6:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	333c      	adds	r3, #60	; 0x3c
 80086d4:	461a      	mov	r2, r3
 80086d6:	887b      	ldrh	r3, [r7, #2]
 80086d8:	f7f8 fd78 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	68d2      	ldr	r2, [r2, #12]
 80086e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086ea:	60da      	str	r2, [r3, #12]
    }
    break;
 80086ec:	e021      	b.n	8008732 <HAL_TIM_PWM_Start_DMA+0x18e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f2:	f64a 339d 	movw	r3, #43933	; 0xab9d
 80086f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80086fa:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008700:	f64a 3379 	movw	r3, #43897	; 0xab79
 8008704:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008708:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3340      	adds	r3, #64	; 0x40
 8008716:	461a      	mov	r2, r3
 8008718:	887b      	ldrh	r3, [r7, #2]
 800871a:	f7f8 fd57 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	68d2      	ldr	r2, [r2, #12]
 8008728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800872c:	60da      	str	r2, [r3, #12]
    }
    break;
 800872e:	e000      	b.n	8008732 <HAL_TIM_PWM_Start_DMA+0x18e>

    default:
    break;
 8008730:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	2201      	movs	r2, #1
 800873c:	f002 ff46 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008748:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800874c:	429a      	cmp	r2, r3
 800874e:	d107      	bne.n	8008760 <HAL_TIM_PWM_Start_DMA+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	6812      	ldr	r2, [r2, #0]
 8008758:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800875a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800875e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	f042 0201 	orr.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop

0800877c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b0c      	cmp	r3, #12
 800878a:	d841      	bhi.n	8008810 <HAL_TIM_PWM_Stop_DMA+0x94>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087c9 	.word	0x080087c9
 8008798:	08008811 	.word	0x08008811
 800879c:	08008811 	.word	0x08008811
 80087a0:	08008811 	.word	0x08008811
 80087a4:	080087db 	.word	0x080087db
 80087a8:	08008811 	.word	0x08008811
 80087ac:	08008811 	.word	0x08008811
 80087b0:	08008811 	.word	0x08008811
 80087b4:	080087ed 	.word	0x080087ed
 80087b8:	08008811 	.word	0x08008811
 80087bc:	08008811 	.word	0x08008811
 80087c0:	08008811 	.word	0x08008811
 80087c4:	080087ff 	.word	0x080087ff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	6812      	ldr	r2, [r2, #0]
 80087d0:	68d2      	ldr	r2, [r2, #12]
 80087d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087d6:	60da      	str	r2, [r3, #12]
    }
    break;
 80087d8:	e01b      	b.n	8008812 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	68d2      	ldr	r2, [r2, #12]
 80087e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e8:	60da      	str	r2, [r3, #12]
    }
    break;
 80087ea:	e012      	b.n	8008812 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6812      	ldr	r2, [r2, #0]
 80087f4:	68d2      	ldr	r2, [r2, #12]
 80087f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087fa:	60da      	str	r2, [r3, #12]
    }
    break;
 80087fc:	e009      	b.n	8008812 <HAL_TIM_PWM_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	68d2      	ldr	r2, [r2, #12]
 8008808:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800880c:	60da      	str	r2, [r3, #12]
    }
    break;
 800880e:	e000      	b.n	8008812 <HAL_TIM_PWM_Stop_DMA+0x96>

    default:
    break;
 8008810:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	2200      	movs	r2, #0
 800881c:	f002 fed6 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008828:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800882c:	429a      	cmp	r2, r3
 800882e:	d117      	bne.n	8008860 <HAL_TIM_PWM_Stop_DMA+0xe4>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6a1a      	ldr	r2, [r3, #32]
 8008836:	f241 1311 	movw	r3, #4369	; 0x1111
 800883a:	4013      	ands	r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10f      	bne.n	8008860 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6a1a      	ldr	r2, [r3, #32]
 8008846:	f240 4344 	movw	r3, #1092	; 0x444
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d107      	bne.n	8008860 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	6812      	ldr	r2, [r2, #0]
 8008858:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800885a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800885e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6a1a      	ldr	r2, [r3, #32]
 8008866:	f241 1311 	movw	r3, #4369	; 0x1111
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10f      	bne.n	8008890 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6a1a      	ldr	r2, [r3, #32]
 8008876:	f240 4344 	movw	r3, #1092	; 0x444
 800887a:	4013      	ands	r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d107      	bne.n	8008890 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	f022 0201 	bic.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop

080088a4 <HAL_TIM_IC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e01d      	b.n	80088f2 <HAL_TIM_IC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f846 	bl	800895c <HAL_TIM_IC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3304      	adds	r3, #4
 80088e0:	4610      	mov	r0, r2
 80088e2:	4619      	mov	r1, r3
 80088e4:	f002 f9ee 	bl	800acc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop

080088fc <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim : TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6a1a      	ldr	r2, [r3, #32]
 8008912:	f241 1311 	movw	r3, #4369	; 0x1111
 8008916:	4013      	ands	r3, r2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10f      	bne.n	800893c <HAL_TIM_IC_DeInit+0x40>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a1a      	ldr	r2, [r3, #32]
 8008922:	f240 4344 	movw	r3, #1092	; 0x444
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d107      	bne.n	800893c <HAL_TIM_IC_DeInit+0x40>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6812      	ldr	r2, [r2, #0]
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	f022 0201 	bic.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f817 	bl	8008970 <HAL_TIM_IC_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop

08008970 <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop

08008984 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	2201      	movs	r2, #1
 8008998:	f002 fe18 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6812      	ldr	r2, [r2, #0]
 80089a4:	6812      	ldr	r2, [r2, #0]
 80089a6:	f042 0201 	orr.w	r2, r2, #1
 80089aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop

080089b8 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4618      	mov	r0, r3
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f002 fdfe 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6a1a      	ldr	r2, [r3, #32]
 80089d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10f      	bne.n	8008a00 <HAL_TIM_IC_Stop+0x48>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6a1a      	ldr	r2, [r3, #32]
 80089e6:	f240 4344 	movw	r3, #1092	; 0x444
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <HAL_TIM_IC_Stop+0x48>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	f022 0201 	bic.w	r2, r2, #1
 80089fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop

08008a0c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b0c      	cmp	r3, #12
 8008a1a:	d841      	bhi.n	8008aa0 <HAL_TIM_IC_Start_IT+0x94>
 8008a1c:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <HAL_TIM_IC_Start_IT+0x18>)
 8008a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a22:	bf00      	nop
 8008a24:	08008a59 	.word	0x08008a59
 8008a28:	08008aa1 	.word	0x08008aa1
 8008a2c:	08008aa1 	.word	0x08008aa1
 8008a30:	08008aa1 	.word	0x08008aa1
 8008a34:	08008a6b 	.word	0x08008a6b
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008aa1 	.word	0x08008aa1
 8008a40:	08008aa1 	.word	0x08008aa1
 8008a44:	08008a7d 	.word	0x08008a7d
 8008a48:	08008aa1 	.word	0x08008aa1
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008aa1 	.word	0x08008aa1
 8008a54:	08008a8f 	.word	0x08008a8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6812      	ldr	r2, [r2, #0]
 8008a60:	68d2      	ldr	r2, [r2, #12]
 8008a62:	f042 0202 	orr.w	r2, r2, #2
 8008a66:	60da      	str	r2, [r3, #12]
    }
    break;
 8008a68:	e01b      	b.n	8008aa2 <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	6812      	ldr	r2, [r2, #0]
 8008a72:	68d2      	ldr	r2, [r2, #12]
 8008a74:	f042 0204 	orr.w	r2, r2, #4
 8008a78:	60da      	str	r2, [r3, #12]
    }
    break;
 8008a7a:	e012      	b.n	8008aa2 <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	68d2      	ldr	r2, [r2, #12]
 8008a86:	f042 0208 	orr.w	r2, r2, #8
 8008a8a:	60da      	str	r2, [r3, #12]
    }
    break;
 8008a8c:	e009      	b.n	8008aa2 <HAL_TIM_IC_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6812      	ldr	r2, [r2, #0]
 8008a96:	68d2      	ldr	r2, [r2, #12]
 8008a98:	f042 0210 	orr.w	r2, r2, #16
 8008a9c:	60da      	str	r2, [r3, #12]
    }
    break;
 8008a9e:	e000      	b.n	8008aa2 <HAL_TIM_IC_Start_IT+0x96>

    default:
    break;
 8008aa0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f002 fd8e 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	6812      	ldr	r2, [r2, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop

08008acc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b0c      	cmp	r3, #12
 8008ada:	d841      	bhi.n	8008b60 <HAL_TIM_IC_Stop_IT+0x94>
 8008adc:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <HAL_TIM_IC_Stop_IT+0x18>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008b19 	.word	0x08008b19
 8008ae8:	08008b61 	.word	0x08008b61
 8008aec:	08008b61 	.word	0x08008b61
 8008af0:	08008b61 	.word	0x08008b61
 8008af4:	08008b2b 	.word	0x08008b2b
 8008af8:	08008b61 	.word	0x08008b61
 8008afc:	08008b61 	.word	0x08008b61
 8008b00:	08008b61 	.word	0x08008b61
 8008b04:	08008b3d 	.word	0x08008b3d
 8008b08:	08008b61 	.word	0x08008b61
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008b61 	.word	0x08008b61
 8008b14:	08008b4f 	.word	0x08008b4f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6812      	ldr	r2, [r2, #0]
 8008b20:	68d2      	ldr	r2, [r2, #12]
 8008b22:	f022 0202 	bic.w	r2, r2, #2
 8008b26:	60da      	str	r2, [r3, #12]
    }
    break;
 8008b28:	e01b      	b.n	8008b62 <HAL_TIM_IC_Stop_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	68d2      	ldr	r2, [r2, #12]
 8008b34:	f022 0204 	bic.w	r2, r2, #4
 8008b38:	60da      	str	r2, [r3, #12]
    }
    break;
 8008b3a:	e012      	b.n	8008b62 <HAL_TIM_IC_Stop_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	68d2      	ldr	r2, [r2, #12]
 8008b46:	f022 0208 	bic.w	r2, r2, #8
 8008b4a:	60da      	str	r2, [r3, #12]
    }
    break;
 8008b4c:	e009      	b.n	8008b62 <HAL_TIM_IC_Stop_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	68d2      	ldr	r2, [r2, #12]
 8008b58:	f022 0210 	bic.w	r2, r2, #16
 8008b5c:	60da      	str	r2, [r3, #12]
    }
    break;
 8008b5e:	e000      	b.n	8008b62 <HAL_TIM_IC_Stop_IT+0x96>

    default:
    break;
 8008b60:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f002 fd2e 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6a1a      	ldr	r2, [r3, #32]
 8008b76:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10f      	bne.n	8008ba0 <HAL_TIM_IC_Stop_IT+0xd4>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	f240 4344 	movw	r3, #1092	; 0x444
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d107      	bne.n	8008ba0 <HAL_TIM_IC_Stop_IT+0xd4>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	6812      	ldr	r2, [r2, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop

08008bac <HAL_TIM_IC_Start_DMA>:
  * @param  pData : The destination Buffer address.
  * @param  Length : The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d101      	bne.n	8008bca <HAL_TIM_IC_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e0c7      	b.n	8008d5a <HAL_TIM_IC_Start_DMA+0x1ae>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d10b      	bne.n	8008bee <HAL_TIM_IC_Start_DMA+0x42>
  {
    if((pData == 0 ) && (Length > 0))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <HAL_TIM_IC_Start_DMA+0x3a>
 8008bdc:	887b      	ldrh	r3, [r7, #2]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e0b9      	b.n	8008d5a <HAL_TIM_IC_Start_DMA+0x1ae>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  switch (Channel)
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b0c      	cmp	r3, #12
 8008bf2:	f200 80a1 	bhi.w	8008d38 <HAL_TIM_IC_Start_DMA+0x18c>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <HAL_TIM_IC_Start_DMA+0x50>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c31 	.word	0x08008c31
 8008c00:	08008d39 	.word	0x08008d39
 8008c04:	08008d39 	.word	0x08008d39
 8008c08:	08008d39 	.word	0x08008d39
 8008c0c:	08008c73 	.word	0x08008c73
 8008c10:	08008d39 	.word	0x08008d39
 8008c14:	08008d39 	.word	0x08008d39
 8008c18:	08008d39 	.word	0x08008d39
 8008c1c:	08008cb5 	.word	0x08008cb5
 8008c20:	08008d39 	.word	0x08008d39
 8008c24:	08008d39 	.word	0x08008d39
 8008c28:	08008d39 	.word	0x08008d39
 8008c2c:	08008cf7 	.word	0x08008cf7
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a1a      	ldr	r2, [r3, #32]
 8008c34:	f64a 430d 	movw	r3, #44045	; 0xac0d
 8008c38:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008c3c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a1a      	ldr	r2, [r3, #32]
 8008c42:	f64a 3379 	movw	r3, #43897	; 0xab79
 8008c46:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008c4a:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a18      	ldr	r0, [r3, #32]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3334      	adds	r3, #52	; 0x34
 8008c56:	4619      	mov	r1, r3
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	887b      	ldrh	r3, [r7, #2]
 8008c5c:	f7f8 fab6 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	6812      	ldr	r2, [r2, #0]
 8008c68:	68d2      	ldr	r2, [r2, #12]
 8008c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c6e:	60da      	str	r2, [r3, #12]
    }
    break;
 8008c70:	e063      	b.n	8008d3a <HAL_TIM_IC_Start_DMA+0x18e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c76:	f64a 430d 	movw	r3, #44045	; 0xac0d
 8008c7a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008c7e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c84:	f64a 3379 	movw	r3, #43897	; 0xab79
 8008c88:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008c8c:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3338      	adds	r3, #56	; 0x38
 8008c98:	4619      	mov	r1, r3
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	887b      	ldrh	r3, [r7, #2]
 8008c9e:	f7f8 fa95 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	68d2      	ldr	r2, [r2, #12]
 8008cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cb0:	60da      	str	r2, [r3, #12]
    }
    break;
 8008cb2:	e042      	b.n	8008d3a <HAL_TIM_IC_Start_DMA+0x18e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cb8:	f64a 430d 	movw	r3, #44045	; 0xac0d
 8008cbc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008cc0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cc6:	f64a 3379 	movw	r3, #43897	; 0xab79
 8008cca:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008cce:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	333c      	adds	r3, #60	; 0x3c
 8008cda:	4619      	mov	r1, r3
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	887b      	ldrh	r3, [r7, #2]
 8008ce0:	f7f8 fa74 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	6812      	ldr	r2, [r2, #0]
 8008cec:	68d2      	ldr	r2, [r2, #12]
 8008cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cf2:	60da      	str	r2, [r3, #12]
    }
    break;
 8008cf4:	e021      	b.n	8008d3a <HAL_TIM_IC_Start_DMA+0x18e>

    case TIM_CHANNEL_4:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfa:	f64a 430d 	movw	r3, #44045	; 0xac0d
 8008cfe:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008d02:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d08:	f64a 3379 	movw	r3, #43897	; 0xab79
 8008d0c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008d10:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3340      	adds	r3, #64	; 0x40
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	887b      	ldrh	r3, [r7, #2]
 8008d22:	f7f8 fa53 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	68d2      	ldr	r2, [r2, #12]
 8008d30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d34:	60da      	str	r2, [r3, #12]
    }
    break;
 8008d36:	e000      	b.n	8008d3a <HAL_TIM_IC_Start_DMA+0x18e>

    default:
    break;
 8008d38:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f002 fc42 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	6812      	ldr	r2, [r2, #0]
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	f042 0201 	orr.w	r2, r2, #1
 8008d56:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop

08008d64 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b0c      	cmp	r3, #12
 8008d72:	d841      	bhi.n	8008df8 <HAL_TIM_IC_Stop_DMA+0x94>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <HAL_TIM_IC_Stop_DMA+0x18>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008db1 	.word	0x08008db1
 8008d80:	08008df9 	.word	0x08008df9
 8008d84:	08008df9 	.word	0x08008df9
 8008d88:	08008df9 	.word	0x08008df9
 8008d8c:	08008dc3 	.word	0x08008dc3
 8008d90:	08008df9 	.word	0x08008df9
 8008d94:	08008df9 	.word	0x08008df9
 8008d98:	08008df9 	.word	0x08008df9
 8008d9c:	08008dd5 	.word	0x08008dd5
 8008da0:	08008df9 	.word	0x08008df9
 8008da4:	08008df9 	.word	0x08008df9
 8008da8:	08008df9 	.word	0x08008df9
 8008dac:	08008de7 	.word	0x08008de7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	6812      	ldr	r2, [r2, #0]
 8008db8:	68d2      	ldr	r2, [r2, #12]
 8008dba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008dbe:	60da      	str	r2, [r3, #12]
    }
    break;
 8008dc0:	e01b      	b.n	8008dfa <HAL_TIM_IC_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6812      	ldr	r2, [r2, #0]
 8008dca:	68d2      	ldr	r2, [r2, #12]
 8008dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dd0:	60da      	str	r2, [r3, #12]
    }
    break;
 8008dd2:	e012      	b.n	8008dfa <HAL_TIM_IC_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6812      	ldr	r2, [r2, #0]
 8008ddc:	68d2      	ldr	r2, [r2, #12]
 8008dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008de2:	60da      	str	r2, [r3, #12]
    }
    break;
 8008de4:	e009      	b.n	8008dfa <HAL_TIM_IC_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6812      	ldr	r2, [r2, #0]
 8008dee:	68d2      	ldr	r2, [r2, #12]
 8008df0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008df4:	60da      	str	r2, [r3, #12]
    }
    break;
 8008df6:	e000      	b.n	8008dfa <HAL_TIM_IC_Stop_DMA+0x96>

    default:
    break;
 8008df8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f002 fbe2 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6a1a      	ldr	r2, [r3, #32]
 8008e0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e12:	4013      	ands	r3, r2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10f      	bne.n	8008e38 <HAL_TIM_IC_Stop_DMA+0xd4>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6a1a      	ldr	r2, [r3, #32]
 8008e1e:	f240 4344 	movw	r3, #1092	; 0x444
 8008e22:	4013      	ands	r3, r2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d107      	bne.n	8008e38 <HAL_TIM_IC_Stop_DMA+0xd4>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6812      	ldr	r2, [r2, #0]
 8008e30:	6812      	ldr	r2, [r2, #0]
 8008e32:	f022 0201 	bic.w	r2, r2, #1
 8008e36:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop

08008e4c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses wil be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e02d      	b.n	8008ebc <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));

  if(htim->State == HAL_TIM_STATE_RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f855 	bl	8008f24 <HAL_TIM_OnePulse_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3304      	adds	r3, #4
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f001 ff19 	bl	800acc4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	f022 0208 	bic.w	r2, r2, #8
 8008ea0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6812      	ldr	r2, [r2, #0]
 8008eaa:	6811      	ldr	r1, [r2, #0]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse 
  * @param  htim : TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6a1a      	ldr	r2, [r3, #32]
 8008eda:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ede:	4013      	ands	r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10f      	bne.n	8008f04 <HAL_TIM_OnePulse_DeInit+0x40>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6a1a      	ldr	r2, [r3, #32]
 8008eea:	f240 4344 	movw	r3, #1092	; 0x444
 8008eee:	4013      	ands	r3, r2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d107      	bne.n	8008f04 <HAL_TIM_OnePulse_DeInit+0x40>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	f022 0201 	bic.w	r2, r2, #1
 8008f02:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f817 	bl	8008f38 <HAL_TIM_OnePulse_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop

08008f38 <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop

08008f4c <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 

    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f002 fb34 	bl	800b5cc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f002 fb2d 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008f7a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d107      	bne.n	8008f92 <HAL_TIM_OnePulse_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	6812      	ldr	r2, [r2, #0]
 8008f8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008f8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	2100      	movs	r1, #0
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f002 fb0c 	bl	800b5cc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	2104      	movs	r1, #4
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f002 fb05 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008fca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d117      	bne.n	8009002 <HAL_TIM_OnePulse_Stop+0x66>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6a1a      	ldr	r2, [r3, #32]
 8008fd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fdc:	4013      	ands	r3, r2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10f      	bne.n	8009002 <HAL_TIM_OnePulse_Stop+0x66>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6a1a      	ldr	r2, [r3, #32]
 8008fe8:	f240 4344 	movw	r3, #1092	; 0x444
 8008fec:	4013      	ands	r3, r2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d107      	bne.n	8009002 <HAL_TIM_OnePulse_Stop+0x66>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6812      	ldr	r2, [r2, #0]
 8008ffa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6a1a      	ldr	r2, [r3, #32]
 8009008:	f241 1311 	movw	r3, #4369	; 0x1111
 800900c:	4013      	ands	r3, r2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10f      	bne.n	8009032 <HAL_TIM_OnePulse_Stop+0x96>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6a1a      	ldr	r2, [r3, #32]
 8009018:	f240 4344 	movw	r3, #1092	; 0x444
 800901c:	4013      	ands	r3, r2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d107      	bne.n	8009032 <HAL_TIM_OnePulse_Stop+0x96>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	6812      	ldr	r2, [r2, #0]
 800902a:	6812      	ldr	r2, [r2, #0]
 800902c:	f022 0201 	bic.w	r2, r2, #1
 8009030:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]

    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	6812      	ldr	r2, [r2, #0]
 800904e:	68d2      	ldr	r2, [r2, #12]
 8009050:	f042 0202 	orr.w	r2, r2, #2
 8009054:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	6812      	ldr	r2, [r2, #0]
 800905e:	68d2      	ldr	r2, [r2, #12]
 8009060:	f042 0204 	orr.w	r2, r2, #4
 8009064:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4618      	mov	r0, r3
 800906c:	2100      	movs	r1, #0
 800906e:	2201      	movs	r2, #1
 8009070:	f002 faac 	bl	800b5cc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	2104      	movs	r1, #4
 800907c:	2201      	movs	r2, #1
 800907e:	f002 faa5 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800908a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800908e:	429a      	cmp	r2, r3
 8009090:	d107      	bne.n	80090a2 <HAL_TIM_OnePulse_Start_IT+0x66>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6812      	ldr	r2, [r2, #0]
 800909a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800909c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	68d2      	ldr	r2, [r2, #12]
 80090c0:	f022 0202 	bic.w	r2, r2, #2
 80090c4:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6812      	ldr	r2, [r2, #0]
 80090ce:	68d2      	ldr	r2, [r2, #12]
 80090d0:	f022 0204 	bic.w	r2, r2, #4
 80090d4:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels 
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	2100      	movs	r1, #0
 80090de:	2200      	movs	r2, #0
 80090e0:	f002 fa74 	bl	800b5cc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	2104      	movs	r1, #4
 80090ec:	2200      	movs	r2, #0
 80090ee:	f002 fa6d 	bl	800b5cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80090fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80090fe:	429a      	cmp	r2, r3
 8009100:	d117      	bne.n	8009132 <HAL_TIM_OnePulse_Stop_IT+0x86>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6a1a      	ldr	r2, [r3, #32]
 8009108:	f241 1311 	movw	r3, #4369	; 0x1111
 800910c:	4013      	ands	r3, r2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10f      	bne.n	8009132 <HAL_TIM_OnePulse_Stop_IT+0x86>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6a1a      	ldr	r2, [r3, #32]
 8009118:	f240 4344 	movw	r3, #1092	; 0x444
 800911c:	4013      	ands	r3, r2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d107      	bne.n	8009132 <HAL_TIM_OnePulse_Stop_IT+0x86>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6812      	ldr	r2, [r2, #0]
 800912a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800912c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6a1a      	ldr	r2, [r3, #32]
 8009138:	f241 1311 	movw	r3, #4369	; 0x1111
 800913c:	4013      	ands	r3, r2
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10f      	bne.n	8009162 <HAL_TIM_OnePulse_Stop_IT+0xb6>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6a1a      	ldr	r2, [r3, #32]
 8009148:	f240 4344 	movw	r3, #1092	; 0x444
 800914c:	4013      	ands	r3, r2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d107      	bne.n	8009162 <HAL_TIM_OnePulse_Stop_IT+0xb6>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6812      	ldr	r2, [r2, #0]
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	f022 0201 	bic.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e081      	b.n	8009290 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f8a9 	bl	80092f8 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2202      	movs	r2, #2
 80091aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	6812      	ldr	r2, [r2, #0]
 80091b6:	6892      	ldr	r2, [r2, #8]
 80091b8:	f022 0207 	bic.w	r2, r2, #7
 80091bc:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3304      	adds	r3, #4
 80091c6:	4610      	mov	r0, r2
 80091c8:	4619      	mov	r1, r3
 80091ca:	f001 fd7b 	bl	800acc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f6:	f023 0303 	bic.w	r3, r3, #3
 80091fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	021b      	lsls	r3, r3, #8
 8009206:	4313      	orrs	r3, r2
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	4313      	orrs	r3, r2
 800920c:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009214:	f023 030c 	bic.w	r3, r3, #12
 8009218:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	4313      	orrs	r3, r2
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	011a      	lsls	r2, r3, #4
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	031b      	lsls	r3, r3, #12
 8009244:	4313      	orrs	r3, r2
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4313      	orrs	r3, r2
 800924a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009252:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800925a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	4313      	orrs	r3, r2
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface 
  * @param  htim : TIM Encoder handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6a1a      	ldr	r2, [r3, #32]
 80092ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80092b2:	4013      	ands	r3, r2
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10f      	bne.n	80092d8 <HAL_TIM_Encoder_DeInit+0x40>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a1a      	ldr	r2, [r3, #32]
 80092be:	f240 4344 	movw	r3, #1092	; 0x444
 80092c2:	4013      	ands	r3, r2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d107      	bne.n	80092d8 <HAL_TIM_Encoder_DeInit+0x40>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6812      	ldr	r2, [r2, #0]
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	f022 0201 	bic.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f817 	bl	800930c <HAL_TIM_Encoder_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop

0800930c <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop

08009320 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <HAL_TIM_Encoder_Start+0x16>
 8009330:	2b04      	cmp	r3, #4
 8009332:	d008      	beq.n	8009346 <HAL_TIM_Encoder_Start+0x26>
 8009334:	e00f      	b.n	8009356 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4618      	mov	r0, r3
 800933c:	2100      	movs	r1, #0
 800933e:	2201      	movs	r2, #1
 8009340:	f002 f944 	bl	800b5cc <TIM_CCxChannelCmd>
      break;
 8009344:	e016      	b.n	8009374 <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	2104      	movs	r1, #4
 800934e:	2201      	movs	r2, #1
 8009350:	f002 f93c 	bl	800b5cc <TIM_CCxChannelCmd>
      break;
 8009354:	e00e      	b.n	8009374 <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4618      	mov	r0, r3
 800935c:	2100      	movs	r1, #0
 800935e:	2201      	movs	r2, #1
 8009360:	f002 f934 	bl	800b5cc <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	2104      	movs	r1, #4
 800936c:	2201      	movs	r2, #1
 800936e:	f002 f92d 	bl	800b5cc <TIM_CCxChannelCmd>
     break;
 8009372:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6812      	ldr	r2, [r2, #0]
 800937c:	6812      	ldr	r2, [r2, #0]
 800937e:	f042 0201 	orr.w	r2, r2, #1
 8009382:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop

08009390 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <HAL_TIM_Encoder_Stop+0x16>
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d008      	beq.n	80093b6 <HAL_TIM_Encoder_Stop+0x26>
 80093a4:	e00f      	b.n	80093c6 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	2100      	movs	r1, #0
 80093ae:	2200      	movs	r2, #0
 80093b0:	f002 f90c 	bl	800b5cc <TIM_CCxChannelCmd>
      break;
 80093b4:	e016      	b.n	80093e4 <HAL_TIM_Encoder_Stop+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4618      	mov	r0, r3
 80093bc:	2104      	movs	r1, #4
 80093be:	2200      	movs	r2, #0
 80093c0:	f002 f904 	bl	800b5cc <TIM_CCxChannelCmd>
      break;
 80093c4:	e00e      	b.n	80093e4 <HAL_TIM_Encoder_Stop+0x54>
  }
    default :
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	2100      	movs	r1, #0
 80093ce:	2200      	movs	r2, #0
 80093d0:	f002 f8fc 	bl	800b5cc <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4618      	mov	r0, r3
 80093da:	2104      	movs	r1, #4
 80093dc:	2200      	movs	r2, #0
 80093de:	f002 f8f5 	bl	800b5cc <TIM_CCxChannelCmd>
     break;
 80093e2:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6a1a      	ldr	r2, [r3, #32]
 80093ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80093ee:	4013      	ands	r3, r2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10f      	bne.n	8009414 <HAL_TIM_Encoder_Stop+0x84>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6a1a      	ldr	r2, [r3, #32]
 80093fa:	f240 4344 	movw	r3, #1092	; 0x444
 80093fe:	4013      	ands	r3, r2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d107      	bne.n	8009414 <HAL_TIM_Encoder_Stop+0x84>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	6812      	ldr	r2, [r2, #0]
 800940e:	f022 0201 	bic.w	r2, r2, #1
 8009412:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop

08009420 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <HAL_TIM_Encoder_Start_IT+0x16>
 8009430:	2b04      	cmp	r3, #4
 8009432:	d010      	beq.n	8009456 <HAL_TIM_Encoder_Start_IT+0x36>
 8009434:	e01f      	b.n	8009476 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	2100      	movs	r1, #0
 800943e:	2201      	movs	r2, #1
 8009440:	f002 f8c4 	bl	800b5cc <TIM_CCxChannelCmd>
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	6812      	ldr	r2, [r2, #0]
 800944c:	68d2      	ldr	r2, [r2, #12]
 800944e:	f042 0202 	orr.w	r2, r2, #2
 8009452:	60da      	str	r2, [r3, #12]
      break;
 8009454:	e02e      	b.n	80094b4 <HAL_TIM_Encoder_Start_IT+0x94>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4618      	mov	r0, r3
 800945c:	2104      	movs	r1, #4
 800945e:	2201      	movs	r2, #1
 8009460:	f002 f8b4 	bl	800b5cc <TIM_CCxChannelCmd>
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	6812      	ldr	r2, [r2, #0]
 800946c:	68d2      	ldr	r2, [r2, #12]
 800946e:	f042 0204 	orr.w	r2, r2, #4
 8009472:	60da      	str	r2, [r3, #12]
      break;
 8009474:	e01e      	b.n	80094b4 <HAL_TIM_Encoder_Start_IT+0x94>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	2100      	movs	r1, #0
 800947e:	2201      	movs	r2, #1
 8009480:	f002 f8a4 	bl	800b5cc <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	2104      	movs	r1, #4
 800948c:	2201      	movs	r2, #1
 800948e:	f002 f89d 	bl	800b5cc <TIM_CCxChannelCmd>
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6812      	ldr	r2, [r2, #0]
 800949a:	68d2      	ldr	r2, [r2, #12]
 800949c:	f042 0202 	orr.w	r2, r2, #2
 80094a0:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	6812      	ldr	r2, [r2, #0]
 80094aa:	68d2      	ldr	r2, [r2, #12]
 80094ac:	f042 0204 	orr.w	r2, r2, #4
 80094b0:	60da      	str	r2, [r3, #12]
     break;
 80094b2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	6812      	ldr	r2, [r2, #0]
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	f042 0201 	orr.w	r2, r2, #1
 80094c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop

080094d0 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if(Channel == TIM_CHANNEL_1)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10f      	bne.n	8009500 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4618      	mov	r0, r3
 80094e6:	2100      	movs	r1, #0
 80094e8:	2200      	movs	r2, #0
 80094ea:	f002 f86f 	bl	800b5cc <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	68d2      	ldr	r2, [r2, #12]
 80094f8:	f022 0202 	bic.w	r2, r2, #2
 80094fc:	60da      	str	r2, [r3, #12]
 80094fe:	e030      	b.n	8009562 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if(Channel == TIM_CHANNEL_2)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2b04      	cmp	r3, #4
 8009504:	d10f      	bne.n	8009526 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	2104      	movs	r1, #4
 800950e:	2200      	movs	r2, #0
 8009510:	f002 f85c 	bl	800b5cc <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6812      	ldr	r2, [r2, #0]
 800951c:	68d2      	ldr	r2, [r2, #12]
 800951e:	f022 0204 	bic.w	r2, r2, #4
 8009522:	60da      	str	r2, [r3, #12]
 8009524:	e01d      	b.n	8009562 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	2100      	movs	r1, #0
 800952e:	2200      	movs	r2, #0
 8009530:	f002 f84c 	bl	800b5cc <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4618      	mov	r0, r3
 800953a:	2104      	movs	r1, #4
 800953c:	2200      	movs	r2, #0
 800953e:	f002 f845 	bl	800b5cc <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	6812      	ldr	r2, [r2, #0]
 800954a:	68d2      	ldr	r2, [r2, #12]
 800954c:	f022 0202 	bic.w	r2, r2, #2
 8009550:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6812      	ldr	r2, [r2, #0]
 800955a:	68d2      	ldr	r2, [r2, #12]
 800955c:	f022 0204 	bic.w	r2, r2, #4
 8009560:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6a1a      	ldr	r2, [r3, #32]
 8009568:	f241 1311 	movw	r3, #4369	; 0x1111
 800956c:	4013      	ands	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10f      	bne.n	8009592 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6a1a      	ldr	r2, [r3, #32]
 8009578:	f240 4344 	movw	r3, #1092	; 0x444
 800957c:	4013      	ands	r3, r2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d107      	bne.n	8009592 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	6812      	ldr	r2, [r2, #0]
 800958c:	f022 0201 	bic.w	r2, r2, #1
 8009590:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_TIM_Encoder_Start_DMA>:
  * @param  pData2 : The destination Buffer address for IC2.
  * @param  Length : The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d101      	bne.n	80095c2 <HAL_TIM_Encoder_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 80095be:	2302      	movs	r3, #2
 80095c0:	e0d4      	b.n	800976c <HAL_TIM_Encoder_Start_DMA+0x1c8>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d10e      	bne.n	80095ec <HAL_TIM_Encoder_Start_DMA+0x48>
  {
    if((((pData1 == 0) || (pData2 == 0) )) && (Length > 0))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <HAL_TIM_Encoder_Start_DMA+0x36>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d104      	bne.n	80095e4 <HAL_TIM_Encoder_Start_DMA+0x40>
 80095da:	8b3b      	ldrh	r3, [r7, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <HAL_TIM_Encoder_Start_DMA+0x40>
    {
      return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e0c3      	b.n	800976c <HAL_TIM_Encoder_Start_DMA+0x1c8>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  switch (Channel)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d034      	beq.n	800965c <HAL_TIM_Encoder_Start_DMA+0xb8>
 80095f2:	2b18      	cmp	r3, #24
 80095f4:	d062      	beq.n	80096bc <HAL_TIM_Encoder_Start_DMA+0x118>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d000      	beq.n	80095fc <HAL_TIM_Encoder_Start_DMA+0x58>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
    }
    break;

    default:
    break;
 80095fa:	e0b6      	b.n	800976a <HAL_TIM_Encoder_Start_DMA+0x1c6>
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a1a      	ldr	r2, [r3, #32]
 8009600:	f64a 430d 	movw	r3, #44045	; 0xac0d
 8009604:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009608:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a1a      	ldr	r2, [r3, #32]
 800960e:	f64a 3379 	movw	r3, #43897	; 0xab79
 8009612:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009616:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a18      	ldr	r0, [r3, #32]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3334      	adds	r3, #52	; 0x34
 8009622:	4619      	mov	r1, r3
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	8b3b      	ldrh	r3, [r7, #24]
 8009628:	f7f7 fdd0 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Input Capture DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	68d2      	ldr	r2, [r2, #12]
 8009636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963a:	60da      	str	r2, [r3, #12]

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	f042 0201 	orr.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4618      	mov	r0, r3
 8009652:	2100      	movs	r1, #0
 8009654:	2201      	movs	r2, #1
 8009656:	f001 ffb9 	bl	800b5cc <TIM_CCxChannelCmd>
    }
    break;
 800965a:	e086      	b.n	800976a <HAL_TIM_Encoder_Start_DMA+0x1c6>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009660:	f64a 430d 	movw	r3, #44045	; 0xac0d
 8009664:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009668:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800966e:	f64a 3379 	movw	r3, #43897	; 0xab79
 8009672:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009676:	6313      	str	r3, [r2, #48]	; 0x30
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3338      	adds	r3, #56	; 0x38
 8009682:	4619      	mov	r1, r3
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	8b3b      	ldrh	r3, [r7, #24]
 8009688:	f7f7 fda0 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	6812      	ldr	r2, [r2, #0]
 8009694:	68d2      	ldr	r2, [r2, #12]
 8009696:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800969a:	60da      	str	r2, [r3, #12]

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	6812      	ldr	r2, [r2, #0]
 80096a4:	6812      	ldr	r2, [r2, #0]
 80096a6:	f042 0201 	orr.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4618      	mov	r0, r3
 80096b2:	2104      	movs	r1, #4
 80096b4:	2201      	movs	r2, #1
 80096b6:	f001 ff89 	bl	800b5cc <TIM_CCxChannelCmd>
    }
    break;
 80096ba:	e056      	b.n	800976a <HAL_TIM_Encoder_Start_DMA+0x1c6>

    case TIM_CHANNEL_ALL:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a1a      	ldr	r2, [r3, #32]
 80096c0:	f64a 430d 	movw	r3, #44045	; 0xac0d
 80096c4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80096c8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6a1a      	ldr	r2, [r3, #32]
 80096ce:	f64a 3379 	movw	r3, #43897	; 0xab79
 80096d2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80096d6:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6a18      	ldr	r0, [r3, #32]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3334      	adds	r3, #52	; 0x34
 80096e2:	4619      	mov	r1, r3
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	8b3b      	ldrh	r3, [r7, #24]
 80096e8:	f7f7 fd70 	bl	80011cc <HAL_DMA_Start_IT>

      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096f0:	f64a 430d 	movw	r3, #44045	; 0xac0d
 80096f4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80096f8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096fe:	f64a 3379 	movw	r3, #43897	; 0xab79
 8009702:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009706:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3338      	adds	r3, #56	; 0x38
 8009712:	4619      	mov	r1, r3
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	8b3b      	ldrh	r3, [r7, #24]
 8009718:	f7f7 fd58 	bl	80011cc <HAL_DMA_Start_IT>

     /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	6812      	ldr	r2, [r2, #0]
 8009726:	f042 0201 	orr.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	2100      	movs	r1, #0
 8009734:	2201      	movs	r2, #1
 8009736:	f001 ff49 	bl	800b5cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4618      	mov	r0, r3
 8009740:	2104      	movs	r1, #4
 8009742:	2201      	movs	r2, #1
 8009744:	f001 ff42 	bl	800b5cc <TIM_CCxChannelCmd>

      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	6812      	ldr	r2, [r2, #0]
 8009750:	68d2      	ldr	r2, [r2, #12]
 8009752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009756:	60da      	str	r2, [r3, #12]
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	6812      	ldr	r2, [r2, #0]
 8009760:	68d2      	ldr	r2, [r2, #12]
 8009762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009766:	60da      	str	r2, [r3, #12]
    }
    break;
 8009768:	bf00      	nop

    default:
    break;
  }
  /* Return function status */
  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if(Channel == TIM_CHANNEL_1)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10f      	bne.n	80097a4 <HAL_TIM_Encoder_Stop_DMA+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4618      	mov	r0, r3
 800978a:	2100      	movs	r1, #0
 800978c:	2200      	movs	r2, #0
 800978e:	f001 ff1d 	bl	800b5cc <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	6812      	ldr	r2, [r2, #0]
 800979a:	68d2      	ldr	r2, [r2, #12]
 800979c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80097a0:	60da      	str	r2, [r3, #12]
 80097a2:	e030      	b.n	8009806 <HAL_TIM_Encoder_Stop_DMA+0x92>
  }
  else if(Channel == TIM_CHANNEL_2)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d10f      	bne.n	80097ca <HAL_TIM_Encoder_Stop_DMA+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	2104      	movs	r1, #4
 80097b2:	2200      	movs	r2, #0
 80097b4:	f001 ff0a 	bl	800b5cc <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	68d2      	ldr	r2, [r2, #12]
 80097c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097c6:	60da      	str	r2, [r3, #12]
 80097c8:	e01d      	b.n	8009806 <HAL_TIM_Encoder_Stop_DMA+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4618      	mov	r0, r3
 80097d0:	2100      	movs	r1, #0
 80097d2:	2200      	movs	r2, #0
 80097d4:	f001 fefa 	bl	800b5cc <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	2104      	movs	r1, #4
 80097e0:	2200      	movs	r2, #0
 80097e2:	f001 fef3 	bl	800b5cc <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	6812      	ldr	r2, [r2, #0]
 80097ee:	68d2      	ldr	r2, [r2, #12]
 80097f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80097f4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	6812      	ldr	r2, [r2, #0]
 80097fe:	68d2      	ldr	r2, [r2, #12]
 8009800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009804:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6a1a      	ldr	r2, [r3, #32]
 800980c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009810:	4013      	ands	r3, r2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10f      	bne.n	8009836 <HAL_TIM_Encoder_Stop_DMA+0xc2>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6a1a      	ldr	r2, [r3, #32]
 800981c:	f240 4344 	movw	r3, #1092	; 0x444
 8009820:	4013      	ands	r3, r2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d107      	bne.n	8009836 <HAL_TIM_Encoder_Stop_DMA+0xc2>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	6812      	ldr	r2, [r2, #0]
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	f022 0201 	bic.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d022      	beq.n	80098a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d01b      	beq.n	80098a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f06f 0202 	mvn.w	r2, #2
 8009874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 f8f8 	bl	800aa80 <HAL_TIM_IC_CaptureCallback>
 8009890:	e005      	b.n	800989e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 f8ea 	bl	800aa6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 f8fb 	bl	800aa94 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0304 	and.w	r3, r3, #4
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d022      	beq.n	80098f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f003 0304 	and.w	r3, r3, #4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01b      	beq.n	80098f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f06f 0204 	mvn.w	r2, #4
 80098c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2202      	movs	r2, #2
 80098ce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f001 f8ce 	bl	800aa80 <HAL_TIM_IC_CaptureCallback>
 80098e4:	e005      	b.n	80098f2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 f8c0 	bl	800aa6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 f8d1 	bl	800aa94 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0308 	and.w	r3, r3, #8
 8009902:	2b00      	cmp	r3, #0
 8009904:	d022      	beq.n	800994c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0308 	and.w	r3, r3, #8
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01b      	beq.n	800994c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f06f 0208 	mvn.w	r2, #8
 800991c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2204      	movs	r2, #4
 8009922:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	f003 0303 	and.w	r3, r3, #3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 f8a4 	bl	800aa80 <HAL_TIM_IC_CaptureCallback>
 8009938:	e005      	b.n	8009946 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f001 f896 	bl	800aa6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 f8a7 	bl	800aa94 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f003 0310 	and.w	r3, r3, #16
 8009956:	2b00      	cmp	r3, #0
 8009958:	d022      	beq.n	80099a0 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	2b00      	cmp	r3, #0
 8009966:	d01b      	beq.n	80099a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f06f 0210 	mvn.w	r2, #16
 8009970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2208      	movs	r2, #8
 8009976:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 f87a 	bl	800aa80 <HAL_TIM_IC_CaptureCallback>
 800998c:	e005      	b.n	800999a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 f86c 	bl	800aa6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f001 f87d 	bl	800aa94 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00e      	beq.n	80099cc <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d007      	beq.n	80099cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0201 	mvn.w	r2, #1
 80099c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f006 ffd0 	bl	801096c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00e      	beq.n	80099f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d007      	beq.n	80099f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f003 f82e 	bl	800ca54 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00e      	beq.n	8009a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d007      	beq.n	8009a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a1c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 f842 	bl	800aaa8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f003 0320 	and.w	r3, r3, #32
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00e      	beq.n	8009a50 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f003 0320 	and.w	r3, r3, #32
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f06f 0220 	mvn.w	r2, #32
 8009a48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f002 fff8 	bl	800ca40 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop

08009a58 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d101      	bne.n	8009a72 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e04e      	b.n	8009b10 <HAL_TIM_OC_ConfigChannel+0xb8>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b0c      	cmp	r3, #12
 8009a86:	d839      	bhi.n	8009afc <HAL_TIM_OC_ConfigChannel+0xa4>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <HAL_TIM_OC_ConfigChannel+0x38>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009ac5 	.word	0x08009ac5
 8009a94:	08009afd 	.word	0x08009afd
 8009a98:	08009afd 	.word	0x08009afd
 8009a9c:	08009afd 	.word	0x08009afd
 8009aa0:	08009ad3 	.word	0x08009ad3
 8009aa4:	08009afd 	.word	0x08009afd
 8009aa8:	08009afd 	.word	0x08009afd
 8009aac:	08009afd 	.word	0x08009afd
 8009ab0:	08009ae1 	.word	0x08009ae1
 8009ab4:	08009afd 	.word	0x08009afd
 8009ab8:	08009afd 	.word	0x08009afd
 8009abc:	08009afd 	.word	0x08009afd
 8009ac0:	08009aef 	.word	0x08009aef
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	f001 f974 	bl	800adb8 <TIM_OC1_SetConfig>
    }
    break;
 8009ad0:	e015      	b.n	8009afe <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	68b9      	ldr	r1, [r7, #8]
 8009ada:	f001 f9dd 	bl	800ae98 <TIM_OC2_SetConfig>
    }
    break;
 8009ade:	e00e      	b.n	8009afe <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	f001 fa4a 	bl	800af80 <TIM_OC3_SetConfig>
    }
    break;
 8009aec:	e007      	b.n	8009afe <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	f001 fab7 	bl	800b068 <TIM_OC4_SetConfig>
    }
    break;
 8009afa:	e000      	b.n	8009afe <HAL_TIM_OC_ConfigChannel+0xa6>

    default:
    break;
 8009afc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d101      	bne.n	8009b32 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009b2e:	2302      	movs	r3, #2
 8009b30:	e08a      	b.n	8009c48 <HAL_TIM_IC_ConfigChannel+0x130>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  if (Channel == TIM_CHANNEL_1)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d11b      	bne.n	8009b80 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	6819      	ldr	r1, [r3, #0]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f001 fb6a 	bl	800b230 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	6992      	ldr	r2, [r2, #24]
 8009b66:	f022 020c 	bic.w	r2, r2, #12
 8009b6a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	6812      	ldr	r2, [r2, #0]
 8009b74:	6991      	ldr	r1, [r2, #24]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	6892      	ldr	r2, [r2, #8]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	619a      	str	r2, [r3, #24]
 8009b7e:	e05a      	b.n	8009c36 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d11c      	bne.n	8009bc0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	6819      	ldr	r1, [r3, #0]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f001 fbe5 	bl	800b364 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	6812      	ldr	r2, [r2, #0]
 8009ba2:	6992      	ldr	r2, [r2, #24]
 8009ba4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ba8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	6812      	ldr	r2, [r2, #0]
 8009bb2:	6991      	ldr	r1, [r2, #24]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	6892      	ldr	r2, [r2, #8]
 8009bb8:	0212      	lsls	r2, r2, #8
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	619a      	str	r2, [r3, #24]
 8009bbe:	e03a      	b.n	8009c36 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b08      	cmp	r3, #8
 8009bc4:	d11b      	bne.n	8009bfe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6819      	ldr	r1, [r3, #0]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f001 fc39 	bl	800b44c <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	6812      	ldr	r2, [r2, #0]
 8009be2:	69d2      	ldr	r2, [r2, #28]
 8009be4:	f022 020c 	bic.w	r2, r2, #12
 8009be8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	6812      	ldr	r2, [r2, #0]
 8009bf2:	69d1      	ldr	r1, [r2, #28]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	6892      	ldr	r2, [r2, #8]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	61da      	str	r2, [r3, #28]
 8009bfc:	e01b      	b.n	8009c36 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6819      	ldr	r1, [r3, #0]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	f001 fc5d 	bl	800b4cc <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	6812      	ldr	r2, [r2, #0]
 8009c1a:	69d2      	ldr	r2, [r2, #28]
 8009c1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c20:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	6812      	ldr	r2, [r2, #0]
 8009c2a:	69d1      	ldr	r1, [r2, #28]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	6892      	ldr	r2, [r2, #8]
 8009c30:	0212      	lsls	r2, r2, #8
 8009c32:	430a      	orrs	r2, r1
 8009c34:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e0b4      	b.n	8009dd4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2202      	movs	r2, #2
 8009c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b0c      	cmp	r3, #12
 8009c7e:	f200 809f 	bhi.w	8009dc0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009c82:	a201      	add	r2, pc, #4	; (adr r2, 8009c88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009cbd 	.word	0x08009cbd
 8009c8c:	08009dc1 	.word	0x08009dc1
 8009c90:	08009dc1 	.word	0x08009dc1
 8009c94:	08009dc1 	.word	0x08009dc1
 8009c98:	08009cfd 	.word	0x08009cfd
 8009c9c:	08009dc1 	.word	0x08009dc1
 8009ca0:	08009dc1 	.word	0x08009dc1
 8009ca4:	08009dc1 	.word	0x08009dc1
 8009ca8:	08009d3f 	.word	0x08009d3f
 8009cac:	08009dc1 	.word	0x08009dc1
 8009cb0:	08009dc1 	.word	0x08009dc1
 8009cb4:	08009dc1 	.word	0x08009dc1
 8009cb8:	08009d7f 	.word	0x08009d7f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	68b9      	ldr	r1, [r7, #8]
 8009cc4:	f001 f878 	bl	800adb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	6812      	ldr	r2, [r2, #0]
 8009cd0:	6992      	ldr	r2, [r2, #24]
 8009cd2:	f042 0208 	orr.w	r2, r2, #8
 8009cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	6812      	ldr	r2, [r2, #0]
 8009ce0:	6992      	ldr	r2, [r2, #24]
 8009ce2:	f022 0204 	bic.w	r2, r2, #4
 8009ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	6812      	ldr	r2, [r2, #0]
 8009cf0:	6991      	ldr	r1, [r2, #24]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	6912      	ldr	r2, [r2, #16]
 8009cf6:	430a      	orrs	r2, r1
 8009cf8:	619a      	str	r2, [r3, #24]
    }
    break;
 8009cfa:	e062      	b.n	8009dc2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4618      	mov	r0, r3
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	f001 f8c8 	bl	800ae98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	6812      	ldr	r2, [r2, #0]
 8009d10:	6992      	ldr	r2, [r2, #24]
 8009d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	6992      	ldr	r2, [r2, #24]
 8009d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	6812      	ldr	r2, [r2, #0]
 8009d30:	6991      	ldr	r1, [r2, #24]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	6912      	ldr	r2, [r2, #16]
 8009d36:	0212      	lsls	r2, r2, #8
 8009d38:	430a      	orrs	r2, r1
 8009d3a:	619a      	str	r2, [r3, #24]
    }
    break;
 8009d3c:	e041      	b.n	8009dc2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	f001 f91b 	bl	800af80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	6812      	ldr	r2, [r2, #0]
 8009d52:	69d2      	ldr	r2, [r2, #28]
 8009d54:	f042 0208 	orr.w	r2, r2, #8
 8009d58:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	69d2      	ldr	r2, [r2, #28]
 8009d64:	f022 0204 	bic.w	r2, r2, #4
 8009d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	6812      	ldr	r2, [r2, #0]
 8009d72:	69d1      	ldr	r1, [r2, #28]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	6912      	ldr	r2, [r2, #16]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	61da      	str	r2, [r3, #28]
    }
    break;
 8009d7c:	e021      	b.n	8009dc2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	68b9      	ldr	r1, [r7, #8]
 8009d86:	f001 f96f 	bl	800b068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	6812      	ldr	r2, [r2, #0]
 8009d92:	69d2      	ldr	r2, [r2, #28]
 8009d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d98:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	6812      	ldr	r2, [r2, #0]
 8009da2:	69d2      	ldr	r2, [r2, #28]
 8009da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	6812      	ldr	r2, [r2, #0]
 8009db2:	69d1      	ldr	r1, [r2, #28]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	6912      	ldr	r2, [r2, #16]
 8009db8:	0212      	lsls	r2, r2, #8
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	61da      	str	r2, [r3, #28]
    }
    break;
 8009dbe:	e000      	b.n	8009dc2 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8009dc0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_TIM_OnePulse_ConfigChannel>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08c      	sub	sp, #48	; 0x30
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	f000 80af 	beq.w	8009f52 <HAL_TIM_OnePulse_ConfigChannel+0x176>
  {
  __HAL_LOCK(htim);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <HAL_TIM_OnePulse_ConfigChannel+0x26>
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e0a8      	b.n	8009f54 <HAL_TIM_OnePulse_ConfigChannel+0x178>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Extract the Ouput compare configuration from sConfig structure */
  temp1.OCMode = sConfig->OCMode;
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	617b      	str	r3, [r7, #20]
  temp1.Pulse = sConfig->Pulse;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	61bb      	str	r3, [r7, #24]
  temp1.OCPolarity = sConfig->OCPolarity;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	61fb      	str	r3, [r7, #28]
  temp1.OCNPolarity = sConfig->OCNPolarity;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	623b      	str	r3, [r7, #32]
  temp1.OCIdleState = sConfig->OCIdleState;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  temp1.OCNIdleState = sConfig->OCNIdleState;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <HAL_TIM_OnePulse_ConfigChannel+0x66>
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d009      	beq.n	8009e54 <HAL_TIM_OnePulse_ConfigChannel+0x78>

      TIM_OC2_SetConfig(htim->Instance, &temp1);
    }
    break;
    default:
    break;
 8009e40:	e011      	b.n	8009e66 <HAL_TIM_OnePulse_ConfigChannel+0x8a>
  {
    case TIM_CHANNEL_1:
    {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      TIM_OC1_SetConfig(htim->Instance, &temp1);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	f107 0314 	add.w	r3, r7, #20
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	f000 ffb3 	bl	800adb8 <TIM_OC1_SetConfig>
    }
    break;
 8009e52:	e008      	b.n	8009e66 <HAL_TIM_OnePulse_ConfigChannel+0x8a>
    case TIM_CHANNEL_2:
    {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      TIM_OC2_SetConfig(htim->Instance, &temp1);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	f107 0314 	add.w	r3, r7, #20
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4619      	mov	r1, r3
 8009e60:	f001 f81a 	bl	800ae98 <TIM_OC2_SetConfig>
    }
    break;
 8009e64:	bf00      	nop
    default:
    break;
  }
  switch (InputChannel)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <HAL_TIM_OnePulse_ConfigChannel+0x96>
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d033      	beq.n	8009ed8 <HAL_TIM_OnePulse_ConfigChannel+0xfc>
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
    }
    break;

    default:
    break;
 8009e70:	e065      	b.n	8009f3e <HAL_TIM_OnePulse_ConfigChannel+0x162>
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6999      	ldr	r1, [r3, #24]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	69da      	ldr	r2, [r3, #28]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	f001 f9d5 	bl	800b230 <TIM_TI1_SetConfig>
                        sConfig->ICSelection, sConfig->ICFilter);

      /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	6812      	ldr	r2, [r2, #0]
 8009e8e:	6992      	ldr	r2, [r2, #24]
 8009e90:	f022 020c 	bic.w	r2, r2, #12
 8009e94:	619a      	str	r2, [r3, #24]

      /* Select the Trigger source */
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	6812      	ldr	r2, [r2, #0]
 8009e9e:	6892      	ldr	r2, [r2, #8]
 8009ea0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ea4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	6812      	ldr	r2, [r2, #0]
 8009eae:	6892      	ldr	r2, [r2, #8]
 8009eb0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8009eb4:	609a      	str	r2, [r3, #8]

      /* Select the Slave Mode */
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	6812      	ldr	r2, [r2, #0]
 8009ebe:	6892      	ldr	r2, [r2, #8]
 8009ec0:	f022 0207 	bic.w	r2, r2, #7
 8009ec4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	6812      	ldr	r2, [r2, #0]
 8009ece:	6892      	ldr	r2, [r2, #8]
 8009ed0:	f042 0206 	orr.w	r2, r2, #6
 8009ed4:	609a      	str	r2, [r3, #8]
    }
    break;
 8009ed6:	e032      	b.n	8009f3e <HAL_TIM_OnePulse_ConfigChannel+0x162>
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6999      	ldr	r1, [r3, #24]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	69da      	ldr	r2, [r3, #28]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	6a1b      	ldr	r3, [r3, #32]
 8009ee8:	f001 fa3c 	bl	800b364 <TIM_TI2_SetConfig>
                 sConfig->ICSelection, sConfig->ICFilter);

      /* Reset the IC2PSC Bits */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	6812      	ldr	r2, [r2, #0]
 8009ef4:	6992      	ldr	r2, [r2, #24]
 8009ef6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009efa:	619a      	str	r2, [r3, #24]

      /* Select the Trigger source */
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	6812      	ldr	r2, [r2, #0]
 8009f04:	6892      	ldr	r2, [r2, #8]
 8009f06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f0a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	6892      	ldr	r2, [r2, #8]
 8009f16:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009f1a:	609a      	str	r2, [r3, #8]

      /* Select the Slave Mode */
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	6892      	ldr	r2, [r2, #8]
 8009f26:	f022 0207 	bic.w	r2, r2, #7
 8009f2a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	6812      	ldr	r2, [r2, #0]
 8009f34:	6892      	ldr	r2, [r2, #8]
 8009f36:	f042 0206 	orr.w	r2, r2, #6
 8009f3a:	609a      	str	r2, [r3, #8]
    }
    break;
 8009f3c:	bf00      	nop

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e000      	b.n	8009f54 <HAL_TIM_OnePulse_ConfigChannel+0x178>
}
  else
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
  }
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3730      	adds	r7, #48	; 0x30
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_TIM_DMABurst_WriteStart>:
  *         between: TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t* BurstBuffer, uint32_t  BurstLength)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d101      	bne.n	8009f7a <HAL_TIM_DMABurst_WriteStart+0x1e>
  {
     return HAL_BUSY;
 8009f76:	2302      	movs	r3, #2
 8009f78:	e0fe      	b.n	800a178 <HAL_TIM_DMABurst_WriteStart+0x21c>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d10b      	bne.n	8009f9e <HAL_TIM_DMABurst_WriteStart+0x42>
  {
    if((BurstBuffer == 0 ) && (BurstLength > 0))
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <HAL_TIM_DMABurst_WriteStart+0x3a>
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <HAL_TIM_DMABurst_WriteStart+0x3a>
    {
      return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e0f0      	b.n	800a178 <HAL_TIM_DMABurst_WriteStart+0x21c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  switch(BurstRequestSrc)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fa4:	d069      	beq.n	800a07a <HAL_TIM_DMABurst_WriteStart+0x11e>
 8009fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009faa:	d809      	bhi.n	8009fc0 <HAL_TIM_DMABurst_WriteStart+0x64>
 8009fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fb0:	d02d      	beq.n	800a00e <HAL_TIM_DMABurst_WriteStart+0xb2>
 8009fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb6:	d045      	beq.n	800a044 <HAL_TIM_DMABurst_WriteStart+0xe8>
 8009fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fbc:	d00c      	beq.n	8009fd8 <HAL_TIM_DMABurst_WriteStart+0x7c>
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
    }
    break;
    default:
    break;
 8009fbe:	e0c8      	b.n	800a152 <HAL_TIM_DMABurst_WriteStart+0x1f6>
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }
  switch(BurstRequestSrc)
 8009fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc4:	f000 808f 	beq.w	800a0e6 <HAL_TIM_DMABurst_WriteStart+0x18a>
 8009fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fcc:	f000 80a6 	beq.w	800a11c <HAL_TIM_DMABurst_WriteStart+0x1c0>
 8009fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd4:	d06c      	beq.n	800a0b0 <HAL_TIM_DMABurst_WriteStart+0x154>
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
    }
    break;
    default:
    break;
 8009fd6:	e0bc      	b.n	800a152 <HAL_TIM_DMABurst_WriteStart+0x1f6>
  switch(BurstRequestSrc)
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	f64a 437d 	movw	r3, #44157	; 0xac7d
 8009fe0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009fe4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	69da      	ldr	r2, [r3, #28]
 8009fea:	f64a 3379 	movw	r3, #43897	; 0xab79
 8009fee:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009ff2:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	69d8      	ldr	r0, [r3, #28]
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	334c      	adds	r3, #76	; 0x4c
 800a000:	461a      	mov	r2, r3
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	0a1b      	lsrs	r3, r3, #8
 800a006:	3301      	adds	r3, #1
 800a008:	f7f7 f8e0 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a00c:	e0a1      	b.n	800a152 <HAL_TIM_DMABurst_WriteStart+0x1f6>
    case TIM_DMA_CC1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a1a      	ldr	r2, [r3, #32]
 800a012:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800a016:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a01a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a1a      	ldr	r2, [r3, #32]
 800a020:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a024:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a028:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6a18      	ldr	r0, [r3, #32]
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	334c      	adds	r3, #76	; 0x4c
 800a036:	461a      	mov	r2, r3
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	0a1b      	lsrs	r3, r3, #8
 800a03c:	3301      	adds	r3, #1
 800a03e:	f7f7 f8c5 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a042:	e086      	b.n	800a152 <HAL_TIM_DMABurst_WriteStart+0x1f6>
    case TIM_DMA_CC2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a048:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800a04c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a050:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a056:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a05a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a05e:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	334c      	adds	r3, #76	; 0x4c
 800a06c:	461a      	mov	r2, r3
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	0a1b      	lsrs	r3, r3, #8
 800a072:	3301      	adds	r3, #1
 800a074:	f7f7 f8aa 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a078:	e06b      	b.n	800a152 <HAL_TIM_DMABurst_WriteStart+0x1f6>
    case TIM_DMA_CC3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a07e:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800a082:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a086:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a08c:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a090:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a094:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	334c      	adds	r3, #76	; 0x4c
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	0a1b      	lsrs	r3, r3, #8
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	f7f7 f88f 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a0ae:	e050      	b.n	800a152 <HAL_TIM_DMABurst_WriteStart+0x1f6>
    case TIM_DMA_CC4:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b4:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800a0b8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a0bc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c2:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a0c6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a0ca:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	334c      	adds	r3, #76	; 0x4c
 800a0d8:	461a      	mov	r2, r3
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	0a1b      	lsrs	r3, r3, #8
 800a0de:	3301      	adds	r3, #1
 800a0e0:	f7f7 f874 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a0e4:	e035      	b.n	800a152 <HAL_TIM_DMABurst_WriteStart+0x1f6>
    case TIM_DMA_COM:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ea:	f64c 2369 	movw	r3, #51817	; 0xca69
 800a0ee:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a0f2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0f8:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a0fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a100:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	334c      	adds	r3, #76	; 0x4c
 800a10e:	461a      	mov	r2, r3
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	0a1b      	lsrs	r3, r3, #8
 800a114:	3301      	adds	r3, #1
 800a116:	f7f7 f859 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a11a:	e01a      	b.n	800a152 <HAL_TIM_DMABurst_WriteStart+0x1f6>
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a120:	f64a 43a1 	movw	r3, #44193	; 0xaca1
 800a124:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a128:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a12e:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a132:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a136:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8) + 1);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	334c      	adds	r3, #76	; 0x4c
 800a144:	461a      	mov	r2, r3
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	0a1b      	lsrs	r3, r3, #8
 800a14a:	3301      	adds	r3, #1
 800a14c:	f7f7 f83e 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a150:	bf00      	nop
    default:
    break;
  }
   /* configure the DMA Burst Mode */
   htim->Instance->DCR = BurstBaseAddress | BurstLength;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	649a      	str	r2, [r3, #72]	; 0x48

   /* Enable the TIM DMA Request */
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	6812      	ldr	r2, [r2, #0]
 800a166:	68d1      	ldr	r1, [r2, #12]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	60da      	str	r2, [r3, #12]

   htim->State = HAL_TIM_STATE_READY;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim : TIM handle
  * @param  BurstRequestSrc : TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a190:	d028      	beq.n	800a1e4 <HAL_TIM_DMABurst_WriteStop+0x64>
 800a192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a196:	d809      	bhi.n	800a1ac <HAL_TIM_DMABurst_WriteStop+0x2c>
 800a198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a19c:	d016      	beq.n	800a1cc <HAL_TIM_DMABurst_WriteStop+0x4c>
 800a19e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1a2:	d019      	beq.n	800a1d8 <HAL_TIM_DMABurst_WriteStop+0x58>
 800a1a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a8:	d00a      	beq.n	800a1c0 <HAL_TIM_DMABurst_WriteStop+0x40>
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800a1aa:	e033      	b.n	800a214 <HAL_TIM_DMABurst_WriteStop+0x94>
{
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800a1ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1b0:	d024      	beq.n	800a1fc <HAL_TIM_DMABurst_WriteStop+0x7c>
 800a1b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1b6:	d027      	beq.n	800a208 <HAL_TIM_DMABurst_WriteStop+0x88>
 800a1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1bc:	d018      	beq.n	800a1f0 <HAL_TIM_DMABurst_WriteStop+0x70>
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800a1be:	e029      	b.n	800a214 <HAL_TIM_DMABurst_WriteStop+0x94>
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
  {
    case TIM_DMA_UPDATE:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7f7 f84b 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a1ca:	e023      	b.n	800a214 <HAL_TIM_DMABurst_WriteStop+0x94>
    case TIM_DMA_CC1:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7f7 f845 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a1d6:	e01d      	b.n	800a214 <HAL_TIM_DMABurst_WriteStop+0x94>
    case TIM_DMA_CC2:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7f7 f83f 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a1e2:	e017      	b.n	800a214 <HAL_TIM_DMABurst_WriteStop+0x94>
    case TIM_DMA_CC3:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7f7 f839 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a1ee:	e011      	b.n	800a214 <HAL_TIM_DMABurst_WriteStop+0x94>
    case TIM_DMA_CC4:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f7 f833 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a1fa:	e00b      	b.n	800a214 <HAL_TIM_DMABurst_WriteStop+0x94>
    case TIM_DMA_COM:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	4618      	mov	r0, r3
 800a202:	f7f7 f82d 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a206:	e005      	b.n	800a214 <HAL_TIM_DMABurst_WriteStop+0x94>
    case TIM_DMA_TRIGGER:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7f7 f827 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a212:	bf00      	nop
    default:
    break;
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	68d1      	ldr	r1, [r2, #12]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	43d2      	mvns	r2, r2
 800a222:	400a      	ands	r2, r1
 800a224:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_TIM_DMABurst_ReadStart>:
  *         between: TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d101      	bne.n	800a24e <HAL_TIM_DMABurst_ReadStart+0x1e>
  {
     return HAL_BUSY;
 800a24a:	2302      	movs	r3, #2
 800a24c:	e0fe      	b.n	800a44c <HAL_TIM_DMABurst_ReadStart+0x21c>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b01      	cmp	r3, #1
 800a258:	d10b      	bne.n	800a272 <HAL_TIM_DMABurst_ReadStart+0x42>
  {
    if((BurstBuffer == 0 ) && (BurstLength > 0))
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d104      	bne.n	800a26a <HAL_TIM_DMABurst_ReadStart+0x3a>
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <HAL_TIM_DMABurst_ReadStart+0x3a>
    {
      return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e0f0      	b.n	800a44c <HAL_TIM_DMABurst_ReadStart+0x21c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2202      	movs	r2, #2
 800a26e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  switch(BurstRequestSrc)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a278:	d069      	beq.n	800a34e <HAL_TIM_DMABurst_ReadStart+0x11e>
 800a27a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a27e:	d809      	bhi.n	800a294 <HAL_TIM_DMABurst_ReadStart+0x64>
 800a280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a284:	d02d      	beq.n	800a2e2 <HAL_TIM_DMABurst_ReadStart+0xb2>
 800a286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a28a:	d045      	beq.n	800a318 <HAL_TIM_DMABurst_ReadStart+0xe8>
 800a28c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a290:	d00c      	beq.n	800a2ac <HAL_TIM_DMABurst_ReadStart+0x7c>
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
    }
    break;
    default:
    break;
 800a292:	e0c8      	b.n	800a426 <HAL_TIM_DMABurst_ReadStart+0x1f6>
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
    }
  }
  switch(BurstRequestSrc)
 800a294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a298:	f000 808f 	beq.w	800a3ba <HAL_TIM_DMABurst_ReadStart+0x18a>
 800a29c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a0:	f000 80a6 	beq.w	800a3f0 <HAL_TIM_DMABurst_ReadStart+0x1c0>
 800a2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2a8:	d06c      	beq.n	800a384 <HAL_TIM_DMABurst_ReadStart+0x154>
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
    }
    break;
    default:
    break;
 800a2aa:	e0bc      	b.n	800a426 <HAL_TIM_DMABurst_ReadStart+0x1f6>
  switch(BurstRequestSrc)
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	69da      	ldr	r2, [r3, #28]
 800a2b0:	f64a 437d 	movw	r3, #44157	; 0xac7d
 800a2b4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a2b8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	69da      	ldr	r2, [r3, #28]
 800a2be:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a2c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a2c6:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	69d8      	ldr	r0, [r3, #28]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	334c      	adds	r3, #76	; 0x4c
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	0a1b      	lsrs	r3, r3, #8
 800a2da:	3301      	adds	r3, #1
 800a2dc:	f7f6 ff76 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a2e0:	e0a1      	b.n	800a426 <HAL_TIM_DMABurst_ReadStart+0x1f6>
    case TIM_DMA_CC1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback =  TIM_DMACaptureCplt;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6a1a      	ldr	r2, [r3, #32]
 800a2e6:	f64a 430d 	movw	r3, #44045	; 0xac0d
 800a2ea:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a2ee:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a1a      	ldr	r2, [r3, #32]
 800a2f4:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a2f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a2fc:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6a18      	ldr	r0, [r3, #32]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	334c      	adds	r3, #76	; 0x4c
 800a308:	4619      	mov	r1, r3
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	0a1b      	lsrs	r3, r3, #8
 800a310:	3301      	adds	r3, #1
 800a312:	f7f6 ff5b 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a316:	e086      	b.n	800a426 <HAL_TIM_DMABurst_ReadStart+0x1f6>
    case TIM_DMA_CC2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback =  TIM_DMACaptureCplt;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a31c:	f64a 430d 	movw	r3, #44045	; 0xac0d
 800a320:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a324:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a32a:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a32e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a332:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	334c      	adds	r3, #76	; 0x4c
 800a33e:	4619      	mov	r1, r3
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	0a1b      	lsrs	r3, r3, #8
 800a346:	3301      	adds	r3, #1
 800a348:	f7f6 ff40 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a34c:	e06b      	b.n	800a426 <HAL_TIM_DMABurst_ReadStart+0x1f6>
    case TIM_DMA_CC3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback =  TIM_DMACaptureCplt;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a352:	f64a 430d 	movw	r3, #44045	; 0xac0d
 800a356:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a35a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a360:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a364:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a368:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	334c      	adds	r3, #76	; 0x4c
 800a374:	4619      	mov	r1, r3
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	3301      	adds	r3, #1
 800a37e:	f7f6 ff25 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a382:	e050      	b.n	800a426 <HAL_TIM_DMABurst_ReadStart+0x1f6>
    case TIM_DMA_CC4:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback =  TIM_DMACaptureCplt;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a388:	f64a 430d 	movw	r3, #44045	; 0xac0d
 800a38c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a390:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a396:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a39a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a39e:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	334c      	adds	r3, #76	; 0x4c
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	0a1b      	lsrs	r3, r3, #8
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	f7f6 ff0a 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a3b8:	e035      	b.n	800a426 <HAL_TIM_DMABurst_ReadStart+0x1f6>
    case TIM_DMA_COM:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3be:	f64c 2369 	movw	r3, #51817	; 0xca69
 800a3c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a3c6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3cc:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a3d0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a3d4:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	334c      	adds	r3, #76	; 0x4c
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	f7f6 feef 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a3ee:	e01a      	b.n	800a426 <HAL_TIM_DMABurst_ReadStart+0x1f6>
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3f4:	f64a 43a1 	movw	r3, #44193	; 0xaca1
 800a3f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a3fc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a402:	f64a 3379 	movw	r3, #43897	; 0xab79
 800a406:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a40a:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8) + 1);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	334c      	adds	r3, #76	; 0x4c
 800a416:	4619      	mov	r1, r3
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	0a1b      	lsrs	r3, r3, #8
 800a41e:	3301      	adds	r3, #1
 800a420:	f7f6 fed4 	bl	80011cc <HAL_DMA_Start_IT>
    }
    break;
 800a424:	bf00      	nop
    default:
    break;
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = BurstBaseAddress | BurstLength;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	430a      	orrs	r2, r1
 800a430:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	6812      	ldr	r2, [r2, #0]
 800a43a:	68d1      	ldr	r1, [r2, #12]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	430a      	orrs	r2, r1
 800a440:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim : TIM handle
  * @param  BurstRequestSrc : TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a464:	d028      	beq.n	800a4b8 <HAL_TIM_DMABurst_ReadStop+0x64>
 800a466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a46a:	d809      	bhi.n	800a480 <HAL_TIM_DMABurst_ReadStop+0x2c>
 800a46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a470:	d016      	beq.n	800a4a0 <HAL_TIM_DMABurst_ReadStop+0x4c>
 800a472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a476:	d019      	beq.n	800a4ac <HAL_TIM_DMABurst_ReadStop+0x58>
 800a478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a47c:	d00a      	beq.n	800a494 <HAL_TIM_DMABurst_ReadStop+0x40>
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800a47e:	e033      	b.n	800a4e8 <HAL_TIM_DMABurst_ReadStop+0x94>
{
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800a480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a484:	d024      	beq.n	800a4d0 <HAL_TIM_DMABurst_ReadStop+0x7c>
 800a486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a48a:	d027      	beq.n	800a4dc <HAL_TIM_DMABurst_ReadStop+0x88>
 800a48c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a490:	d018      	beq.n	800a4c4 <HAL_TIM_DMABurst_ReadStop+0x70>
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800a492:	e029      	b.n	800a4e8 <HAL_TIM_DMABurst_ReadStop+0x94>
  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
  {
    case TIM_DMA_UPDATE:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	4618      	mov	r0, r3
 800a49a:	f7f6 fee1 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a49e:	e023      	b.n	800a4e8 <HAL_TIM_DMABurst_ReadStop+0x94>
    case TIM_DMA_CC1:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f6 fedb 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a4aa:	e01d      	b.n	800a4e8 <HAL_TIM_DMABurst_ReadStop+0x94>
    case TIM_DMA_CC2:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7f6 fed5 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a4b6:	e017      	b.n	800a4e8 <HAL_TIM_DMABurst_ReadStop+0x94>
    case TIM_DMA_CC3:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7f6 fecf 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a4c2:	e011      	b.n	800a4e8 <HAL_TIM_DMABurst_ReadStop+0x94>
    case TIM_DMA_CC4:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7f6 fec9 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a4ce:	e00b      	b.n	800a4e8 <HAL_TIM_DMABurst_ReadStop+0x94>
    case TIM_DMA_COM:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f6 fec3 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a4da:	e005      	b.n	800a4e8 <HAL_TIM_DMABurst_ReadStop+0x94>
    case TIM_DMA_TRIGGER:
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f6 febd 	bl	8001260 <HAL_DMA_Abort>
    }
    break;
 800a4e6:	bf00      	nop
    default:
    break;
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6812      	ldr	r2, [r2, #0]
 800a4f0:	68d1      	ldr	r1, [r2, #12]
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	43d2      	mvns	r2, r2
 800a4f6:	400a      	ands	r2, r1
 800a4f8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <HAL_TIM_GenerateEvent>:
  * @note TIM_EVENTSOURCE_COM and TIM_EVENTSOURCE_BREAK are used only with TIM1, TIM15, TIM16 and TIM17.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a514:	2b01      	cmp	r3, #1
 800a516:	d101      	bne.n	800a51c <HAL_TIM_GenerateEvent+0x18>
 800a518:	2302      	movs	r3, #2
 800a51a:	e014      	b.n	800a546 <HAL_TIM_GenerateEvent+0x42>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop

0800a554 <HAL_TIM_ConfigOCrefClear>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  *            @arg TIM_CHANNEL_4: TIM Channel 4
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  uint32_t tmpsmcr = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d101      	bne.n	800a572 <HAL_TIM_ConfigOCrefClear+0x1e>
 800a56e:	2302      	movs	r3, #2
 800a570:	e0b0      	b.n	800a6d4 <HAL_TIM_ConfigOCrefClear+0x180>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2202      	movs	r2, #2
 800a57e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (sClearInputConfig->ClearInputSource)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <HAL_TIM_ConfigOCrefClear+0x3c>
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d00d      	beq.n	800a5aa <HAL_TIM_ConfigOCrefClear+0x56>
      /* Set the OCREF clear selection bit */
      htim->Instance->SMCR |= TIM_SMCR_OCCS;
    }
    break;
    default:
    break;
 800a58e:	e01f      	b.n	800a5d0 <HAL_TIM_ConfigOCrefClear+0x7c>
  switch (sClearInputConfig->ClearInputSource)
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit */
      tmpsmcr &= ~TIM_SMCR_OCCS;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f023 0308 	bic.w	r3, r3, #8
 800a596:	617b      	str	r3, [r7, #20]

      /* Clear the ETR Bits */
      tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a59e:	617b      	str	r3, [r7, #20]

      /* Set TIMx_SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	609a      	str	r2, [r3, #8]
   }
    break;
 800a5a8:	e012      	b.n	800a5d0 <HAL_TIM_ConfigOCrefClear+0x7c>

    case TIM_CLEARINPUTSOURCE_ETR:
    {
      TIM_ETR_SetConfig(htim->Instance,
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6818      	ldr	r0, [r3, #0]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	68d9      	ldr	r1, [r3, #12]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	f000 ffe5 	bl	800b588 <TIM_ETR_SetConfig>
                        sClearInputConfig->ClearInputPrescaler,
                        sClearInputConfig->ClearInputPolarity,
                        sClearInputConfig->ClearInputFilter);

      /* Set the OCREF clear selection bit */
      htim->Instance->SMCR |= TIM_SMCR_OCCS;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	6812      	ldr	r2, [r2, #0]
 800a5c6:	6892      	ldr	r2, [r2, #8]
 800a5c8:	f042 0208 	orr.w	r2, r2, #8
 800a5cc:	609a      	str	r2, [r3, #8]
    }
    break;
 800a5ce:	bf00      	nop
    default:
    break;
  }

  switch (Channel)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b0c      	cmp	r3, #12
 800a5d4:	d874      	bhi.n	800a6c0 <HAL_TIM_ConfigOCrefClear+0x16c>
 800a5d6:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <HAL_TIM_ConfigOCrefClear+0x88>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a611 	.word	0x0800a611
 800a5e0:	0800a6c1 	.word	0x0800a6c1
 800a5e4:	0800a6c1 	.word	0x0800a6c1
 800a5e8:	0800a6c1 	.word	0x0800a6c1
 800a5ec:	0800a63d 	.word	0x0800a63d
 800a5f0:	0800a6c1 	.word	0x0800a6c1
 800a5f4:	0800a6c1 	.word	0x0800a6c1
 800a5f8:	0800a6c1 	.word	0x0800a6c1
 800a5fc:	0800a669 	.word	0x0800a669
 800a600:	0800a6c1 	.word	0x0800a6c1
 800a604:	0800a6c1 	.word	0x0800a6c1
 800a608:	0800a6c1 	.word	0x0800a6c1
 800a60c:	0800a695 	.word	0x0800a695
  {
    case TIM_CHANNEL_1:
      {
        if(sClearInputConfig->ClearInputState != RESET)
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d008      	beq.n	800a62a <HAL_TIM_ConfigOCrefClear+0xd6>
        {
          /* Enable the Ocref clear feature for Channel 1 */
          htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	6992      	ldr	r2, [r2, #24]
 800a622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a626:	619a      	str	r2, [r3, #24]
        {
          /* Disable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;
        }
      }
      break;
 800a628:	e04b      	b.n	800a6c2 <HAL_TIM_ConfigOCrefClear+0x16e>
          htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
        }
        else
        {
          /* Disable the Ocref clear feature for Channel 1 */
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	6812      	ldr	r2, [r2, #0]
 800a632:	6992      	ldr	r2, [r2, #24]
 800a634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a638:	619a      	str	r2, [r3, #24]
        }
      }
      break;
 800a63a:	e042      	b.n	800a6c2 <HAL_TIM_ConfigOCrefClear+0x16e>
    case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        if(sClearInputConfig->ClearInputState != RESET)
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d008      	beq.n	800a656 <HAL_TIM_ConfigOCrefClear+0x102>
        {
          /* Enable the Ocref clear feature for Channel 2 */
          htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	6812      	ldr	r2, [r2, #0]
 800a64c:	6992      	ldr	r2, [r2, #24]
 800a64e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a652:	619a      	str	r2, [r3, #24]
        {
          /* Disable the Ocref clear feature for Channel 2 */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;
        }
      }
    break;
 800a654:	e035      	b.n	800a6c2 <HAL_TIM_ConfigOCrefClear+0x16e>
          htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
        }
        else
        {
          /* Disable the Ocref clear feature for Channel 2 */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	6992      	ldr	r2, [r2, #24]
 800a660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a664:	619a      	str	r2, [r3, #24]
        }
      }
    break;
 800a666:	e02c      	b.n	800a6c2 <HAL_TIM_ConfigOCrefClear+0x16e>
    case TIM_CHANNEL_3:
      {
        assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
        if(sClearInputConfig->ClearInputState != RESET)
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d008      	beq.n	800a682 <HAL_TIM_ConfigOCrefClear+0x12e>
        {
          /* Enable the Ocref clear feature for Channel 3 */
          htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	6812      	ldr	r2, [r2, #0]
 800a678:	69d2      	ldr	r2, [r2, #28]
 800a67a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a67e:	61da      	str	r2, [r3, #28]
        {
          /* Disable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;
        }
      }
    break;
 800a680:	e01f      	b.n	800a6c2 <HAL_TIM_ConfigOCrefClear+0x16e>
          htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
        }
        else
        {
          /* Disable the Ocref clear feature for Channel 3 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	6812      	ldr	r2, [r2, #0]
 800a68a:	69d2      	ldr	r2, [r2, #28]
 800a68c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a690:	61da      	str	r2, [r3, #28]
        }
      }
    break;
 800a692:	e016      	b.n	800a6c2 <HAL_TIM_ConfigOCrefClear+0x16e>
    case TIM_CHANNEL_4:
      {
        assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
        if(sClearInputConfig->ClearInputState != RESET)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d008      	beq.n	800a6ae <HAL_TIM_ConfigOCrefClear+0x15a>
        {
          /* Enable the Ocref clear feature for Channel 4 */
          htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	6812      	ldr	r2, [r2, #0]
 800a6a4:	69d2      	ldr	r2, [r2, #28]
 800a6a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6aa:	61da      	str	r2, [r3, #28]
        {
          /* Disable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;
        }
      }
    break;
 800a6ac:	e009      	b.n	800a6c2 <HAL_TIM_ConfigOCrefClear+0x16e>
          htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
        }
        else
        {
          /* Disable the Ocref clear feature for Channel 4 */
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	6812      	ldr	r2, [r2, #0]
 800a6b6:	69d2      	ldr	r2, [r2, #28]
 800a6b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6bc:	61da      	str	r2, [r3, #28]
        }
      }
    break;
 800a6be:	e000      	b.n	800a6c2 <HAL_TIM_ConfigOCrefClear+0x16e>
    default:
    break;
 800a6c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d101      	bne.n	800a6f8 <HAL_TIM_ConfigClockSource+0x1c>
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	e0cf      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x1bc>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2202      	movs	r2, #2
 800a704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a71e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b40      	cmp	r3, #64	; 0x40
 800a72e:	d07c      	beq.n	800a82a <HAL_TIM_ConfigClockSource+0x14e>
 800a730:	2b40      	cmp	r3, #64	; 0x40
 800a732:	d80f      	bhi.n	800a754 <HAL_TIM_ConfigClockSource+0x78>
 800a734:	2b10      	cmp	r3, #16
 800a736:	f000 8091 	beq.w	800a85c <HAL_TIM_ConfigClockSource+0x180>
 800a73a:	2b10      	cmp	r3, #16
 800a73c:	d803      	bhi.n	800a746 <HAL_TIM_ConfigClockSource+0x6a>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 8085 	beq.w	800a84e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800a744:	e09f      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800a746:	2b20      	cmp	r3, #32
 800a748:	f000 808f 	beq.w	800a86a <HAL_TIM_ConfigClockSource+0x18e>
 800a74c:	2b30      	cmp	r3, #48	; 0x30
 800a74e:	f000 8093 	beq.w	800a878 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800a752:	e098      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800a754:	2b70      	cmp	r3, #112	; 0x70
 800a756:	d016      	beq.n	800a786 <HAL_TIM_ConfigClockSource+0xaa>
 800a758:	2b70      	cmp	r3, #112	; 0x70
 800a75a:	d804      	bhi.n	800a766 <HAL_TIM_ConfigClockSource+0x8a>
 800a75c:	2b50      	cmp	r3, #80	; 0x50
 800a75e:	d040      	beq.n	800a7e2 <HAL_TIM_ConfigClockSource+0x106>
 800a760:	2b60      	cmp	r3, #96	; 0x60
 800a762:	d050      	beq.n	800a806 <HAL_TIM_ConfigClockSource+0x12a>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800a764:	e08f      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800a766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76a:	d003      	beq.n	800a774 <HAL_TIM_ConfigClockSource+0x98>
 800a76c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a770:	d024      	beq.n	800a7bc <HAL_TIM_ConfigClockSource+0xe0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800a772:	e088      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	6812      	ldr	r2, [r2, #0]
 800a77c:	6892      	ldr	r2, [r2, #8]
 800a77e:	f022 0207 	bic.w	r2, r2, #7
 800a782:	609a      	str	r2, [r3, #8]
    }
    break;
 800a784:	e07f      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	6899      	ldr	r1, [r3, #8]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f000 fef7 	bl	800b588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	60fb      	str	r3, [r7, #12]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a7a8:	60fb      	str	r3, [r7, #12]
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7b0:	60fb      	str	r3, [r7, #12]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	609a      	str	r2, [r3, #8]
    }
    break;
 800a7ba:	e064      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	6899      	ldr	r1, [r3, #8]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f000 fedc 	bl	800b588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	6812      	ldr	r2, [r2, #0]
 800a7d8:	6892      	ldr	r2, [r2, #8]
 800a7da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7de:	609a      	str	r2, [r3, #8]
    }
    break;
 800a7e0:	e051      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6819      	ldr	r1, [r3, #0]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	685a      	ldr	r2, [r3, #4]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f000 fd84 	bl	800b300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	2150      	movs	r1, #80	; 0x50
 800a800:	f000 fea4 	bl	800b54c <TIM_ITRx_SetConfig>
    }
    break;
 800a804:	e03f      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6819      	ldr	r1, [r3, #0]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	4608      	mov	r0, r1
 800a814:	4611      	mov	r1, r2
 800a816:	461a      	mov	r2, r3
 800a818:	f000 fde4 	bl	800b3e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4618      	mov	r0, r3
 800a822:	2160      	movs	r1, #96	; 0x60
 800a824:	f000 fe92 	bl	800b54c <TIM_ITRx_SetConfig>
    }
    break;
 800a828:	e02d      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6819      	ldr	r1, [r3, #0]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	4608      	mov	r0, r1
 800a838:	4611      	mov	r1, r2
 800a83a:	461a      	mov	r2, r3
 800a83c:	f000 fd60 	bl	800b300 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4618      	mov	r0, r3
 800a846:	2140      	movs	r1, #64	; 0x40
 800a848:	f000 fe80 	bl	800b54c <TIM_ITRx_SetConfig>
    }
    break;
 800a84c:	e01b      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR0:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4618      	mov	r0, r3
 800a854:	2100      	movs	r1, #0
 800a856:	f000 fe79 	bl	800b54c <TIM_ITRx_SetConfig>
    }
    break;
 800a85a:	e014      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4618      	mov	r0, r3
 800a862:	2110      	movs	r1, #16
 800a864:	f000 fe72 	bl	800b54c <TIM_ITRx_SetConfig>
    }
    break;
 800a868:	e00d      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4618      	mov	r0, r3
 800a870:	2120      	movs	r1, #32
 800a872:	f000 fe6b 	bl	800b54c <TIM_ITRx_SetConfig>
    }
    break;
 800a876:	e006      	b.n	800a886 <HAL_TIM_ConfigClockSource+0x1aa>
  case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4618      	mov	r0, r3
 800a87e:	2130      	movs	r1, #48	; 0x30
 800a880:	f000 fe64 	bl	800b54c <TIM_ITRx_SetConfig>
    }
    break;
 800a884:	bf00      	nop

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2 = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8bc:	60fb      	str	r3, [r7, #12]

  /* Set the the TI1 selection */
  tmpcr2 |= TI1_Selection;
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <HAL_TIM_SlaveConfigSynchronization+0x18>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e024      	b.n	800a93e <HAL_TIM_SlaveConfigSynchronization+0x62>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	f000 fc04 	bl	800b114 <TIM_SlaveTimer_SetConfig>

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	6812      	ldr	r2, [r2, #0]
 800a914:	68d2      	ldr	r2, [r2, #12]
 800a916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a91a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6812      	ldr	r2, [r2, #0]
 800a924:	68d2      	ldr	r2, [r2, #12]
 800a926:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a92a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
    }
 800a93e:	4618      	mov	r0, r3
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop

0800a948 <HAL_TIM_SlaveConfigSynchronization_IT>:
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim,
                                                        TIM_SlaveConfigTypeDef * sSlaveConfig)
    {
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
      /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d101      	bne.n	800a960 <HAL_TIM_SlaveConfigSynchronization_IT+0x18>
 800a95c:	2302      	movs	r3, #2
 800a95e:	e024      	b.n	800a9aa <HAL_TIM_SlaveConfigSynchronization_IT+0x62>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	f000 fbce 	bl	800b114 <TIM_SlaveTimer_SetConfig>

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6812      	ldr	r2, [r2, #0]
 800a980:	68d2      	ldr	r2, [r2, #12]
 800a982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a986:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	6812      	ldr	r2, [r2, #0]
 800a990:	68d2      	ldr	r2, [r2, #12]
 800a992:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a996:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop

0800a9b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3 : TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4 : TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(htim);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d101      	bne.n	800a9d0 <HAL_TIM_ReadCapturedValue+0x1c>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	e03d      	b.n	800aa4c <HAL_TIM_ReadCapturedValue+0x98>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b0c      	cmp	r3, #12
 800a9dc:	d830      	bhi.n	800aa40 <HAL_TIM_ReadCapturedValue+0x8c>
 800a9de:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <HAL_TIM_ReadCapturedValue+0x30>)
 800a9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e4:	0800aa19 	.word	0x0800aa19
 800a9e8:	0800aa41 	.word	0x0800aa41
 800a9ec:	0800aa41 	.word	0x0800aa41
 800a9f0:	0800aa41 	.word	0x0800aa41
 800a9f4:	0800aa23 	.word	0x0800aa23
 800a9f8:	0800aa41 	.word	0x0800aa41
 800a9fc:	0800aa41 	.word	0x0800aa41
 800aa00:	0800aa41 	.word	0x0800aa41
 800aa04:	0800aa2d 	.word	0x0800aa2d
 800aa08:	0800aa41 	.word	0x0800aa41
 800aa0c:	0800aa41 	.word	0x0800aa41
 800aa10:	0800aa41 	.word	0x0800aa41
 800aa14:	0800aa37 	.word	0x0800aa37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1e:	60fb      	str	r3, [r7, #12]

      break;
 800aa20:	e00f      	b.n	800aa42 <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa28:	60fb      	str	r3, [r7, #12]

      break;
 800aa2a:	e00a      	b.n	800aa42 <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	60fb      	str	r3, [r7, #12]

      break;
 800aa34:	e005      	b.n	800aa42 <HAL_TIM_ReadCapturedValue+0x8e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3c:	60fb      	str	r3, [r7, #12]

      break;
 800aa3e:	e000      	b.n	800aa42 <HAL_TIM_ReadCapturedValue+0x8e>
    }

  default:
    break;
 800aa40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return tmpreg;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop

0800aa6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop

0800aa80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop

0800aa94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop

0800aaa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop

0800aabc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop

0800aad0 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base state
  * @param  htim : TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  return htim->State;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aade:	b2db      	uxtb	r3, r3
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC state
  * @param  htim : TIM Ouput Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  return htim->State;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aafa:	b2db      	uxtb	r3, r3
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM state
  * @param  htim : TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab16:	b2db      	uxtb	r3, r3
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture state
  * @param  htim : TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab32:	b2db      	uxtb	r3, r3
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode state
  * @param  htim : TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab4e:	b2db      	uxtb	r3, r3
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode state
  * @param  htim : TIM Encoder handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab6a:	b2db      	uxtb	r3, r3
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  HAL_TIM_ErrorCallback(htim);
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7ff ff94 	bl	800aabc <HAL_TIM_ErrorCallback>
}
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop

0800ab9c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba8:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6a1a      	ldr	r2, [r3, #32]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d103      	bne.n	800abc4 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2201      	movs	r2, #1
 800abc0:	761a      	strb	r2, [r3, #24]
 800abc2:	e019      	b.n	800abf8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d103      	bne.n	800abd6 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2202      	movs	r2, #2
 800abd2:	761a      	strb	r2, [r3, #24]
 800abd4:	e010      	b.n	800abf8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d103      	bne.n	800abe8 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2204      	movs	r2, #4
 800abe4:	761a      	strb	r2, [r3, #24]
 800abe6:	e007      	b.n	800abf8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d102      	bne.n	800abf8 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2208      	movs	r2, #8
 800abf6:	761a      	strb	r2, [r3, #24]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff ff4b 	bl	800aa94 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	761a      	strb	r2, [r3, #24]
}
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop

0800ac0c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6a1a      	ldr	r2, [r3, #32]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d103      	bne.n	800ac34 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	761a      	strb	r2, [r3, #24]
 800ac32:	e019      	b.n	800ac68 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d103      	bne.n	800ac46 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2202      	movs	r2, #2
 800ac42:	761a      	strb	r2, [r3, #24]
 800ac44:	e010      	b.n	800ac68 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d103      	bne.n	800ac58 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2204      	movs	r2, #4
 800ac54:	761a      	strb	r2, [r3, #24]
 800ac56:	e007      	b.n	800ac68 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d102      	bne.n	800ac68 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2208      	movs	r2, #8
 800ac66:	761a      	strb	r2, [r3, #24]
  }

  HAL_TIM_IC_CaptureCallback(htim);
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff ff09 	bl	800aa80 <HAL_TIM_IC_CaptureCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	761a      	strb	r2, [r3, #24]
}
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop

0800ac7c <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  HAL_TIM_PeriodElapsedCallback(htim);
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f005 fe6a 	bl	801096c <HAL_TIM_PeriodElapsedCallback>
}
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop

0800aca0 <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acac:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  HAL_TIM_TriggerCallback(htim);
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f7ff fef6 	bl	800aaa8 <HAL_TIM_TriggerCallback>
}
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop

0800acc4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800acde:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d018      	beq.n	800ad18 <TIM_Base_SetConfig+0x54>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acec:	d014      	beq.n	800ad18 <TIM_Base_SetConfig+0x54>
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d00d      	beq.n	800ad18 <TIM_Base_SetConfig+0x54>
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d006      	beq.n	800ad18 <TIM_Base_SetConfig+0x54>
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ad10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d108      	bne.n	800ad2a <TIM_Base_SetConfig+0x66>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ad30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d018      	beq.n	800ad6a <TIM_Base_SetConfig+0xa6>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad3e:	d014      	beq.n	800ad6a <TIM_Base_SetConfig+0xa6>
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d00d      	beq.n	800ad6a <TIM_Base_SetConfig+0xa6>
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d006      	beq.n	800ad6a <TIM_Base_SetConfig+0xa6>
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ad62:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d108      	bne.n	800ad7c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	689a      	ldr	r2, [r3, #8]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ad98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d103      	bne.n	800ada8 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	691a      	ldr	r2, [r3, #16]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	615a      	str	r2, [r3, #20]
}
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	f023 0201 	bic.w	r2, r3, #1
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f023 0303 	bic.w	r3, r3, #3
 800adfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	f023 0302 	bic.w	r3, r3, #2
 800ae0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ae1e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d10c      	bne.n	800ae40 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f023 0308 	bic.w	r3, r3, #8
 800ae2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f023 0304 	bic.w	r3, r3, #4
 800ae3e:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ae46:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d111      	bne.n	800ae72 <TIM_OC1_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	621a      	str	r2, [r3, #32]
}
 800ae8c:	371c      	adds	r7, #28
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop

0800ae98 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	f023 0210 	bic.w	r2, r3, #16
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	021b      	lsls	r3, r3, #8
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f023 0320 	bic.w	r3, r3, #32
 800aeee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	011b      	lsls	r3, r3, #4
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800af02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800af06:	429a      	cmp	r2, r3
 800af08:	d10d      	bne.n	800af26 <TIM_OC2_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af24:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800af2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800af30:	429a      	cmp	r2, r3
 800af32:	d113      	bne.n	800af5c <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	4313      	orrs	r3, r2
 800af5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	621a      	str	r2, [r3, #32]
}
 800af76:	371c      	adds	r7, #28
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af80:	b480      	push	{r7}
 800af82:	b087      	sub	sp, #28
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f023 0303 	bic.w	r3, r3, #3
 800afc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	021b      	lsls	r3, r3, #8
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	4313      	orrs	r3, r2
 800afe0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800afe8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800afec:	429a      	cmp	r2, r3
 800afee:	d10d      	bne.n	800b00c <TIM_OC3_SetConfig+0x8c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	021b      	lsls	r3, r3, #8
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	4313      	orrs	r3, r2
 800b002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b00a:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b012:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b016:	429a      	cmp	r2, r3
 800b018:	d113      	bne.n	800b042 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	011b      	lsls	r3, r3, #4
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	4313      	orrs	r3, r2
 800b034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	4313      	orrs	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	621a      	str	r2, [r3, #32]
}
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop

0800b068 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0a2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0aa:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	021b      	lsls	r3, r3, #8
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0be:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	031b      	lsls	r3, r3, #12
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b0d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d109      	bne.n	800b0ee <TIM_OC4_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	019b      	lsls	r3, r3, #6
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	621a      	str	r2, [r3, #32]
}
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop

0800b114 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig: The slave configuration structure
  * @retval None
  */
static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b138:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	4313      	orrs	r3, r2
 800b142:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f023 0307 	bic.w	r3, r3, #7
 800b14a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	4313      	orrs	r3, r2
 800b154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	2b30      	cmp	r3, #48	; 0x30
 800b164:	d05a      	beq.n	800b21c <TIM_SlaveTimer_SetConfig+0x108>
 800b166:	2b30      	cmp	r3, #48	; 0x30
 800b168:	d806      	bhi.n	800b178 <TIM_SlaveTimer_SetConfig+0x64>
 800b16a:	2b10      	cmp	r3, #16
 800b16c:	d058      	beq.n	800b220 <TIM_SlaveTimer_SetConfig+0x10c>
 800b16e:	2b20      	cmp	r3, #32
 800b170:	d058      	beq.n	800b224 <TIM_SlaveTimer_SetConfig+0x110>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d058      	beq.n	800b228 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 800b176:	e058      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b178:	2b50      	cmp	r3, #80	; 0x50
 800b17a:	d037      	beq.n	800b1ec <TIM_SlaveTimer_SetConfig+0xd8>
 800b17c:	2b50      	cmp	r3, #80	; 0x50
 800b17e:	d802      	bhi.n	800b186 <TIM_SlaveTimer_SetConfig+0x72>
 800b180:	2b40      	cmp	r3, #64	; 0x40
 800b182:	d010      	beq.n	800b1a6 <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 800b184:	e051      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b186:	2b60      	cmp	r3, #96	; 0x60
 800b188:	d03c      	beq.n	800b204 <TIM_SlaveTimer_SetConfig+0xf0>
 800b18a:	2b70      	cmp	r3, #112	; 0x70
 800b18c:	d000      	beq.n	800b190 <TIM_SlaveTimer_SetConfig+0x7c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 800b18e:	e04c      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	68d9      	ldr	r1, [r3, #12]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	689a      	ldr	r2, [r3, #8]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	f000 f9f2 	bl	800b588 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
    }
    break;
 800b1a4:	e041      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	6a1b      	ldr	r3, [r3, #32]
 800b1ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	6812      	ldr	r2, [r2, #0]
 800b1b6:	6a12      	ldr	r2, [r2, #32]
 800b1b8:	f022 0201 	bic.w	r2, r2, #1
 800b1bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	613b      	str	r3, [r7, #16]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1cc:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	011b      	lsls	r3, r3, #4
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	613b      	str	r3, [r7, #16]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	621a      	str	r2, [r3, #32]

    }
    break;
 800b1ea:	e01e      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6819      	ldr	r1, [r3, #0]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	4608      	mov	r0, r1
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	f000 f87f 	bl	800b300 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
    }
    break;
 800b202:	e012      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6819      	ldr	r1, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	689a      	ldr	r2, [r3, #8]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	4608      	mov	r0, r1
 800b212:	4611      	mov	r1, r2
 800b214:	461a      	mov	r2, r3
 800b216:	f000 f8e5 	bl	800b3e4 <TIM_TI2_ConfigInputStage>
                                sSlaveConfig->TriggerPolarity,
                                sSlaveConfig->TriggerFilter);
    }
    break;
 800b21a:	e006      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>
  case TIM_TS_ITR3:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;
 800b21c:	bf00      	nop
 800b21e:	e004      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>
  case TIM_TS_ITR1:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;
 800b220:	bf00      	nop
 800b222:	e002      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>
  case TIM_TS_ITR2:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;
 800b224:	bf00      	nop
 800b226:	e000      	b.n	800b22a <TIM_SlaveTimer_SetConfig+0x116>
  case TIM_TS_ITR0:
    {
      /* Check the parameter */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;
 800b228:	bf00      	nop
    break;

  default:
    break;
  }
}
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	f023 0201 	bic.w	r2, r3, #1
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800b264:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b268:	429a      	cmp	r2, r3
 800b26a:	d018      	beq.n	800b29e <TIM_TI1_SetConfig+0x6e>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b272:	d014      	beq.n	800b29e <TIM_TI1_SetConfig+0x6e>
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b27a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b27e:	429a      	cmp	r2, r3
 800b280:	d00d      	beq.n	800b29e <TIM_TI1_SetConfig+0x6e>
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b288:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d006      	beq.n	800b29e <TIM_TI1_SetConfig+0x6e>
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b296:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d101      	bne.n	800b2a2 <TIM_TI1_SetConfig+0x72>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e000      	b.n	800b2a4 <TIM_TI1_SetConfig+0x74>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d008      	beq.n	800b2ba <TIM_TI1_SetConfig+0x8a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f023 0303 	bic.w	r3, r3, #3
 800b2ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	e003      	b.n	800b2c2 <TIM_TI1_SetConfig+0x92>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f043 0301 	orr.w	r3, r3, #1
 800b2c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	011b      	lsls	r3, r3, #4
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f023 030a 	bic.w	r3, r3, #10
 800b2dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f003 030a 	and.w	r3, r3, #10
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	621a      	str	r2, [r3, #32]
}
 800b2f6:	371c      	adds	r7, #28
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6a1b      	ldr	r3, [r3, #32]
 800b318:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f023 0201 	bic.w	r2, r3, #1
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b332:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	f023 030a 	bic.w	r3, r3, #10
 800b344:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	621a      	str	r2, [r3, #32]
}
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	f023 0210 	bic.w	r2, r3, #16
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	697a      	ldr	r2, [r7, #20]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b3aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	031b      	lsls	r3, r3, #12
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b3be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	011b      	lsls	r3, r3, #4
 800b3c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	621a      	str	r2, [r3, #32]
}
 800b3da:	371c      	adds	r7, #28
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6a1b      	ldr	r3, [r3, #32]
 800b3fc:	f023 0210 	bic.w	r2, r3, #16
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b416:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	031b      	lsls	r3, r3, #12
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	4313      	orrs	r3, r2
 800b420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	011b      	lsls	r3, r3, #4
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	4313      	orrs	r3, r2
 800b432:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	621a      	str	r2, [r3, #32]
}
 800b440:	371c      	adds	r7, #28
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop

0800b44c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b087      	sub	sp, #28
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	69db      	ldr	r3, [r3, #28]
 800b472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6a1b      	ldr	r3, [r3, #32]
 800b478:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f023 0303 	bic.w	r3, r3, #3
 800b480:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4313      	orrs	r3, r2
 800b488:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b490:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	b2db      	uxtb	r3, r3
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b4a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	021b      	lsls	r3, r3, #8
 800b4aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	621a      	str	r2, [r3, #32]
}
 800b4c0:	371c      	adds	r7, #28
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop

0800b4cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	69db      	ldr	r3, [r3, #28]
 800b4f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6a1b      	ldr	r3, [r3, #32]
 800b4f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b500:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	021b      	lsls	r3, r3, #8
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	4313      	orrs	r3, r2
 800b50a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b512:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	031b      	lsls	r3, r3, #12
 800b518:	b29b      	uxth	r3, r3
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b526:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	031b      	lsls	r3, r3, #12
 800b52c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	4313      	orrs	r3, r2
 800b534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	621a      	str	r2, [r3, #32]
}
 800b542:	371c      	adds	r7, #28
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	460b      	mov	r3, r1
 800b556:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b568:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800b56a:	887b      	ldrh	r3, [r7, #2]
 800b56c:	f043 0307 	orr.w	r3, r3, #7
 800b570:	b29b      	uxth	r3, r3
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	4313      	orrs	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	609a      	str	r2, [r3, #8]
}
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	021a      	lsls	r2, r3, #8
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	431a      	orrs	r2, r3
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	697a      	ldr	r2, [r7, #20]
 800b5be:	609a      	str	r2, [r3, #8]
}
 800b5c0:	371c      	adds	r7, #28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop

0800b5cc <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6a1a      	ldr	r2, [r3, #32]
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	43db      	mvns	r3, r3
 800b5ee:	401a      	ands	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a1a      	ldr	r2, [r3, #32]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b600:	431a      	orrs	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	621a      	str	r2, [r3, #32]
}
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08a      	sub	sp, #40	; 0x28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if(htim == NULL)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e088      	b.n	800b736 <HAL_TIMEx_HallSensor_Init+0x126>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d106      	bne.n	800b63e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f8b1 	bl	800b7a0 <HAL_TIMEx_HallSensor_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2202      	movs	r2, #2
 800b642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3304      	adds	r3, #4
 800b64e:	4610      	mov	r0, r2
 800b650:	4619      	mov	r1, r3
 800b652:	f7ff fb37 	bl	800acc4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6819      	ldr	r1, [r3, #0]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	4608      	mov	r0, r1
 800b664:	4611      	mov	r1, r2
 800b666:	2203      	movs	r2, #3
 800b668:	f7ff fde2 	bl	800b230 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6812      	ldr	r2, [r2, #0]
 800b674:	6992      	ldr	r2, [r2, #24]
 800b676:	f022 020c 	bic.w	r2, r2, #12
 800b67a:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6812      	ldr	r2, [r2, #0]
 800b684:	6991      	ldr	r1, [r2, #24]
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	6852      	ldr	r2, [r2, #4]
 800b68a:	430a      	orrs	r2, r1
 800b68c:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	6812      	ldr	r2, [r2, #0]
 800b696:	6852      	ldr	r2, [r2, #4]
 800b698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b69c:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	6812      	ldr	r2, [r2, #0]
 800b6a6:	6892      	ldr	r2, [r2, #8]
 800b6a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b6ac:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6812      	ldr	r2, [r2, #0]
 800b6b6:	6892      	ldr	r2, [r2, #8]
 800b6b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6bc:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	6812      	ldr	r2, [r2, #0]
 800b6c6:	6892      	ldr	r2, [r2, #8]
 800b6c8:	f022 0207 	bic.w	r2, r2, #7
 800b6cc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	6812      	ldr	r2, [r2, #0]
 800b6d6:	6892      	ldr	r2, [r2, #8]
 800b6d8:	f042 0204 	orr.w	r2, r2, #4
 800b6dc:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800b6e6:	2370      	movs	r3, #112	; 0x70
 800b6e8:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	f107 030c 	add.w	r3, r7, #12
 800b704:	4610      	mov	r0, r2
 800b706:	4619      	mov	r1, r3
 800b708:	f7ff fbc6 	bl	800ae98 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	6812      	ldr	r2, [r2, #0]
 800b714:	6852      	ldr	r2, [r2, #4]
 800b716:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b71a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	6812      	ldr	r2, [r2, #0]
 800b724:	6852      	ldr	r2, [r2, #4]
 800b726:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800b72a:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3728      	adds	r7, #40	; 0x28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop

0800b740 <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2202      	movs	r2, #2
 800b74c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6a1a      	ldr	r2, [r3, #32]
 800b756:	f241 1311 	movw	r3, #4369	; 0x1111
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10f      	bne.n	800b780 <HAL_TIMEx_HallSensor_DeInit+0x40>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6a1a      	ldr	r2, [r3, #32]
 800b766:	f240 4344 	movw	r3, #1092	; 0x444
 800b76a:	4013      	ands	r3, r2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d107      	bne.n	800b780 <HAL_TIMEx_HallSensor_DeInit+0x40>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	6812      	ldr	r2, [r2, #0]
 800b778:	6812      	ldr	r2, [r2, #0]
 800b77a:	f022 0201 	bic.w	r2, r2, #1
 800b77e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f817 	bl	800b7b4 <HAL_TIMEx_HallSensor_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop

0800b7b4 <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop

0800b7c8 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f7ff fef7 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	6812      	ldr	r2, [r2, #0]
 800b7e6:	6812      	ldr	r2, [r2, #0]
 800b7e8:	f042 0201 	orr.w	r2, r2, #1
 800b7ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4618      	mov	r0, r3
 800b806:	2100      	movs	r1, #0
 800b808:	2200      	movs	r2, #0
 800b80a:	f7ff fedf 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6a1a      	ldr	r2, [r3, #32]
 800b814:	f241 1311 	movw	r3, #4369	; 0x1111
 800b818:	4013      	ands	r3, r2
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10f      	bne.n	800b83e <HAL_TIMEx_HallSensor_Stop+0x46>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	6a1a      	ldr	r2, [r3, #32]
 800b824:	f240 4344 	movw	r3, #1092	; 0x444
 800b828:	4013      	ands	r3, r2
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d107      	bne.n	800b83e <HAL_TIMEx_HallSensor_Stop+0x46>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	6812      	ldr	r2, [r2, #0]
 800b836:	6812      	ldr	r2, [r2, #0]
 800b838:	f022 0201 	bic.w	r2, r2, #1
 800b83c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	6812      	ldr	r2, [r2, #0]
 800b858:	68d2      	ldr	r2, [r2, #12]
 800b85a:	f042 0202 	orr.w	r2, r2, #2
 800b85e:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4618      	mov	r0, r3
 800b866:	2100      	movs	r1, #0
 800b868:	2201      	movs	r2, #1
 800b86a:	f7ff feaf 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	6812      	ldr	r2, [r2, #0]
 800b876:	6812      	ldr	r2, [r2, #0]
 800b878:	f042 0201 	orr.w	r2, r2, #1
 800b87c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4618      	mov	r0, r3
 800b896:	2100      	movs	r1, #0
 800b898:	2200      	movs	r2, #0
 800b89a:	f7ff fe97 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	6812      	ldr	r2, [r2, #0]
 800b8a6:	68d2      	ldr	r2, [r2, #12]
 800b8a8:	f022 0202 	bic.w	r2, r2, #2
 800b8ac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6a1a      	ldr	r2, [r3, #32]
 800b8b4:	f241 1311 	movw	r3, #4369	; 0x1111
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10f      	bne.n	800b8de <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	6a1a      	ldr	r2, [r3, #32]
 800b8c4:	f240 4344 	movw	r3, #1092	; 0x444
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d107      	bne.n	800b8de <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	6812      	ldr	r2, [r2, #0]
 800b8d6:	6812      	ldr	r2, [r2, #0]
 800b8d8:	f022 0201 	bic.w	r2, r2, #1
 800b8dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData : The destination Buffer address.
  * @param  Length : The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

   if((htim->State == HAL_TIM_STATE_BUSY))
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d101      	bne.n	800b906 <HAL_TIMEx_HallSensor_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800b902:	2302      	movs	r3, #2
 800b904:	e041      	b.n	800b98a <HAL_TIMEx_HallSensor_Start_DMA+0xa2>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d10b      	bne.n	800b92a <HAL_TIMEx_HallSensor_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0 ) && (Length > 0))
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d104      	bne.n	800b922 <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
 800b918:	88fb      	ldrh	r3, [r7, #6]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	e033      	b.n	800b98a <HAL_TIMEx_HallSensor_Start_DMA+0xa2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2202      	movs	r2, #2
 800b926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4618      	mov	r0, r3
 800b930:	2100      	movs	r1, #0
 800b932:	2201      	movs	r2, #1
 800b934:	f7ff fe4a 	bl	800b5cc <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6a1a      	ldr	r2, [r3, #32]
 800b93c:	f64a 430d 	movw	r3, #44045	; 0xac0d
 800b940:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b944:	6293      	str	r3, [r2, #40]	; 0x28
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6a1a      	ldr	r2, [r3, #32]
 800b94a:	f64a 3379 	movw	r3, #43897	; 0xab79
 800b94e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b952:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable the DMA channel for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6a18      	ldr	r0, [r3, #32]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3334      	adds	r3, #52	; 0x34
 800b95e:	4619      	mov	r1, r3
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	88fb      	ldrh	r3, [r7, #6]
 800b964:	f7f5 fc32 	bl	80011cc <HAL_DMA_Start_IT>

  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	6812      	ldr	r2, [r2, #0]
 800b970:	68d2      	ldr	r2, [r2, #12]
 800b972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	6812      	ldr	r2, [r2, #0]
 800b980:	6812      	ldr	r2, [r2, #0]
 800b982:	f042 0201 	orr.w	r2, r2, #1
 800b986:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop

0800b994 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the 3 possible channels that are used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f7ff fe11 	bl	800b5cc <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	6812      	ldr	r2, [r2, #0]
 800b9b2:	68d2      	ldr	r2, [r2, #12]
 800b9b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b9b8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6a1a      	ldr	r2, [r3, #32]
 800b9c0:	f241 1311 	movw	r3, #4369	; 0x1111
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10f      	bne.n	800b9ea <HAL_TIMEx_HallSensor_Stop_DMA+0x56>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	6a1a      	ldr	r2, [r3, #32]
 800b9d0:	f240 4344 	movw	r3, #1092	; 0x444
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d107      	bne.n	800b9ea <HAL_TIMEx_HallSensor_Stop_DMA+0x56>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	6812      	ldr	r2, [r2, #0]
 800b9e2:	6812      	ldr	r2, [r2, #0]
 800b9e4:	f022 0201 	bic.w	r2, r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4618      	mov	r0, r3
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	2204      	movs	r2, #4
 800ba08:	f001 f84e 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	6812      	ldr	r2, [r2, #0]
 800ba14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ba16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	6812      	ldr	r2, [r2, #0]
 800ba24:	6812      	ldr	r2, [r2, #0]
 800ba26:	f042 0201 	orr.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop

0800ba38 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f001 f82c 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	f241 1311 	movw	r3, #4369	; 0x1111
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10f      	bne.n	800ba80 <HAL_TIMEx_OCN_Stop+0x48>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6a1a      	ldr	r2, [r3, #32]
 800ba66:	f240 4344 	movw	r3, #1092	; 0x444
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d107      	bne.n	800ba80 <HAL_TIMEx_OCN_Stop+0x48>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	6812      	ldr	r2, [r2, #0]
 800ba78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ba7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6a1a      	ldr	r2, [r3, #32]
 800ba86:	f241 1311 	movw	r3, #4369	; 0x1111
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10f      	bne.n	800bab0 <HAL_TIMEx_OCN_Stop+0x78>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6a1a      	ldr	r2, [r3, #32]
 800ba96:	f240 4344 	movw	r3, #1092	; 0x444
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d107      	bne.n	800bab0 <HAL_TIMEx_OCN_Stop+0x78>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	6812      	ldr	r2, [r2, #0]
 800baa8:	6812      	ldr	r2, [r2, #0]
 800baaa:	f022 0201 	bic.w	r2, r2, #1
 800baae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop

0800babc <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b0c      	cmp	r3, #12
 800baca:	d841      	bhi.n	800bb50 <HAL_TIMEx_OCN_Start_IT+0x94>
 800bacc:	a201      	add	r2, pc, #4	; (adr r2, 800bad4 <HAL_TIMEx_OCN_Start_IT+0x18>)
 800bace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad2:	bf00      	nop
 800bad4:	0800bb09 	.word	0x0800bb09
 800bad8:	0800bb51 	.word	0x0800bb51
 800badc:	0800bb51 	.word	0x0800bb51
 800bae0:	0800bb51 	.word	0x0800bb51
 800bae4:	0800bb1b 	.word	0x0800bb1b
 800bae8:	0800bb51 	.word	0x0800bb51
 800baec:	0800bb51 	.word	0x0800bb51
 800baf0:	0800bb51 	.word	0x0800bb51
 800baf4:	0800bb2d 	.word	0x0800bb2d
 800baf8:	0800bb51 	.word	0x0800bb51
 800bafc:	0800bb51 	.word	0x0800bb51
 800bb00:	0800bb51 	.word	0x0800bb51
 800bb04:	0800bb3f 	.word	0x0800bb3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	6812      	ldr	r2, [r2, #0]
 800bb10:	68d2      	ldr	r2, [r2, #12]
 800bb12:	f042 0202 	orr.w	r2, r2, #2
 800bb16:	60da      	str	r2, [r3, #12]
    }
    break;
 800bb18:	e01b      	b.n	800bb52 <HAL_TIMEx_OCN_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	6812      	ldr	r2, [r2, #0]
 800bb22:	68d2      	ldr	r2, [r2, #12]
 800bb24:	f042 0204 	orr.w	r2, r2, #4
 800bb28:	60da      	str	r2, [r3, #12]
    }
    break;
 800bb2a:	e012      	b.n	800bb52 <HAL_TIMEx_OCN_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	6812      	ldr	r2, [r2, #0]
 800bb34:	68d2      	ldr	r2, [r2, #12]
 800bb36:	f042 0208 	orr.w	r2, r2, #8
 800bb3a:	60da      	str	r2, [r3, #12]
    }
    break;
 800bb3c:	e009      	b.n	800bb52 <HAL_TIMEx_OCN_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	6812      	ldr	r2, [r2, #0]
 800bb46:	68d2      	ldr	r2, [r2, #12]
 800bb48:	f042 0210 	orr.w	r2, r2, #16
 800bb4c:	60da      	str	r2, [r3, #12]
    }
    break;
 800bb4e:	e000      	b.n	800bb52 <HAL_TIMEx_OCN_Start_IT+0x96>

    default:
    break;
 800bb50:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	6812      	ldr	r2, [r2, #0]
 800bb5a:	68d2      	ldr	r2, [r2, #12]
 800bb5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb60:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4618      	mov	r0, r3
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	f000 ff9c 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	6812      	ldr	r2, [r2, #0]
 800bb78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bb7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	6812      	ldr	r2, [r2, #0]
 800bb88:	6812      	ldr	r2, [r2, #0]
 800bb8a:	f042 0201 	orr.w	r2, r2, #1
 800bb8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop

0800bb9c <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b0c      	cmp	r3, #12
 800bbae:	d841      	bhi.n	800bc34 <HAL_TIMEx_OCN_Stop_IT+0x98>
 800bbb0:	a201      	add	r2, pc, #4	; (adr r2, 800bbb8 <HAL_TIMEx_OCN_Stop_IT+0x1c>)
 800bbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb6:	bf00      	nop
 800bbb8:	0800bbed 	.word	0x0800bbed
 800bbbc:	0800bc35 	.word	0x0800bc35
 800bbc0:	0800bc35 	.word	0x0800bc35
 800bbc4:	0800bc35 	.word	0x0800bc35
 800bbc8:	0800bbff 	.word	0x0800bbff
 800bbcc:	0800bc35 	.word	0x0800bc35
 800bbd0:	0800bc35 	.word	0x0800bc35
 800bbd4:	0800bc35 	.word	0x0800bc35
 800bbd8:	0800bc11 	.word	0x0800bc11
 800bbdc:	0800bc35 	.word	0x0800bc35
 800bbe0:	0800bc35 	.word	0x0800bc35
 800bbe4:	0800bc35 	.word	0x0800bc35
 800bbe8:	0800bc23 	.word	0x0800bc23
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	6812      	ldr	r2, [r2, #0]
 800bbf4:	68d2      	ldr	r2, [r2, #12]
 800bbf6:	f022 0202 	bic.w	r2, r2, #2
 800bbfa:	60da      	str	r2, [r3, #12]
    }
    break;
 800bbfc:	e01b      	b.n	800bc36 <HAL_TIMEx_OCN_Stop_IT+0x9a>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	6812      	ldr	r2, [r2, #0]
 800bc06:	68d2      	ldr	r2, [r2, #12]
 800bc08:	f022 0204 	bic.w	r2, r2, #4
 800bc0c:	60da      	str	r2, [r3, #12]
    }
    break;
 800bc0e:	e012      	b.n	800bc36 <HAL_TIMEx_OCN_Stop_IT+0x9a>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	6812      	ldr	r2, [r2, #0]
 800bc18:	68d2      	ldr	r2, [r2, #12]
 800bc1a:	f022 0208 	bic.w	r2, r2, #8
 800bc1e:	60da      	str	r2, [r3, #12]
    }
    break;
 800bc20:	e009      	b.n	800bc36 <HAL_TIMEx_OCN_Stop_IT+0x9a>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	6812      	ldr	r2, [r2, #0]
 800bc2a:	68d2      	ldr	r2, [r2, #12]
 800bc2c:	f022 0210 	bic.w	r2, r2, #16
 800bc30:	60da      	str	r2, [r3, #12]
    }
    break;
 800bc32:	e000      	b.n	800bc36 <HAL_TIMEx_OCN_Stop_IT+0x9a>

    default:
    break;
 800bc34:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f000 ff32 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	f240 4344 	movw	r3, #1092	; 0x444
 800bc52:	4013      	ands	r3, r2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d107      	bne.n	800bc68 <HAL_TIMEx_OCN_Stop_IT+0xcc>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	6812      	ldr	r2, [r2, #0]
 800bc60:	68d2      	ldr	r2, [r2, #12]
 800bc62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc66:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6a1a      	ldr	r2, [r3, #32]
 800bc6e:	f241 1311 	movw	r3, #4369	; 0x1111
 800bc72:	4013      	ands	r3, r2
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10f      	bne.n	800bc98 <HAL_TIMEx_OCN_Stop_IT+0xfc>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6a1a      	ldr	r2, [r3, #32]
 800bc7e:	f240 4344 	movw	r3, #1092	; 0x444
 800bc82:	4013      	ands	r3, r2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d107      	bne.n	800bc98 <HAL_TIMEx_OCN_Stop_IT+0xfc>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	6812      	ldr	r2, [r2, #0]
 800bc90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bc92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6a1a      	ldr	r2, [r3, #32]
 800bc9e:	f241 1311 	movw	r3, #4369	; 0x1111
 800bca2:	4013      	ands	r3, r2
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10f      	bne.n	800bcc8 <HAL_TIMEx_OCN_Stop_IT+0x12c>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6a1a      	ldr	r2, [r3, #32]
 800bcae:	f240 4344 	movw	r3, #1092	; 0x444
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d107      	bne.n	800bcc8 <HAL_TIMEx_OCN_Stop_IT+0x12c>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	6812      	ldr	r2, [r2, #0]
 800bcc0:	6812      	ldr	r2, [r2, #0]
 800bcc2:	f022 0201 	bic.w	r2, r2, #1
 800bcc6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop

0800bcd4 <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d101      	bne.n	800bcf2 <HAL_TIMEx_OCN_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e0cf      	b.n	800be92 <HAL_TIMEx_OCN_Start_DMA+0x1be>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d10b      	bne.n	800bd16 <HAL_TIMEx_OCN_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0 ) && (Length > 0))
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d104      	bne.n	800bd0e <HAL_TIMEx_OCN_Start_DMA+0x3a>
 800bd04:	887b      	ldrh	r3, [r7, #2]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <HAL_TIMEx_OCN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e0c1      	b.n	800be92 <HAL_TIMEx_OCN_Start_DMA+0x1be>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2202      	movs	r2, #2
 800bd12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  switch (Channel)
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b0c      	cmp	r3, #12
 800bd1a:	f200 80a1 	bhi.w	800be60 <HAL_TIMEx_OCN_Start_DMA+0x18c>
 800bd1e:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <HAL_TIMEx_OCN_Start_DMA+0x50>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bd59 	.word	0x0800bd59
 800bd28:	0800be61 	.word	0x0800be61
 800bd2c:	0800be61 	.word	0x0800be61
 800bd30:	0800be61 	.word	0x0800be61
 800bd34:	0800bd9b 	.word	0x0800bd9b
 800bd38:	0800be61 	.word	0x0800be61
 800bd3c:	0800be61 	.word	0x0800be61
 800bd40:	0800be61 	.word	0x0800be61
 800bd44:	0800bddd 	.word	0x0800bddd
 800bd48:	0800be61 	.word	0x0800be61
 800bd4c:	0800be61 	.word	0x0800be61
 800bd50:	0800be61 	.word	0x0800be61
 800bd54:	0800be1f 	.word	0x0800be1f
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a1a      	ldr	r2, [r3, #32]
 800bd5c:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800bd60:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bd64:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6a1a      	ldr	r2, [r3, #32]
 800bd6a:	f64a 3379 	movw	r3, #43897	; 0xab79
 800bd6e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bd72:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6a18      	ldr	r0, [r3, #32]
 800bd78:	6879      	ldr	r1, [r7, #4]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3334      	adds	r3, #52	; 0x34
 800bd80:	461a      	mov	r2, r3
 800bd82:	887b      	ldrh	r3, [r7, #2]
 800bd84:	f7f5 fa22 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	6812      	ldr	r2, [r2, #0]
 800bd90:	68d2      	ldr	r2, [r2, #12]
 800bd92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd96:	60da      	str	r2, [r3, #12]
    }
    break;
 800bd98:	e063      	b.n	800be62 <HAL_TIMEx_OCN_Start_DMA+0x18e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd9e:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800bda2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bda6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdac:	f64a 3379 	movw	r3, #43897	; 0xab79
 800bdb0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bdb4:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3338      	adds	r3, #56	; 0x38
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	887b      	ldrh	r3, [r7, #2]
 800bdc6:	f7f5 fa01 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	6812      	ldr	r2, [r2, #0]
 800bdd2:	68d2      	ldr	r2, [r2, #12]
 800bdd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bdd8:	60da      	str	r2, [r3, #12]
    }
    break;
 800bdda:	e042      	b.n	800be62 <HAL_TIMEx_OCN_Start_DMA+0x18e>

    case TIM_CHANNEL_3:
{
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bde0:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800bde4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bde8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdee:	f64a 3379 	movw	r3, #43897	; 0xab79
 800bdf2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bdf6:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bdfc:	6879      	ldr	r1, [r7, #4]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	333c      	adds	r3, #60	; 0x3c
 800be04:	461a      	mov	r2, r3
 800be06:	887b      	ldrh	r3, [r7, #2]
 800be08:	f7f5 f9e0 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	6812      	ldr	r2, [r2, #0]
 800be14:	68d2      	ldr	r2, [r2, #12]
 800be16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be1a:	60da      	str	r2, [r3, #12]
    }
    break;
 800be1c:	e021      	b.n	800be62 <HAL_TIMEx_OCN_Start_DMA+0x18e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be22:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800be26:	f6c0 0300 	movt	r3, #2048	; 0x800
 800be2a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be30:	f64a 3379 	movw	r3, #43897	; 0xab79
 800be34:	f6c0 0300 	movt	r3, #2048	; 0x800
 800be38:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800be3e:	6879      	ldr	r1, [r7, #4]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3340      	adds	r3, #64	; 0x40
 800be46:	461a      	mov	r2, r3
 800be48:	887b      	ldrh	r3, [r7, #2]
 800be4a:	f7f5 f9bf 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	6812      	ldr	r2, [r2, #0]
 800be56:	68d2      	ldr	r2, [r2, #12]
 800be58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be5c:	60da      	str	r2, [r3, #12]
    }
    break;
 800be5e:	e000      	b.n	800be62 <HAL_TIMEx_OCN_Start_DMA+0x18e>

    default:
    break;
 800be60:	bf00      	nop
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	68b9      	ldr	r1, [r7, #8]
 800be6a:	2204      	movs	r2, #4
 800be6c:	f000 fe1c 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800be7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	6812      	ldr	r2, [r2, #0]
 800be8a:	f042 0201 	orr.w	r2, r2, #1
 800be8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop

0800be9c <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2b0c      	cmp	r3, #12
 800beaa:	d841      	bhi.n	800bf30 <HAL_TIMEx_OCN_Stop_DMA+0x94>
 800beac:	a201      	add	r2, pc, #4	; (adr r2, 800beb4 <HAL_TIMEx_OCN_Stop_DMA+0x18>)
 800beae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb2:	bf00      	nop
 800beb4:	0800bee9 	.word	0x0800bee9
 800beb8:	0800bf31 	.word	0x0800bf31
 800bebc:	0800bf31 	.word	0x0800bf31
 800bec0:	0800bf31 	.word	0x0800bf31
 800bec4:	0800befb 	.word	0x0800befb
 800bec8:	0800bf31 	.word	0x0800bf31
 800becc:	0800bf31 	.word	0x0800bf31
 800bed0:	0800bf31 	.word	0x0800bf31
 800bed4:	0800bf0d 	.word	0x0800bf0d
 800bed8:	0800bf31 	.word	0x0800bf31
 800bedc:	0800bf31 	.word	0x0800bf31
 800bee0:	0800bf31 	.word	0x0800bf31
 800bee4:	0800bf1f 	.word	0x0800bf1f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800bee8:	687b      	ldrne	r3, [r7, #4]
 800beea:	681b      	ldrne	r3, [r3, #0]
 800beec:	687a      	ldrne	r2, [r7, #4]
 800beee:	6812      	ldr	r2, [r2, #0]
 800bef0:	68d2      	ldr	r2, [r2, #12]
 800bef2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bef6:	60da      	str	r2, [r3, #12]
    }
    break;
 800bef8:	e01b      	b.n	800bf32 <HAL_TIMEx_OCN_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	6812      	ldr	r2, [r2, #0]
 800bf02:	68d2      	ldr	r2, [r2, #12]
 800bf04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf08:	60da      	str	r2, [r3, #12]
    }
    break;
 800bf0a:	e012      	b.n	800bf32 <HAL_TIMEx_OCN_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	6812      	ldr	r2, [r2, #0]
 800bf14:	68d2      	ldr	r2, [r2, #12]
 800bf16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf1a:	60da      	str	r2, [r3, #12]
    }
    break;
 800bf1c:	e009      	b.n	800bf32 <HAL_TIMEx_OCN_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	6812      	ldr	r2, [r2, #0]
 800bf26:	68d2      	ldr	r2, [r2, #12]
 800bf28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf2c:	60da      	str	r2, [r3, #12]
    }
    break;
 800bf2e:	e000      	b.n	800bf32 <HAL_TIMEx_OCN_Stop_DMA+0x96>

    default:
    break;
 800bf30:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4618      	mov	r0, r3
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f000 fdb4 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6a1a      	ldr	r2, [r3, #32]
 800bf46:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10f      	bne.n	800bf70 <HAL_TIMEx_OCN_Stop_DMA+0xd4>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6a1a      	ldr	r2, [r3, #32]
 800bf56:	f240 4344 	movw	r3, #1092	; 0x444
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d107      	bne.n	800bf70 <HAL_TIMEx_OCN_Stop_DMA+0xd4>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bf6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6a1a      	ldr	r2, [r3, #32]
 800bf76:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10f      	bne.n	800bfa0 <HAL_TIMEx_OCN_Stop_DMA+0x104>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6a1a      	ldr	r2, [r3, #32]
 800bf86:	f240 4344 	movw	r3, #1092	; 0x444
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d107      	bne.n	800bfa0 <HAL_TIMEx_OCN_Stop_DMA+0x104>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	6812      	ldr	r2, [r2, #0]
 800bf98:	6812      	ldr	r2, [r2, #0]
 800bf9a:	f022 0201 	bic.w	r2, r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop

0800bfb4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	2204      	movs	r2, #4
 800bfc8:	f000 fd6e 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bfd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bfda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	6812      	ldr	r2, [r2, #0]
 800bfe4:	6812      	ldr	r2, [r2, #0]
 800bfe6:	f042 0201 	orr.w	r2, r2, #1
 800bfea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop

0800bff8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4618      	mov	r0, r3
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f000 fd4c 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6a1a      	ldr	r2, [r3, #32]
 800c016:	f241 1311 	movw	r3, #4369	; 0x1111
 800c01a:	4013      	ands	r3, r2
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10f      	bne.n	800c040 <HAL_TIMEx_PWMN_Stop+0x48>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6a1a      	ldr	r2, [r3, #32]
 800c026:	f240 4344 	movw	r3, #1092	; 0x444
 800c02a:	4013      	ands	r3, r2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d107      	bne.n	800c040 <HAL_TIMEx_PWMN_Stop+0x48>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	6812      	ldr	r2, [r2, #0]
 800c038:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c03a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c03e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6a1a      	ldr	r2, [r3, #32]
 800c046:	f241 1311 	movw	r3, #4369	; 0x1111
 800c04a:	4013      	ands	r3, r2
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10f      	bne.n	800c070 <HAL_TIMEx_PWMN_Stop+0x78>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6a1a      	ldr	r2, [r3, #32]
 800c056:	f240 4344 	movw	r3, #1092	; 0x444
 800c05a:	4013      	ands	r3, r2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d107      	bne.n	800c070 <HAL_TIMEx_PWMN_Stop+0x78>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	6812      	ldr	r2, [r2, #0]
 800c068:	6812      	ldr	r2, [r2, #0]
 800c06a:	f022 0201 	bic.w	r2, r2, #1
 800c06e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop

0800c07c <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b0c      	cmp	r3, #12
 800c08a:	d841      	bhi.n	800c110 <HAL_TIMEx_PWMN_Start_IT+0x94>
 800c08c:	a201      	add	r2, pc, #4	; (adr r2, 800c094 <HAL_TIMEx_PWMN_Start_IT+0x18>)
 800c08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c092:	bf00      	nop
 800c094:	0800c0c9 	.word	0x0800c0c9
 800c098:	0800c111 	.word	0x0800c111
 800c09c:	0800c111 	.word	0x0800c111
 800c0a0:	0800c111 	.word	0x0800c111
 800c0a4:	0800c0db 	.word	0x0800c0db
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c111 	.word	0x0800c111
 800c0b4:	0800c0ed 	.word	0x0800c0ed
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c111 	.word	0x0800c111
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c0ff 	.word	0x0800c0ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	6812      	ldr	r2, [r2, #0]
 800c0d0:	68d2      	ldr	r2, [r2, #12]
 800c0d2:	f042 0202 	orr.w	r2, r2, #2
 800c0d6:	60da      	str	r2, [r3, #12]
    }
    break;
 800c0d8:	e01b      	b.n	800c112 <HAL_TIMEx_PWMN_Start_IT+0x96>

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	6812      	ldr	r2, [r2, #0]
 800c0e2:	68d2      	ldr	r2, [r2, #12]
 800c0e4:	f042 0204 	orr.w	r2, r2, #4
 800c0e8:	60da      	str	r2, [r3, #12]
    }
    break;
 800c0ea:	e012      	b.n	800c112 <HAL_TIMEx_PWMN_Start_IT+0x96>

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	6812      	ldr	r2, [r2, #0]
 800c0f4:	68d2      	ldr	r2, [r2, #12]
 800c0f6:	f042 0208 	orr.w	r2, r2, #8
 800c0fa:	60da      	str	r2, [r3, #12]
    }
    break;
 800c0fc:	e009      	b.n	800c112 <HAL_TIMEx_PWMN_Start_IT+0x96>

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	6812      	ldr	r2, [r2, #0]
 800c106:	68d2      	ldr	r2, [r2, #12]
 800c108:	f042 0210 	orr.w	r2, r2, #16
 800c10c:	60da      	str	r2, [r3, #12]
    }
    break;
 800c10e:	e000      	b.n	800c112 <HAL_TIMEx_PWMN_Start_IT+0x96>

    default:
    break;
 800c110:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	6812      	ldr	r2, [r2, #0]
 800c11a:	68d2      	ldr	r2, [r2, #12]
 800c11c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c120:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4618      	mov	r0, r3
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	2204      	movs	r2, #4
 800c12c:	f000 fcbc 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	6812      	ldr	r2, [r2, #0]
 800c138:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c13a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c13e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	6812      	ldr	r2, [r2, #0]
 800c148:	6812      	ldr	r2, [r2, #0]
 800c14a:	f042 0201 	orr.w	r2, r2, #1
 800c14e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop

0800c15c <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b0c      	cmp	r3, #12
 800c16e:	d841      	bhi.n	800c1f4 <HAL_TIMEx_PWMN_Stop_IT+0x98>
 800c170:	a201      	add	r2, pc, #4	; (adr r2, 800c178 <HAL_TIMEx_PWMN_Stop_IT+0x1c>)
 800c172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c176:	bf00      	nop
 800c178:	0800c1ad 	.word	0x0800c1ad
 800c17c:	0800c1f5 	.word	0x0800c1f5
 800c180:	0800c1f5 	.word	0x0800c1f5
 800c184:	0800c1f5 	.word	0x0800c1f5
 800c188:	0800c1bf 	.word	0x0800c1bf
 800c18c:	0800c1f5 	.word	0x0800c1f5
 800c190:	0800c1f5 	.word	0x0800c1f5
 800c194:	0800c1f5 	.word	0x0800c1f5
 800c198:	0800c1d1 	.word	0x0800c1d1
 800c19c:	0800c1f5 	.word	0x0800c1f5
 800c1a0:	0800c1f5 	.word	0x0800c1f5
 800c1a4:	0800c1f5 	.word	0x0800c1f5
 800c1a8:	0800c1e3 	.word	0x0800c1e3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6812      	ldr	r2, [r2, #0]
 800c1b4:	68d2      	ldr	r2, [r2, #12]
 800c1b6:	f022 0202 	bic.w	r2, r2, #2
 800c1ba:	60da      	str	r2, [r3, #12]
    }
    break;
 800c1bc:	e01b      	b.n	800c1f6 <HAL_TIMEx_PWMN_Stop_IT+0x9a>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	6812      	ldr	r2, [r2, #0]
 800c1c6:	68d2      	ldr	r2, [r2, #12]
 800c1c8:	f022 0204 	bic.w	r2, r2, #4
 800c1cc:	60da      	str	r2, [r3, #12]
    }
    break;
 800c1ce:	e012      	b.n	800c1f6 <HAL_TIMEx_PWMN_Stop_IT+0x9a>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	6812      	ldr	r2, [r2, #0]
 800c1d8:	68d2      	ldr	r2, [r2, #12]
 800c1da:	f022 0208 	bic.w	r2, r2, #8
 800c1de:	60da      	str	r2, [r3, #12]
    }
    break;
 800c1e0:	e009      	b.n	800c1f6 <HAL_TIMEx_PWMN_Stop_IT+0x9a>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	6812      	ldr	r2, [r2, #0]
 800c1ea:	68d2      	ldr	r2, [r2, #12]
 800c1ec:	f022 0210 	bic.w	r2, r2, #16
 800c1f0:	60da      	str	r2, [r3, #12]
    }
    break;
 800c1f2:	e000      	b.n	800c1f6 <HAL_TIMEx_PWMN_Stop_IT+0x9a>

    default:
    break;
 800c1f4:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f000 fc52 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	f240 4344 	movw	r3, #1092	; 0x444
 800c212:	4013      	ands	r3, r2
 800c214:	2b00      	cmp	r3, #0
 800c216:	d107      	bne.n	800c228 <HAL_TIMEx_PWMN_Stop_IT+0xcc>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	6812      	ldr	r2, [r2, #0]
 800c220:	68d2      	ldr	r2, [r2, #12]
 800c222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c226:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6a1a      	ldr	r2, [r3, #32]
 800c22e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c232:	4013      	ands	r3, r2
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10f      	bne.n	800c258 <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6a1a      	ldr	r2, [r3, #32]
 800c23e:	f240 4344 	movw	r3, #1092	; 0x444
 800c242:	4013      	ands	r3, r2
 800c244:	2b00      	cmp	r3, #0
 800c246:	d107      	bne.n	800c258 <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	6812      	ldr	r2, [r2, #0]
 800c250:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c256:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6a1a      	ldr	r2, [r3, #32]
 800c25e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c262:	4013      	ands	r3, r2
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10f      	bne.n	800c288 <HAL_TIMEx_PWMN_Stop_IT+0x12c>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6a1a      	ldr	r2, [r3, #32]
 800c26e:	f240 4344 	movw	r3, #1092	; 0x444
 800c272:	4013      	ands	r3, r2
 800c274:	2b00      	cmp	r3, #0
 800c276:	d107      	bne.n	800c288 <HAL_TIMEx_PWMN_Stop_IT+0x12c>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	6812      	ldr	r2, [r2, #0]
 800c280:	6812      	ldr	r2, [r2, #0]
 800c282:	f022 0201 	bic.w	r2, r2, #1
 800c286:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop

0800c294 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d101      	bne.n	800c2b2 <HAL_TIMEx_PWMN_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	e0cf      	b.n	800c452 <HAL_TIMEx_PWMN_Start_DMA+0x1be>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d10b      	bne.n	800c2d6 <HAL_TIMEx_PWMN_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0 ) && (Length > 0))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d104      	bne.n	800c2ce <HAL_TIMEx_PWMN_Start_DMA+0x3a>
 800c2c4:	887b      	ldrh	r3, [r7, #2]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <HAL_TIMEx_PWMN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e0c1      	b.n	800c452 <HAL_TIMEx_PWMN_Start_DMA+0x1be>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  switch (Channel)
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2b0c      	cmp	r3, #12
 800c2da:	f200 80a1 	bhi.w	800c420 <HAL_TIMEx_PWMN_Start_DMA+0x18c>
 800c2de:	a201      	add	r2, pc, #4	; (adr r2, 800c2e4 <HAL_TIMEx_PWMN_Start_DMA+0x50>)
 800c2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e4:	0800c319 	.word	0x0800c319
 800c2e8:	0800c421 	.word	0x0800c421
 800c2ec:	0800c421 	.word	0x0800c421
 800c2f0:	0800c421 	.word	0x0800c421
 800c2f4:	0800c35b 	.word	0x0800c35b
 800c2f8:	0800c421 	.word	0x0800c421
 800c2fc:	0800c421 	.word	0x0800c421
 800c300:	0800c421 	.word	0x0800c421
 800c304:	0800c39d 	.word	0x0800c39d
 800c308:	0800c421 	.word	0x0800c421
 800c30c:	0800c421 	.word	0x0800c421
 800c310:	0800c421 	.word	0x0800c421
 800c314:	0800c3df 	.word	0x0800c3df
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6a1a      	ldr	r2, [r3, #32]
 800c31c:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800c320:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c324:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6a1a      	ldr	r2, [r3, #32]
 800c32a:	f64a 3379 	movw	r3, #43897	; 0xab79
 800c32e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c332:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6a18      	ldr	r0, [r3, #32]
 800c338:	6879      	ldr	r1, [r7, #4]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3334      	adds	r3, #52	; 0x34
 800c340:	461a      	mov	r2, r3
 800c342:	887b      	ldrh	r3, [r7, #2]
 800c344:	f7f4 ff42 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	6812      	ldr	r2, [r2, #0]
 800c350:	68d2      	ldr	r2, [r2, #12]
 800c352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c356:	60da      	str	r2, [r3, #12]
    }
    break;
 800c358:	e063      	b.n	800c422 <HAL_TIMEx_PWMN_Start_DMA+0x18e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c35e:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800c362:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c366:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c36c:	f64a 3379 	movw	r3, #43897	; 0xab79
 800c370:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c374:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c37a:	6879      	ldr	r1, [r7, #4]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3338      	adds	r3, #56	; 0x38
 800c382:	461a      	mov	r2, r3
 800c384:	887b      	ldrh	r3, [r7, #2]
 800c386:	f7f4 ff21 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	6812      	ldr	r2, [r2, #0]
 800c392:	68d2      	ldr	r2, [r2, #12]
 800c394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c398:	60da      	str	r2, [r3, #12]
    }
    break;
 800c39a:	e042      	b.n	800c422 <HAL_TIMEx_PWMN_Start_DMA+0x18e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3a0:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800c3a4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c3a8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3ae:	f64a 3379 	movw	r3, #43897	; 0xab79
 800c3b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c3b6:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c3bc:	6879      	ldr	r1, [r7, #4]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	333c      	adds	r3, #60	; 0x3c
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	887b      	ldrh	r3, [r7, #2]
 800c3c8:	f7f4 ff00 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	6812      	ldr	r2, [r2, #0]
 800c3d4:	68d2      	ldr	r2, [r2, #12]
 800c3d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3da:	60da      	str	r2, [r3, #12]
    }
    break;
 800c3dc:	e021      	b.n	800c422 <HAL_TIMEx_PWMN_Start_DMA+0x18e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e2:	f64a 339d 	movw	r3, #43933	; 0xab9d
 800c3e6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c3ea:	6293      	str	r3, [r2, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f0:	f64a 3379 	movw	r3, #43897	; 0xab79
 800c3f4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c3f8:	6313      	str	r3, [r2, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c3fe:	6879      	ldr	r1, [r7, #4]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3340      	adds	r3, #64	; 0x40
 800c406:	461a      	mov	r2, r3
 800c408:	887b      	ldrh	r3, [r7, #2]
 800c40a:	f7f4 fedf 	bl	80011cc <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	68d2      	ldr	r2, [r2, #12]
 800c418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c41c:	60da      	str	r2, [r3, #12]
    }
    break;
 800c41e:	e000      	b.n	800c422 <HAL_TIMEx_PWMN_Start_DMA+0x18e>

    default:
    break;
 800c420:	bf00      	nop
  }

  /* Enable the complementary PWM output  */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4618      	mov	r0, r3
 800c428:	68b9      	ldr	r1, [r7, #8]
 800c42a:	2204      	movs	r2, #4
 800c42c:	f000 fb3c 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	6812      	ldr	r2, [r2, #0]
 800c438:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c43a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c43e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	6812      	ldr	r2, [r2, #0]
 800c448:	6812      	ldr	r2, [r2, #0]
 800c44a:	f042 0201 	orr.w	r2, r2, #1
 800c44e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop

0800c45c <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	2b0c      	cmp	r3, #12
 800c46a:	d841      	bhi.n	800c4f0 <HAL_TIMEx_PWMN_Stop_DMA+0x94>
 800c46c:	a201      	add	r2, pc, #4	; (adr r2, 800c474 <HAL_TIMEx_PWMN_Stop_DMA+0x18>)
 800c46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c472:	bf00      	nop
 800c474:	0800c4a9 	.word	0x0800c4a9
 800c478:	0800c4f1 	.word	0x0800c4f1
 800c47c:	0800c4f1 	.word	0x0800c4f1
 800c480:	0800c4f1 	.word	0x0800c4f1
 800c484:	0800c4bb 	.word	0x0800c4bb
 800c488:	0800c4f1 	.word	0x0800c4f1
 800c48c:	0800c4f1 	.word	0x0800c4f1
 800c490:	0800c4f1 	.word	0x0800c4f1
 800c494:	0800c4cd 	.word	0x0800c4cd
 800c498:	0800c4f1 	.word	0x0800c4f1
 800c49c:	0800c4f1 	.word	0x0800c4f1
 800c4a0:	0800c4f1 	.word	0x0800c4f1
 800c4a4:	0800c4df 	.word	0x0800c4df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	6812      	ldr	r2, [r2, #0]
 800c4b0:	68d2      	ldr	r2, [r2, #12]
 800c4b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c4b6:	60da      	str	r2, [r3, #12]
    }
    break;
 800c4b8:	e01b      	b.n	800c4f2 <HAL_TIMEx_PWMN_Stop_DMA+0x96>

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	6812      	ldr	r2, [r2, #0]
 800c4c2:	68d2      	ldr	r2, [r2, #12]
 800c4c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4c8:	60da      	str	r2, [r3, #12]
    }
    break;
 800c4ca:	e012      	b.n	800c4f2 <HAL_TIMEx_PWMN_Stop_DMA+0x96>

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	6812      	ldr	r2, [r2, #0]
 800c4d4:	68d2      	ldr	r2, [r2, #12]
 800c4d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4da:	60da      	str	r2, [r3, #12]
    }
    break;
 800c4dc:	e009      	b.n	800c4f2 <HAL_TIMEx_PWMN_Stop_DMA+0x96>

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	6812      	ldr	r2, [r2, #0]
 800c4e6:	68d2      	ldr	r2, [r2, #12]
 800c4e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c4ec:	60da      	str	r2, [r3, #12]
    }
    break;
 800c4ee:	e000      	b.n	800c4f2 <HAL_TIMEx_PWMN_Stop_DMA+0x96>

    default:
    break;
 800c4f0:	bf00      	nop
  }

  /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f000 fad4 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6a1a      	ldr	r2, [r3, #32]
 800c506:	f241 1311 	movw	r3, #4369	; 0x1111
 800c50a:	4013      	ands	r3, r2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10f      	bne.n	800c530 <HAL_TIMEx_PWMN_Stop_DMA+0xd4>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6a1a      	ldr	r2, [r3, #32]
 800c516:	f240 4344 	movw	r3, #1092	; 0x444
 800c51a:	4013      	ands	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d107      	bne.n	800c530 <HAL_TIMEx_PWMN_Stop_DMA+0xd4>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	6812      	ldr	r2, [r2, #0]
 800c528:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c52a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c52e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6a1a      	ldr	r2, [r3, #32]
 800c536:	f241 1311 	movw	r3, #4369	; 0x1111
 800c53a:	4013      	ands	r3, r2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10f      	bne.n	800c560 <HAL_TIMEx_PWMN_Stop_DMA+0x104>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6a1a      	ldr	r2, [r3, #32]
 800c546:	f240 4344 	movw	r3, #1092	; 0x444
 800c54a:	4013      	ands	r3, r2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d107      	bne.n	800c560 <HAL_TIMEx_PWMN_Stop_DMA+0x104>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	6812      	ldr	r2, [r2, #0]
 800c558:	6812      	ldr	r2, [r2, #0]
 800c55a:	f022 0201 	bic.w	r2, r2, #1
 800c55e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop

0800c574 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
  {
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4618      	mov	r0, r3
 800c584:	6839      	ldr	r1, [r7, #0]
 800c586:	2204      	movs	r2, #4
 800c588:	f000 fa8e 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	6812      	ldr	r2, [r2, #0]
 800c594:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c59a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop

0800c5a8 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f000 fa74 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6a1a      	ldr	r2, [r3, #32]
 800c5c6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10f      	bne.n	800c5f0 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6a1a      	ldr	r2, [r3, #32]
 800c5d6:	f240 4344 	movw	r3, #1092	; 0x444
 800c5da:	4013      	ands	r3, r2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d107      	bne.n	800c5f0 <HAL_TIMEx_OnePulseN_Stop+0x48>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	6812      	ldr	r2, [r2, #0]
 800c5e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c5ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6a1a      	ldr	r2, [r3, #32]
 800c5f6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10f      	bne.n	800c620 <HAL_TIMEx_OnePulseN_Stop+0x78>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	6a1a      	ldr	r2, [r3, #32]
 800c606:	f240 4344 	movw	r3, #1092	; 0x444
 800c60a:	4013      	ands	r3, r2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d107      	bne.n	800c620 <HAL_TIMEx_OnePulseN_Stop+0x78>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	6812      	ldr	r2, [r2, #0]
 800c618:	6812      	ldr	r2, [r2, #0]
 800c61a:	f022 0201 	bic.w	r2, r2, #1
 800c61e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop

0800c62c <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	6812      	ldr	r2, [r2, #0]
 800c63e:	68d2      	ldr	r2, [r2, #12]
 800c640:	f042 0202 	orr.w	r2, r2, #2
 800c644:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	6812      	ldr	r2, [r2, #0]
 800c64e:	68d2      	ldr	r2, [r2, #12]
 800c650:	f042 0204 	orr.w	r2, r2, #4
 800c654:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4618      	mov	r0, r3
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	2204      	movs	r2, #4
 800c660:	f000 fa22 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	6812      	ldr	r2, [r2, #0]
 800c66c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c66e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c672:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800c674:	2300      	movs	r3, #0
  }
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop

0800c680 <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	6812      	ldr	r2, [r2, #0]
 800c692:	68d2      	ldr	r2, [r2, #12]
 800c694:	f022 0202 	bic.w	r2, r2, #2
 800c698:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	6812      	ldr	r2, [r2, #0]
 800c6a2:	68d2      	ldr	r2, [r2, #12]
 800c6a4:	f022 0204 	bic.w	r2, r2, #4
 800c6a8:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f000 f9f8 	bl	800caa8 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	6a1a      	ldr	r2, [r3, #32]
 800c6be:	f241 1311 	movw	r3, #4369	; 0x1111
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10f      	bne.n	800c6e8 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6a1a      	ldr	r2, [r3, #32]
 800c6ce:	f240 4344 	movw	r3, #1092	; 0x444
 800c6d2:	4013      	ands	r3, r2
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d107      	bne.n	800c6e8 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	6812      	ldr	r2, [r2, #0]
 800c6e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c6e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6a1a      	ldr	r2, [r3, #32]
 800c6ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10f      	bne.n	800c718 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6a1a      	ldr	r2, [r3, #32]
 800c6fe:	f240 4344 	movw	r3, #1092	; 0x444
 800c702:	4013      	ands	r3, r2
 800c704:	2b00      	cmp	r3, #0
 800c706:	d107      	bne.n	800c718 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	6812      	ldr	r2, [r2, #0]
 800c710:	6812      	ldr	r2, [r2, #0]
 800c712:	f022 0201 	bic.w	r2, r2, #1
 800c716:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop

0800c724 <HAL_TIMEx_ConfigCommutationEvent>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800c724:	b480      	push	{r7}
 800c726:	b085      	sub	sp, #20
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c736:	2b01      	cmp	r3, #1
 800c738:	d101      	bne.n	800c73e <HAL_TIMEx_ConfigCommutationEvent+0x1a>
 800c73a:	2302      	movs	r3, #2
 800c73c:	e03c      	b.n	800c7b8 <HAL_TIMEx_ConfigCommutationEvent+0x94>
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2201      	movs	r2, #1
 800c742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d008      	beq.n	800c75e <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2b10      	cmp	r3, #16
 800c750:	d005      	beq.n	800c75e <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	2b20      	cmp	r3, #32
 800c756:	d002      	beq.n	800c75e <HAL_TIMEx_ConfigCommutationEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	2b30      	cmp	r3, #48	; 0x30
 800c75c:	d10f      	bne.n	800c77e <HAL_TIMEx_ConfigCommutationEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	6812      	ldr	r2, [r2, #0]
 800c766:	6892      	ldr	r2, [r2, #8]
 800c768:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c76c:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	6812      	ldr	r2, [r2, #0]
 800c776:	6891      	ldr	r1, [r2, #8]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	430a      	orrs	r2, r1
 800c77c:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	6812      	ldr	r2, [r2, #0]
 800c786:	6852      	ldr	r2, [r2, #4]
 800c788:	f042 0201 	orr.w	r2, r2, #1
 800c78c:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	6852      	ldr	r2, [r2, #4]
 800c798:	f022 0204 	bic.w	r2, r2, #4
 800c79c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	6812      	ldr	r2, [r2, #0]
 800c7a6:	6851      	ldr	r1, [r2, #4]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	605a      	str	r2, [r3, #4]

  __HAL_UNLOCK(htim);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_TIMEx_ConfigCommutationEvent_IT>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d101      	bne.n	800c7de <HAL_TIMEx_ConfigCommutationEvent_IT+0x1a>
 800c7da:	2302      	movs	r3, #2
 800c7dc:	e044      	b.n	800c868 <HAL_TIMEx_ConfigCommutationEvent_IT+0xa4>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d008      	beq.n	800c7fe <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	2b10      	cmp	r3, #16
 800c7f0:	d005      	beq.n	800c7fe <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2b20      	cmp	r3, #32
 800c7f6:	d002      	beq.n	800c7fe <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2b30      	cmp	r3, #48	; 0x30
 800c7fc:	d10f      	bne.n	800c81e <HAL_TIMEx_ConfigCommutationEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	6812      	ldr	r2, [r2, #0]
 800c806:	6892      	ldr	r2, [r2, #8]
 800c808:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c80c:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	6812      	ldr	r2, [r2, #0]
 800c816:	6891      	ldr	r1, [r2, #8]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	430a      	orrs	r2, r1
 800c81c:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	6812      	ldr	r2, [r2, #0]
 800c826:	6852      	ldr	r2, [r2, #4]
 800c828:	f042 0201 	orr.w	r2, r2, #1
 800c82c:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	6812      	ldr	r2, [r2, #0]
 800c836:	6852      	ldr	r2, [r2, #4]
 800c838:	f022 0204 	bic.w	r2, r2, #4
 800c83c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	6812      	ldr	r2, [r2, #0]
 800c846:	6851      	ldr	r1, [r2, #4]
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	430a      	orrs	r2, r1
 800c84c:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation Interrupt Request */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	6812      	ldr	r2, [r2, #0]
 800c856:	68d2      	ldr	r2, [r2, #12]
 800c858:	f042 0220 	orr.w	r2, r2, #32
 800c85c:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <HAL_TIMEx_ConfigCommutationEvent_DMA>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c886:	2b01      	cmp	r3, #1
 800c888:	d101      	bne.n	800c88e <HAL_TIMEx_ConfigCommutationEvent_DMA+0x1a>
 800c88a:	2302      	movs	r3, #2
 800c88c:	e052      	b.n	800c934 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xc0>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d008      	beq.n	800c8ae <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b10      	cmp	r3, #16
 800c8a0:	d005      	beq.n	800c8ae <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b20      	cmp	r3, #32
 800c8a6:	d002      	beq.n	800c8ae <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b30      	cmp	r3, #48	; 0x30
 800c8ac:	d10f      	bne.n	800c8ce <HAL_TIMEx_ConfigCommutationEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	6812      	ldr	r2, [r2, #0]
 800c8b6:	6892      	ldr	r2, [r2, #8]
 800c8b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c8bc:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	6812      	ldr	r2, [r2, #0]
 800c8c6:	6891      	ldr	r1, [r2, #8]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	430a      	orrs	r2, r1
 800c8cc:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	6812      	ldr	r2, [r2, #0]
 800c8d6:	6852      	ldr	r2, [r2, #4]
 800c8d8:	f042 0201 	orr.w	r2, r2, #1
 800c8dc:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	6812      	ldr	r2, [r2, #0]
 800c8e6:	6852      	ldr	r2, [r2, #4]
 800c8e8:	f022 0204 	bic.w	r2, r2, #4
 800c8ec:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	6812      	ldr	r2, [r2, #0]
 800c8f6:	6851      	ldr	r1, [r2, #4]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c902:	f64c 2369 	movw	r3, #51817	; 0xca69
 800c906:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c90a:	6293      	str	r3, [r2, #40]	; 0x28
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c910:	f64a 3379 	movw	r3, #43897	; 0xab79
 800c914:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c918:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	6812      	ldr	r2, [r2, #0]
 800c922:	68d2      	ldr	r2, [r2, #12]
 800c924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c928:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3714      	adds	r7, #20
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c950:	2b01      	cmp	r3, #1
 800c952:	d101      	bne.n	800c958 <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 800c954:	2302      	movs	r3, #2
 800c956:	e027      	b.n	800c9a8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2202      	movs	r2, #2
 800c964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	683a      	ldr	r2, [r7, #0]
 800c96e:	6811      	ldr	r1, [r2, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	6852      	ldr	r2, [r2, #4]

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 800c974:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	6892      	ldr	r2, [r2, #8]
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 800c97a:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	68d2      	ldr	r2, [r2, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
 800c980:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	6912      	ldr	r2, [r2, #16]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
 800c986:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 800c988:	683a      	ldr	r2, [r7, #0]
 800c98a:	6952      	ldr	r2, [r2, #20]
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
 800c98c:	4311      	orrs	r1, r2
                                   sBreakDeadTimeConfig->BreakPolarity    |
                                   sBreakDeadTimeConfig->AutomaticOutput;
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	6992      	ldr	r2, [r2, #24]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 800c992:	430a      	orrs	r2, r1

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 800c994:	645a      	str	r2, [r3, #68]	; 0x44
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d101      	bne.n	800c9cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	e032      	b.n	800ca32 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2202      	movs	r2, #2
 800c9d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	6812      	ldr	r2, [r2, #0]
 800c9e4:	6852      	ldr	r2, [r2, #4]
 800c9e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c9ea:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	6812      	ldr	r2, [r2, #0]
 800c9f4:	6851      	ldr	r1, [r2, #4]
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	6812      	ldr	r2, [r2, #0]
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	6812      	ldr	r2, [r2, #0]
 800ca06:	6892      	ldr	r2, [r2, #8]
 800ca08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca0c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	6812      	ldr	r2, [r2, #0]
 800ca16:	6891      	ldr	r1, [r2, #8]
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	6852      	ldr	r2, [r2, #4]
 800ca1c:	430a      	orrs	r2, r1
 800ca1e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop

0800ca40 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop

0800ca54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca74:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  HAL_TIMEx_CommutationCallback(htim);
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff ffde 	bl	800ca40 <HAL_TIMEx_CommutationCallback>
}
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop

0800ca8c <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface state
  * @param  htim : TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ca9a:	b2db      	uxtb	r3, r3
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState : specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b087      	sub	sp, #28
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800cab4:	2300      	movs	r3, #0
 800cab6:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2204      	movs	r2, #4
 800cabc:	fa02 f303 	lsl.w	r3, r2, r3
 800cac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6a1a      	ldr	r2, [r3, #32]
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	43db      	mvns	r3, r3
 800caca:	401a      	ands	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6a1a      	ldr	r2, [r3, #32]
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	fa01 f303 	lsl.w	r3, r1, r3
 800cadc:	431a      	orrs	r2, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	621a      	str	r2, [r3, #32]
}
 800cae2:	371c      	adds	r7, #28
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d101      	bne.n	800cafe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	e03b      	b.n	800cb76 <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f003 f996 	bl	800fe44 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	6812      	ldr	r2, [r2, #0]
 800cb28:	68d2      	ldr	r2, [r2, #12]
 800cb2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb2e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f001 f99b 	bl	800de6c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	6812      	ldr	r2, [r2, #0]
 800cb3e:	6912      	ldr	r2, [r2, #16]
 800cb40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	6812      	ldr	r2, [r2, #0]
 800cb4e:	6952      	ldr	r2, [r2, #20]
 800cb50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb54:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	6812      	ldr	r2, [r2, #0]
 800cb5e:	68d2      	ldr	r2, [r2, #12]
 800cb60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb64:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop

0800cb80 <HAL_HalfDuplex_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e043      	b.n	800cc1a <HAL_HalfDuplex_Init+0x9a>
  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->State == HAL_UART_STATE_RESET)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d106      	bne.n	800cbac <HAL_HalfDuplex_Init+0x2c>
  {   
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f003 f94c 	bl	800fe44 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2202      	movs	r2, #2
 800cbb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	6812      	ldr	r2, [r2, #0]
 800cbbc:	68d2      	ldr	r2, [r2, #12]
 800cbbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbc2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f001 f951 	bl	800de6c <UART_SetConfig>
  
  /* In half-duplex mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	6812      	ldr	r2, [r2, #0]
 800cbd2:	6912      	ldr	r2, [r2, #16]
 800cbd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	6812      	ldr	r2, [r2, #0]
 800cbe2:	6952      	ldr	r2, [r2, #20]
 800cbe4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800cbe8:	615a      	str	r2, [r3, #20]
  
  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	6812      	ldr	r2, [r2, #0]
 800cbf2:	6952      	ldr	r2, [r2, #20]
 800cbf4:	f042 0208 	orr.w	r2, r2, #8
 800cbf8:	615a      	str	r2, [r3, #20]
 
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	6812      	ldr	r2, [r2, #0]
 800cc02:	68d2      	ldr	r2, [r2, #12]
 800cc04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc08:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop

0800cc24 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	e04d      	b.n	800ccd4 <HAL_LIN_Init+0xb0>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d106      	bne.n	800cc52 <HAL_LIN_Init+0x2e>
  {   
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;  
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f003 f8f9 	bl	800fe44 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2202      	movs	r2, #2
 800cc56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	6812      	ldr	r2, [r2, #0]
 800cc62:	68d2      	ldr	r2, [r2, #12]
 800cc64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc68:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f001 f8fe 	bl	800de6c <UART_SetConfig>
  
  /* In LIN mode, the following bits must be kept cleared: 
     - CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	6812      	ldr	r2, [r2, #0]
 800cc78:	6912      	ldr	r2, [r2, #16]
 800cc7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	6812      	ldr	r2, [r2, #0]
 800cc88:	6952      	ldr	r2, [r2, #20]
 800cc8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc8e:	615a      	str	r2, [r3, #20]
  
  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	6812      	ldr	r2, [r2, #0]
 800cc98:	6912      	ldr	r2, [r2, #16]
 800cc9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc9e:	611a      	str	r2, [r3, #16]
  
  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	6812      	ldr	r2, [r2, #0]
 800cca8:	6912      	ldr	r2, [r2, #16]
 800ccaa:	f022 0120 	bic.w	r1, r2, #32
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	611a      	str	r2, [r3, #16]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	6812      	ldr	r2, [r2, #0]
 800ccbc:	68d2      	ldr	r2, [r2, #12]
 800ccbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ccc2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wakeup by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wakeup by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	460b      	mov	r3, r1
 800cce6:	607a      	str	r2, [r7, #4]
 800cce8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d101      	bne.n	800ccf4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e04f      	b.n	800cd94 <HAL_MultiProcessor_Init+0xb8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->State == HAL_UART_STATE_RESET)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d106      	bne.n	800cd0e <HAL_MultiProcessor_Init+0x32>
  {   
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f003 f89b 	bl	800fe44 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2202      	movs	r2, #2
 800cd12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	6812      	ldr	r2, [r2, #0]
 800cd1e:	68d2      	ldr	r2, [r2, #12]
 800cd20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd24:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f001 f8a0 	bl	800de6c <UART_SetConfig>
  
  /* In Multi-Processor mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	6812      	ldr	r2, [r2, #0]
 800cd34:	6912      	ldr	r2, [r2, #16]
 800cd36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	6812      	ldr	r2, [r2, #0]
 800cd44:	6952      	ldr	r2, [r2, #20]
 800cd46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd4a:	615a      	str	r2, [r3, #20]
  
  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, Address);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	6812      	ldr	r2, [r2, #0]
 800cd54:	6912      	ldr	r2, [r2, #16]
 800cd56:	f022 010f 	bic.w	r1, r2, #15
 800cd5a:	7afa      	ldrb	r2, [r7, #11]
 800cd5c:	430a      	orrs	r2, r1
 800cd5e:	611a      	str	r2, [r3, #16]
  
  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	68d2      	ldr	r2, [r2, #12]
 800cd6a:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	430a      	orrs	r2, r1
 800cd72:	60da      	str	r2, [r3, #12]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	6812      	ldr	r2, [r2, #0]
 800cd7c:	68d2      	ldr	r2, [r2, #12]
 800cd7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd82:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <HAL_UART_DeInit>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e026      	b.n	800cdfc <HAL_UART_DeInit+0x60>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	6812      	ldr	r2, [r2, #0]
 800cdbe:	68d2      	ldr	r2, [r2, #12]
 800cdc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cdc4:	60da      	str	r2, [r3, #12]
  
  huart->Instance->CR1 = 0x0;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	60da      	str	r2, [r3, #12]
  huart->Instance->CR2 = 0x0;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 = 0x0;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2200      	movs	r2, #0
 800cddc:	615a      	str	r2, [r3, #20]
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f003 f91a 	bl	8010018 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State = HAL_UART_STATE_RESET;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit can be implemented in the user file
   */ 
}
 800ce0c:	370c      	adds	r7, #12
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit can be implemented in the user file
   */ 
}
 800ce20:	370c      	adds	r7, #12
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop

0800ce2c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	603b      	str	r3, [r7, #0]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d003      	beq.n	800ce58 <HAL_UART_Transmit+0x2c>
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	2b22      	cmp	r3, #34	; 0x22
 800ce54:	f040 808d 	bne.w	800cf72 <HAL_UART_Transmit+0x146>
  {
    if((pData == NULL) || (Size == 0))
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d002      	beq.n	800ce64 <HAL_UART_Transmit+0x38>
 800ce5e:	88fb      	ldrh	r3, [r7, #6]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d101      	bne.n	800ce68 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	e085      	b.n	800cf74 <HAL_UART_Transmit+0x148>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d101      	bne.n	800ce76 <HAL_UART_Transmit+0x4a>
 800ce72:	2302      	movs	r3, #2
 800ce74:	e07e      	b.n	800cf74 <HAL_UART_Transmit+0x148>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b22      	cmp	r3, #34	; 0x22
 800ce8e:	d104      	bne.n	800ce9a <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2232      	movs	r2, #50	; 0x32
 800ce94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ce98:	e003      	b.n	800cea2 <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2212      	movs	r2, #18
 800ce9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	88fa      	ldrh	r2, [r7, #6]
 800cea6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	88fa      	ldrh	r2, [r7, #6]
 800ceac:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 800ceae:	e03c      	b.n	800cf2a <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cec4:	d11f      	bne.n	800cf06 <HAL_UART_Transmit+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	2180      	movs	r1, #128	; 0x80
 800ceca:	2200      	movs	r2, #0
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	f000 fe1f 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e04b      	b.n	800cf74 <HAL_UART_Transmit+0x148>
        }
        tmp = (uint16_t*) pData;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	8812      	ldrh	r2, [r2, #0]
 800cee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ceec:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d103      	bne.n	800cefe <HAL_UART_Transmit+0xd2>
        {
          pData +=2;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	3302      	adds	r3, #2
 800cefa:	60bb      	str	r3, [r7, #8]
 800cefc:	e015      	b.n	800cf2a <HAL_UART_Transmit+0xfe>
        }
        else
        { 
          pData +=1;
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	3301      	adds	r3, #1
 800cf02:	60bb      	str	r3, [r7, #8]
 800cf04:	e011      	b.n	800cf2a <HAL_UART_Transmit+0xfe>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	2180      	movs	r1, #128	; 0x80
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	f000 fdff 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <HAL_UART_Transmit+0xf0>
        {
          return HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e02b      	b.n	800cf74 <HAL_UART_Transmit+0x148>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	1c59      	adds	r1, r3, #1
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	6053      	str	r3, [r2, #4]
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1be      	bne.n	800ceb0 <HAL_UART_Transmit+0x84>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	2140      	movs	r1, #64	; 0x40
 800cf36:	2200      	movs	r2, #0
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	f000 fde9 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <HAL_UART_Transmit+0x11c>
    { 
      return HAL_TIMEOUT;
 800cf44:	2303      	movs	r3, #3
 800cf46:	e015      	b.n	800cf74 <HAL_UART_Transmit+0x148>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b32      	cmp	r3, #50	; 0x32
 800cf52:	d104      	bne.n	800cf5e <HAL_UART_Transmit+0x132>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2222      	movs	r2, #34	; 0x22
 800cf58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800cf5c:	e003      	b.n	800cf66 <HAL_UART_Transmit+0x13a>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e000      	b.n	800cf74 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800cf72:	2302      	movs	r3, #2
  }
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	603b      	str	r3, [r7, #0]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t  tmp_state = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d003      	beq.n	800cfa8 <HAL_UART_Receive+0x2c>
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2b12      	cmp	r3, #18
 800cfa4:	f040 809d 	bne.w	800d0e2 <HAL_UART_Receive+0x166>
  {
    if((pData == NULL ) || (Size == 0))
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d002      	beq.n	800cfb4 <HAL_UART_Receive+0x38>
 800cfae:	88fb      	ldrh	r3, [r7, #6]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <HAL_UART_Receive+0x3c>
    {
      return  HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e095      	b.n	800d0e4 <HAL_UART_Receive+0x168>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d101      	bne.n	800cfc6 <HAL_UART_Receive+0x4a>
 800cfc2:	2302      	movs	r3, #2
 800cfc4:	e08e      	b.n	800d0e4 <HAL_UART_Receive+0x168>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b12      	cmp	r3, #18
 800cfde:	d104      	bne.n	800cfea <HAL_UART_Receive+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2232      	movs	r2, #50	; 0x32
 800cfe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800cfe8:	e003      	b.n	800cff2 <HAL_UART_Receive+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2222      	movs	r2, #34	; 0x22
 800cfee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->RxXferSize = Size;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	88fa      	ldrh	r2, [r7, #6]
 800cff6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	88fa      	ldrh	r2, [r7, #6]
 800cffc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0)
 800cffe:	e057      	b.n	800d0b0 <HAL_UART_Receive+0x134>
    {
      huart->RxXferCount--;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d004:	3b01      	subs	r3, #1
 800d006:	b29a      	uxth	r2, r3
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d014:	d129      	bne.n	800d06a <HAL_UART_Receive+0xee>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	2120      	movs	r1, #32
 800d01a:	2200      	movs	r2, #0
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	f000 fd77 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <HAL_UART_Receive+0xb0>
        {
          return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e05b      	b.n	800d0e4 <HAL_UART_Receive+0x168>
        }
        tmp = (uint16_t*) pData ;
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10c      	bne.n	800d052 <HAL_UART_Receive+0xd6>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d044:	b29a      	uxth	r2, r3
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	801a      	strh	r2, [r3, #0]
          pData +=2;
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	3302      	adds	r3, #2
 800d04e:	60bb      	str	r3, [r7, #8]
 800d050:	e02e      	b.n	800d0b0 <HAL_UART_Receive+0x134>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	801a      	strh	r2, [r3, #0]
          pData +=1;
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	3301      	adds	r3, #1
 800d066:	60bb      	str	r3, [r7, #8]
 800d068:	e022      	b.n	800d0b0 <HAL_UART_Receive+0x134>
        }

      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	2120      	movs	r1, #32
 800d06e:	2200      	movs	r2, #0
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	f000 fd4d 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <HAL_UART_Receive+0x104>
        {
          return HAL_TIMEOUT;
 800d07c:	2303      	movs	r3, #3
 800d07e:	e031      	b.n	800d0e4 <HAL_UART_Receive+0x168>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d108      	bne.n	800d09a <HAL_UART_Receive+0x11e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	1c5a      	adds	r2, r3, #1
 800d08c:	60ba      	str	r2, [r7, #8]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	6812      	ldr	r2, [r2, #0]
 800d092:	6852      	ldr	r2, [r2, #4]
 800d094:	b2d2      	uxtb	r2, r2
 800d096:	701a      	strb	r2, [r3, #0]
 800d098:	e00a      	b.n	800d0b0 <HAL_UART_Receive+0x134>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	60ba      	str	r2, [r7, #8]
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	6812      	ldr	r2, [r2, #0]
 800d0a4:	6852      	ldr	r2, [r2, #4]
 800d0a6:	b2d2      	uxtb	r2, r2
 800d0a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0ac:	b2d2      	uxtb	r2, r2
 800d0ae:	701a      	strb	r2, [r3, #0]

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1a3      	bne.n	800d000 <HAL_UART_Receive+0x84>

      }
    }

    /* Check if a non-blocking transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b32      	cmp	r3, #50	; 0x32
 800d0c2:	d104      	bne.n	800d0ce <HAL_UART_Receive+0x152>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2212      	movs	r2, #18
 800d0c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d0cc:	e003      	b.n	800d0d6 <HAL_UART_Receive+0x15a>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	e000      	b.n	800d0e4 <HAL_UART_Receive+0x168>
  }
  else
  {
    return HAL_BUSY;
 800d0e2:	2302      	movs	r3, #2
  }
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b087      	sub	sp, #28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp_state = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d104:	b2db      	uxtb	r3, r3
 800d106:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d002      	beq.n	800d114 <HAL_UART_Transmit_IT+0x28>
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2b22      	cmp	r3, #34	; 0x22
 800d112:	d13b      	bne.n	800d18c <HAL_UART_Transmit_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <HAL_UART_Transmit_IT+0x34>
 800d11a:	88fb      	ldrh	r3, [r7, #6]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <HAL_UART_Transmit_IT+0x38>
    {
      return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e034      	b.n	800d18e <HAL_UART_Transmit_IT+0xa2>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d101      	bne.n	800d132 <HAL_UART_Transmit_IT+0x46>
 800d12e:	2302      	movs	r3, #2
 800d130:	e02d      	b.n	800d18e <HAL_UART_Transmit_IT+0xa2>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	88fa      	ldrh	r2, [r7, #6]
 800d144:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	88fa      	ldrh	r2, [r7, #6]
 800d14a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b22      	cmp	r3, #34	; 0x22
 800d15c:	d104      	bne.n	800d168 <HAL_UART_Transmit_IT+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2232      	movs	r2, #50	; 0x32
 800d162:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d166:	e003      	b.n	800d170 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2212      	movs	r2, #18
 800d16c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	6812      	ldr	r2, [r2, #0]
 800d180:	68d2      	ldr	r2, [r2, #12]
 800d182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d186:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	e000      	b.n	800d18e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800d18c:	2302      	movs	r3, #2
  }
}
 800d18e:	4618      	mov	r0, r3
 800d190:	371c      	adds	r7, #28
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop

0800d19c <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b087      	sub	sp, #28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp_state = 0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d002      	beq.n	800d1c4 <HAL_UART_Receive_IT+0x28>
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2b12      	cmp	r3, #18
 800d1c2:	d14b      	bne.n	800d25c <HAL_UART_Receive_IT+0xc0>
  {
    if((pData == NULL ) || (Size == 0))
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d002      	beq.n	800d1d0 <HAL_UART_Receive_IT+0x34>
 800d1ca:	88fb      	ldrh	r3, [r7, #6]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <HAL_UART_Receive_IT+0x38>
    {
      return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e044      	b.n	800d25e <HAL_UART_Receive_IT+0xc2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d101      	bne.n	800d1e2 <HAL_UART_Receive_IT+0x46>
 800d1de:	2302      	movs	r3, #2
 800d1e0:	e03d      	b.n	800d25e <HAL_UART_Receive_IT+0xc2>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	88fa      	ldrh	r2, [r7, #6]
 800d1f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	88fa      	ldrh	r2, [r7, #6]
 800d1fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	2b12      	cmp	r3, #18
 800d20c:	d104      	bne.n	800d218 <HAL_UART_Receive_IT+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2232      	movs	r2, #50	; 0x32
 800d212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d216:	e003      	b.n	800d220 <HAL_UART_Receive_IT+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2222      	movs	r2, #34	; 0x22
 800d21c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	6812      	ldr	r2, [r2, #0]
 800d230:	68d2      	ldr	r2, [r2, #12]
 800d232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d236:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	6812      	ldr	r2, [r2, #0]
 800d240:	6952      	ldr	r2, [r2, #20]
 800d242:	f042 0201 	orr.w	r2, r2, #1
 800d246:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	6812      	ldr	r2, [r2, #0]
 800d250:	68d2      	ldr	r2, [r2, #12]
 800d252:	f042 0220 	orr.w	r2, r2, #32
 800d256:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d258:	2300      	movs	r3, #0
 800d25a:	e000      	b.n	800d25e <HAL_UART_Receive_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800d25c:	2302      	movs	r3, #2
  }
}
 800d25e:	4618      	mov	r0, r3
 800d260:	371c      	adds	r7, #28
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop

0800d26c <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	4613      	mov	r3, r2
 800d278:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d284:	b2db      	uxtb	r3, r3
 800d286:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d002      	beq.n	800d294 <HAL_UART_Transmit_DMA+0x28>
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2b22      	cmp	r3, #34	; 0x22
 800d292:	d163      	bne.n	800d35c <HAL_UART_Transmit_DMA+0xf0>
  {
    if((pData == NULL ) || (Size == 0)) 
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d002      	beq.n	800d2a0 <HAL_UART_Transmit_DMA+0x34>
 800d29a:	88fb      	ldrh	r3, [r7, #6]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d101      	bne.n	800d2a4 <HAL_UART_Transmit_DMA+0x38>
    {
      return HAL_ERROR;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e05c      	b.n	800d35e <HAL_UART_Transmit_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d101      	bne.n	800d2b2 <HAL_UART_Transmit_DMA+0x46>
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	e055      	b.n	800d35e <HAL_UART_Transmit_DMA+0xf2>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	88fa      	ldrh	r2, [r7, #6]
 800d2c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	88fa      	ldrh	r2, [r7, #6]
 800d2ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b22      	cmp	r3, #34	; 0x22
 800d2dc:	d104      	bne.n	800d2e8 <HAL_UART_Transmit_DMA+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2232      	movs	r2, #50	; 0x32
 800d2e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d2e6:	e003      	b.n	800d2f0 <HAL_UART_Transmit_DMA+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2212      	movs	r2, #18
 800d2ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2f4:	f64d 13f1 	movw	r3, #55793	; 0xd9f1
 800d2f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d2fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d302:	f64d 2341 	movw	r3, #55873	; 0xda41
 800d306:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d30a:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d310:	f64d 23d5 	movw	r3, #56021	; 0xdad5
 800d314:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d318:	6313      	str	r3, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 800d31a:	f107 0308 	add.w	r3, r7, #8
 800d31e:	613b      	str	r3, [r7, #16]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	6819      	ldr	r1, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3304      	adds	r3, #4
 800d32e:	461a      	mov	r2, r3
 800d330:	88fb      	ldrh	r3, [r7, #6]
 800d332:	f7f3 ff4b 	bl	80011cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d33e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	6812      	ldr	r2, [r2, #0]
 800d348:	6952      	ldr	r2, [r2, #20]
 800d34a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d34e:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	e000      	b.n	800d35e <HAL_UART_Transmit_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800d35c:	2302      	movs	r3, #2
  }
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3718      	adds	r7, #24
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop

0800d368 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain 
  *         the parity bit (MSB position)     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	4613      	mov	r3, r2
 800d374:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d380:	b2db      	uxtb	r3, r3
 800d382:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2b01      	cmp	r3, #1
 800d388:	d002      	beq.n	800d390 <HAL_UART_Receive_DMA+0x28>
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	2b12      	cmp	r3, #18
 800d38e:	d15b      	bne.n	800d448 <HAL_UART_Receive_DMA+0xe0>
  {
    if((pData == NULL ) || (Size == 0))
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <HAL_UART_Receive_DMA+0x34>
 800d396:	88fb      	ldrh	r3, [r7, #6]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d101      	bne.n	800d3a0 <HAL_UART_Receive_DMA+0x38>
    {
      return HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e054      	b.n	800d44a <HAL_UART_Receive_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d101      	bne.n	800d3ae <HAL_UART_Receive_DMA+0x46>
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	e04d      	b.n	800d44a <HAL_UART_Receive_DMA+0xe2>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	88fa      	ldrh	r2, [r7, #6]
 800d3c0:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b12      	cmp	r3, #18
 800d3d2:	d104      	bne.n	800d3de <HAL_UART_Receive_DMA+0x76>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2232      	movs	r2, #50	; 0x32
 800d3d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800d3dc:	e003      	b.n	800d3e6 <HAL_UART_Receive_DMA+0x7e>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2222      	movs	r2, #34	; 0x22
 800d3e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3ea:	f64d 235d 	movw	r3, #55901	; 0xda5d
 800d3ee:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d3f2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3f8:	f64d 23b9 	movw	r3, #55993	; 0xdab9
 800d3fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d406:	f64d 23d5 	movw	r3, #56021	; 0xdad5
 800d40a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d40e:	6313      	str	r3, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 800d410:	f107 0308 	add.w	r3, r7, #8
 800d414:	613b      	str	r3, [r7, #16]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	3304      	adds	r3, #4
 800d420:	4619      	mov	r1, r3
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	88fb      	ldrh	r3, [r7, #6]
 800d428:	f7f3 fed0 	bl	80011cc <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	6812      	ldr	r2, [r2, #0]
 800d434:	6952      	ldr	r2, [r2, #20]
 800d436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d43a:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	e000      	b.n	800d44a <HAL_UART_Receive_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800d448:	2302      	movs	r3, #2
  }
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3718      	adds	r7, #24
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop

0800d454 <HAL_UART_DMAPause>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d462:	2b01      	cmp	r3, #1
 800d464:	d101      	bne.n	800d46a <HAL_UART_DMAPause+0x16>
 800d466:	2302      	movs	r3, #2
 800d468:	e03b      	b.n	800d4e2 <HAL_UART_DMAPause+0x8e>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if(huart->State == HAL_UART_STATE_BUSY_TX)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	2b12      	cmp	r3, #18
 800d47c:	d108      	bne.n	800d490 <HAL_UART_DMAPause+0x3c>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	6812      	ldr	r2, [r2, #0]
 800d486:	6952      	ldr	r2, [r2, #20]
 800d488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d48c:	615a      	str	r2, [r3, #20]
 800d48e:	e023      	b.n	800d4d8 <HAL_UART_DMAPause+0x84>
  }
  else if(huart->State == HAL_UART_STATE_BUSY_RX)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b22      	cmp	r3, #34	; 0x22
 800d49a:	d108      	bne.n	800d4ae <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	6952      	ldr	r2, [r2, #20]
 800d4a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4aa:	615a      	str	r2, [r3, #20]
 800d4ac:	e014      	b.n	800d4d8 <HAL_UART_DMAPause+0x84>
  }
  else if (huart->State == HAL_UART_STATE_BUSY_TX_RX)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b32      	cmp	r3, #50	; 0x32
 800d4b8:	d108      	bne.n	800d4cc <HAL_UART_DMAPause+0x78>
  {
    /* Disable the UART DMA Tx & Rx requests */
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_DMAT | USART_CR3_DMAR));
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6812      	ldr	r2, [r2, #0]
 800d4c2:	6952      	ldr	r2, [r2, #20]
 800d4c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d4c8:	615a      	str	r2, [r3, #20]
 800d4ca:	e005      	b.n	800d4d8 <HAL_UART_DMAPause+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    return HAL_ERROR; 
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e004      	b.n	800d4e2 <HAL_UART_DMAPause+0x8e>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK; 
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	370c      	adds	r7, #12
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop

0800d4f0 <HAL_UART_DMAResume>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d101      	bne.n	800d506 <HAL_UART_DMAResume+0x16>
 800d502:	2302      	movs	r3, #2
 800d504:	e04d      	b.n	800d5a2 <HAL_UART_DMAResume+0xb2>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2201      	movs	r2, #1
 800d50a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(huart->State == HAL_UART_STATE_BUSY_TX)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b12      	cmp	r3, #18
 800d518:	d108      	bne.n	800d52c <HAL_UART_DMAResume+0x3c>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	6812      	ldr	r2, [r2, #0]
 800d522:	6952      	ldr	r2, [r2, #20]
 800d524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d528:	615a      	str	r2, [r3, #20]
 800d52a:	e035      	b.n	800d598 <HAL_UART_DMAResume+0xa8>
  }
  else if(huart->State == HAL_UART_STATE_BUSY_RX)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b22      	cmp	r3, #34	; 0x22
 800d536:	d111      	bne.n	800d55c <HAL_UART_DMAResume+0x6c>
  {
    /* Clear the Overrun flag before resumming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	68fb      	ldr	r3, [r7, #12]
    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	6812      	ldr	r2, [r2, #0]
 800d552:	6952      	ldr	r2, [r2, #20]
 800d554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d558:	615a      	str	r2, [r3, #20]
 800d55a:	e01d      	b.n	800d598 <HAL_UART_DMAResume+0xa8>
  }
  else if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b32      	cmp	r3, #50	; 0x32
 800d566:	d111      	bne.n	800d58c <HAL_UART_DMAResume+0x9c>
  {
    /* Clear the Overrun flag before resumming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60bb      	str	r3, [r7, #8]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	60bb      	str	r3, [r7, #8]
 800d578:	68bb      	ldr	r3, [r7, #8]
    /* Enable the UART DMA Tx & Rx request */
    SET_BIT(huart->Instance->CR3, (USART_CR3_DMAT | USART_CR3_DMAR));
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	6812      	ldr	r2, [r2, #0]
 800d582:	6952      	ldr	r2, [r2, #20]
 800d584:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d588:	615a      	str	r2, [r3, #20]
 800d58a:	e005      	b.n	800d598 <HAL_UART_DMAResume+0xa8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_ERROR; 
 800d594:	2301      	movs	r3, #1
 800d596:	e004      	b.n	800d5a2 <HAL_UART_DMAResume+0xb2>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop

0800d5b0 <HAL_UART_DMAStop>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Disable the UART Tx/Rx DMA requests */
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_DMAT | USART_CR3_DMAR));
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	6812      	ldr	r2, [r2, #0]
 800d5c0:	6952      	ldr	r2, [r2, #20]
 800d5c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d5c6:	615a      	str	r2, [r3, #20]
  
  /* Abort the UART DMA tx channel */
  if(huart->hdmatx != NULL)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d004      	beq.n	800d5da <HAL_UART_DMAStop+0x2a>
  {
    HAL_DMA_Abort(huart->hdmatx);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f3 fe43 	bl	8001260 <HAL_DMA_Abort>
  }
  /* Abort the UART DMA rx channel */
  if(huart->hdmarx != NULL)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d004      	beq.n	800d5ec <HAL_UART_DMAStop+0x3c>
  {
    HAL_DMA_Abort(huart->hdmarx);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7f3 fe3a 	bl	8001260 <HAL_DMA_Abort>
  }
  
  huart->State = HAL_UART_STATE_READY;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800d5f4:	2300      	movs	r3, #0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop

0800d600 <HAL_UART_IRQHandler>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  uint32_t tmp_flag = 0, tmp_it_source = 0;
 800d608:	2300      	movs	r3, #0
 800d60a:	617b      	str	r3, [r7, #20]
 800d60c:	2300      	movs	r3, #0
 800d60e:	613b      	str	r3, [r7, #16]

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f003 0301 	and.w	r3, r3, #1
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	bf0c      	ite	eq
 800d61e:	2300      	moveq	r3, #0
 800d620:	2301      	movne	r3, #1
 800d622:	b2db      	uxtb	r3, r3
 800d624:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d630:	613b      	str	r3, [r7, #16]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d008      	beq.n	800d64a <HAL_UART_IRQHandler+0x4a>
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d005      	beq.n	800d64a <HAL_UART_IRQHandler+0x4a>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d642:	f043 0201 	orr.w	r2, r3, #1
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 0302 	and.w	r3, r3, #2
 800d654:	2b00      	cmp	r3, #0
 800d656:	bf0c      	ite	eq
 800d658:	2300      	moveq	r3, #0
 800d65a:	2301      	movne	r3, #1
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	613b      	str	r3, [r7, #16]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d008      	beq.n	800d684 <HAL_UART_IRQHandler+0x84>
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d005      	beq.n	800d684 <HAL_UART_IRQHandler+0x84>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d67c:	f043 0204 	orr.w	r2, r3, #4
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f003 0304 	and.w	r3, r3, #4
 800d68e:	2b00      	cmp	r3, #0
 800d690:	bf0c      	ite	eq
 800d692:	2300      	moveq	r3, #0
 800d694:	2301      	movne	r3, #1
 800d696:	b2db      	uxtb	r3, r3
 800d698:	617b      	str	r3, [r7, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d008      	beq.n	800d6b2 <HAL_UART_IRQHandler+0xb2>
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <HAL_UART_IRQHandler+0xb2>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6aa:	f043 0202 	orr.w	r2, r3, #2
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 0308 	and.w	r3, r3, #8
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	bf0c      	ite	eq
 800d6c0:	2300      	moveq	r3, #0
 800d6c2:	2301      	movne	r3, #1
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	617b      	str	r3, [r7, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d008      	beq.n	800d6e0 <HAL_UART_IRQHandler+0xe0>
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d005      	beq.n	800d6e0 <HAL_UART_IRQHandler+0xe0>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6d8:	f043 0208 	orr.w	r2, r3, #8
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f003 0320 	and.w	r3, r3, #32
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	bf0c      	ite	eq
 800d6ee:	2300      	moveq	r3, #0
 800d6f0:	2301      	movne	r3, #1
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	f003 0320 	and.w	r3, r3, #32
 800d700:	613b      	str	r3, [r7, #16]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d005      	beq.n	800d714 <HAL_UART_IRQHandler+0x114>
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d002      	beq.n	800d714 <HAL_UART_IRQHandler+0x114>
  { 
    UART_Receive_IT(huart);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 fb18 	bl	800dd44 <UART_Receive_IT>
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d71e:	2b00      	cmp	r3, #0
 800d720:	bf0c      	ite	eq
 800d722:	2300      	moveq	r3, #0
 800d724:	2301      	movne	r3, #1
 800d726:	b2db      	uxtb	r3, r3
 800d728:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d734:	613b      	str	r3, [r7, #16]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d005      	beq.n	800d748 <HAL_UART_IRQHandler+0x148>
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d002      	beq.n	800d748 <HAL_UART_IRQHandler+0x148>
  {
    UART_Transmit_IT(huart);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fa7e 	bl	800dc44 <UART_Transmit_IT>
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d752:	2b00      	cmp	r3, #0
 800d754:	bf0c      	ite	eq
 800d756:	2300      	moveq	r3, #0
 800d758:	2301      	movne	r3, #1
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d768:	613b      	str	r3, [r7, #16]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d005      	beq.n	800d77c <HAL_UART_IRQHandler+0x17c>
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d002      	beq.n	800d77c <HAL_UART_IRQHandler+0x17c>
  {
    UART_EndTransmit_IT(huart);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 fac0 	bl	800dcfc <UART_EndTransmit_IT>
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00f      	beq.n	800d7a4 <HAL_UART_IRQHandler+0x1a4>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	68fb      	ldr	r3, [r7, #12]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2201      	movs	r2, #1
 800d79a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f003 fa8e 	bl	8010cc0 <HAL_UART_ErrorCallback>
  }  
}
 800d7a4:	3718      	adds	r7, #24
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback can be implemented in the user file
   */ 
}
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop

0800d7c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file
   */ 
}
 800d7c8:	370c      	adds	r7, #12
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback can be implemented in the user file
   */
}
 800d7dc:	370c      	adds	r7, #12
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop

0800d7e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file
   */
}
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop

0800d810 <HAL_LIN_SendBreak>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d101      	bne.n	800d826 <HAL_LIN_SendBreak+0x16>
 800d822:	2302      	movs	r3, #2
 800d824:	e018      	b.n	800d858 <HAL_LIN_SendBreak+0x48>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2202      	movs	r2, #2
 800d832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Send break characters */
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	6812      	ldr	r2, [r2, #0]
 800d83e:	68d2      	ldr	r2, [r2, #12]
 800d840:	f042 0201 	orr.w	r2, r2, #1
 800d844:	60da      	str	r2, [r3, #12]
 
  huart->State = HAL_UART_STATE_READY;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d872:	2b01      	cmp	r3, #1
 800d874:	d101      	bne.n	800d87a <HAL_MultiProcessor_EnterMuteMode+0x16>
 800d876:	2302      	movs	r3, #2
 800d878:	e018      	b.n	800d8ac <HAL_MultiProcessor_EnterMuteMode+0x48>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2202      	movs	r2, #2
 800d886:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	6812      	ldr	r2, [r2, #0]
 800d892:	68d2      	ldr	r2, [r2, #12]
 800d894:	f042 0202 	orr.w	r2, r2, #2
 800d898:	60da      	str	r2, [r3, #12]
  
  huart->State = HAL_UART_STATE_READY;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2201      	movs	r2, #1
 800d89e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d101      	bne.n	800d8ce <HAL_MultiProcessor_ExitMuteMode+0x16>
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	e018      	b.n	800d900 <HAL_MultiProcessor_ExitMuteMode+0x48>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2202      	movs	r2, #2
 800d8da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	6812      	ldr	r2, [r2, #0]
 800d8e6:	68d2      	ldr	r2, [r2, #12]
 800d8e8:	f022 0202 	bic.w	r2, r2, #2
 800d8ec:	60da      	str	r2, [r3, #12]
  
  huart->State = HAL_UART_STATE_READY;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d101      	bne.n	800d922 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800d91e:	2302      	movs	r3, #2
 800d920:	e01a      	b.n	800d958 <HAL_HalfDuplex_EnableTransmitter+0x4c>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2201      	movs	r2, #1
 800d926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2202      	movs	r2, #2
 800d92e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear TE and RE bits */
  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE), USART_CR1_TE);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	6812      	ldr	r2, [r2, #0]
 800d93a:	68d2      	ldr	r2, [r2, #12]
 800d93c:	f022 020c 	bic.w	r2, r2, #12
 800d940:	f042 0208 	orr.w	r2, r2, #8
 800d944:	60da      	str	r2, [r3, #12]
 
  huart->State = HAL_UART_STATE_READY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d972:	2b01      	cmp	r3, #1
 800d974:	d101      	bne.n	800d97a <HAL_HalfDuplex_EnableReceiver+0x16>
 800d976:	2302      	movs	r3, #2
 800d978:	e01a      	b.n	800d9b0 <HAL_HalfDuplex_EnableReceiver+0x4c>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2202      	movs	r2, #2
 800d986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear TE and RE bits */
  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE), USART_CR1_RE);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	6812      	ldr	r2, [r2, #0]
 800d992:	68d2      	ldr	r2, [r2, #12]
 800d994:	f022 020c 	bic.w	r2, r2, #12
 800d998:	f042 0204 	orr.w	r2, r2, #4
 800d99c:	60da      	str	r2, [r3, #12]
  
  huart->State = HAL_UART_STATE_READY;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800d9ae:	2300      	movs	r3, #0
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <HAL_UART_GetState>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  return huart->State;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d9ca:	b2db      	uxtb	r3, r3
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <HAL_UART_GetError>:
* @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *              the configuration information for the specified UART.
* @retval UART Error Code
*/
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <UART_DMATransmitCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f003 0320 	and.w	r3, r3, #32
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d113      	bne.n	800da34 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	6812      	ldr	r2, [r2, #0]
 800da1a:	6952      	ldr	r2, [r2, #20]
 800da1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */    
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	6812      	ldr	r2, [r2, #0]
 800da2a:	68d2      	ldr	r2, [r2, #12]
 800da2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da30:	60da      	str	r2, [r3, #12]
 800da32:	e002      	b.n	800da3a <UART_DMATransmitCplt+0x4a>
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f003 f84d 	bl	8010ad4 <HAL_UART_TxCpltCallback>
  }
}
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <UART_DMATxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4c:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f7ff feb6 	bl	800d7c0 <HAL_UART_TxHalfCpltCallback>
}
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop

0800da5c <UART_DMAReceiveCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 0320 	and.w	r3, r3, #32
 800da74:	2b00      	cmp	r3, #0
 800da76:	d119      	bne.n	800daac <UART_DMAReceiveCplt+0x50>
  {
    huart->RxXferCount = 0;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	6812      	ldr	r2, [r2, #0]
 800da86:	6952      	ldr	r2, [r2, #20]
 800da88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da8c:	615a      	str	r2, [r3, #20]

    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800da94:	b2db      	uxtb	r3, r3
 800da96:	2b32      	cmp	r3, #50	; 0x32
 800da98:	d104      	bne.n	800daa4 <UART_DMAReceiveCplt+0x48>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2212      	movs	r2, #18
 800da9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800daa2:	e003      	b.n	800daac <UART_DMAReceiveCplt+0x50>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  HAL_UART_RxCpltCallback(huart);
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f002 ffcb 	bl	8010a48 <HAL_UART_RxCpltCallback>
}
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <UART_DMARxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac4:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f7ff fe8e 	bl	800d7e8 <HAL_UART_RxHalfCpltCallback>
}
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop

0800dad4 <UART_DMAError>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->State= HAL_UART_STATE_READY;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dafa:	f043 0210 	orr.w	r2, r3, #16
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f003 f8dc 	bl	8010cc0 <HAL_UART_ErrorCallback>
}
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop

0800db10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	4613      	mov	r3, r2
 800db1e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 800db20:	2300      	movs	r3, #0
 800db22:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800db24:	f7f2 fbe0 	bl	80002e8 <HAL_GetTick>
 800db28:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d142      	bne.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800db30:	e038      	b.n	800dba4 <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db38:	d034      	beq.n	800dba4 <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d007      	beq.n	800db50 <UART_WaitOnFlagUntilTimeout+0x40>
 800db40:	f7f2 fbd2 	bl	80002e8 <HAL_GetTick>
 800db44:	4602      	mov	r2, r0
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	1ad2      	subs	r2, r2, r3
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d929      	bls.n	800dba4 <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	6812      	ldr	r2, [r2, #0]
 800db58:	68d2      	ldr	r2, [r2, #12]
 800db5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db5e:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	6812      	ldr	r2, [r2, #0]
 800db68:	68d2      	ldr	r2, [r2, #12]
 800db6a:	f022 0220 	bic.w	r2, r2, #32
 800db6e:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	6812      	ldr	r2, [r2, #0]
 800db78:	68d2      	ldr	r2, [r2, #12]
 800db7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db7e:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	6812      	ldr	r2, [r2, #0]
 800db88:	6952      	ldr	r2, [r2, #20]
 800db8a:	f022 0201 	bic.w	r2, r2, #1
 800db8e:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800dba0:	2303      	movs	r3, #3
 800dba2:	e04b      	b.n	800dc3c <UART_WaitOnFlagUntilTimeout+0x12c>
  tickstart = HAL_GetTick();

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	401a      	ands	r2, r3
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d1be      	bne.n	800db32 <UART_WaitOnFlagUntilTimeout+0x22>
 800dbb4:	e041      	b.n	800dc3a <UART_WaitOnFlagUntilTimeout+0x12a>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800dbb6:	e038      	b.n	800dc2a <UART_WaitOnFlagUntilTimeout+0x11a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbbe:	d034      	beq.n	800dc2a <UART_WaitOnFlagUntilTimeout+0x11a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d007      	beq.n	800dbd6 <UART_WaitOnFlagUntilTimeout+0xc6>
 800dbc6:	f7f2 fb8f 	bl	80002e8 <HAL_GetTick>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	1ad2      	subs	r2, r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d929      	bls.n	800dc2a <UART_WaitOnFlagUntilTimeout+0x11a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	6812      	ldr	r2, [r2, #0]
 800dbde:	68d2      	ldr	r2, [r2, #12]
 800dbe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbe4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	6812      	ldr	r2, [r2, #0]
 800dbee:	68d2      	ldr	r2, [r2, #12]
 800dbf0:	f022 0220 	bic.w	r2, r2, #32
 800dbf4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	6812      	ldr	r2, [r2, #0]
 800dbfe:	68d2      	ldr	r2, [r2, #12]
 800dc00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc04:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	6812      	ldr	r2, [r2, #0]
 800dc0e:	6952      	ldr	r2, [r2, #20]
 800dc10:	f022 0201 	bic.w	r2, r2, #1
 800dc14:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800dc26:	2303      	movs	r3, #3
 800dc28:	e008      	b.n	800dc3c <UART_WaitOnFlagUntilTimeout+0x12c>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	401a      	ands	r2, r3
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d0be      	beq.n	800dbb8 <UART_WaitOnFlagUntilTimeout+0xa8>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3718      	adds	r7, #24
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b12      	cmp	r3, #18
 800dc5e:	d002      	beq.n	800dc66 <UART_Transmit_IT+0x22>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b32      	cmp	r3, #50	; 0x32
 800dc64:	d143      	bne.n	800dcee <UART_Transmit_IT+0xaa>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc6e:	d119      	bne.n	800dca4 <UART_Transmit_IT+0x60>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a1b      	ldr	r3, [r3, #32]
 800dc74:	60bb      	str	r3, [r7, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68ba      	ldr	r2, [r7, #8]
 800dc7c:	8812      	ldrh	r2, [r2, #0]
 800dc7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc82:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d105      	bne.n	800dc98 <UART_Transmit_IT+0x54>
      {
        huart->pTxBuffPtr += 2;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a1b      	ldr	r3, [r3, #32]
 800dc90:	1c9a      	adds	r2, r3, #2
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	621a      	str	r2, [r3, #32]
 800dc96:	e00e      	b.n	800dcb6 <UART_Transmit_IT+0x72>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a1b      	ldr	r3, [r3, #32]
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	621a      	str	r2, [r3, #32]
 800dca2:	e008      	b.n	800dcb6 <UART_Transmit_IT+0x72>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6a1b      	ldr	r3, [r3, #32]
 800dcac:	1c58      	adds	r0, r3, #1
 800dcae:	6879      	ldr	r1, [r7, #4]
 800dcb0:	6208      	str	r0, [r1, #32]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	84da      	strh	r2, [r3, #38]	; 0x26
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10f      	bne.n	800dcea <UART_Transmit_IT+0xa6>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	6812      	ldr	r2, [r2, #0]
 800dcd2:	68d2      	ldr	r2, [r2, #12]
 800dcd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dcd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	6812      	ldr	r2, [r2, #0]
 800dce2:	68d2      	ldr	r2, [r2, #12]
 800dce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dce8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	e000      	b.n	800dcf0 <UART_Transmit_IT+0xac>
  }
  else
  {
    return HAL_BUSY;
 800dcee:	2302      	movs	r3, #2
  }
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	6812      	ldr	r2, [r2, #0]
 800dd0c:	68d2      	ldr	r2, [r2, #12]
 800dd0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd12:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b32      	cmp	r3, #50	; 0x32
 800dd1e:	d104      	bne.n	800dd2a <UART_EndTransmit_IT+0x2e>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2222      	movs	r2, #34	; 0x22
 800dd24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800dd28:	e003      	b.n	800dd32 <UART_EndTransmit_IT+0x36>
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f002 fece 	bl	8010ad4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop

0800dd44 <UART_Receive_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State; 
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b22      	cmp	r3, #34	; 0x22
 800dd5e:	d002      	beq.n	800dd66 <UART_Receive_IT+0x22>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2b32      	cmp	r3, #50	; 0x32
 800dd64:	d17c      	bne.n	800de60 <UART_Receive_IT+0x11c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd6e:	d123      	bne.n	800ddb8 <UART_Receive_IT+0x74>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd74:	60bb      	str	r3, [r7, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10e      	bne.n	800dd9c <UART_Receive_IT+0x58>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd94:	1c9a      	adds	r2, r3, #2
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	629a      	str	r2, [r3, #40]	; 0x28
 800dd9a:	e029      	b.n	800ddf0 <UART_Receive_IT+0xac>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	629a      	str	r2, [r3, #40]	; 0x28
 800ddb6:	e01b      	b.n	800ddf0 <UART_Receive_IT+0xac>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	691b      	ldr	r3, [r3, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10a      	bne.n	800ddd6 <UART_Receive_IT+0x92>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc4:	1c59      	adds	r1, r3, #1
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	6291      	str	r1, [r2, #40]	; 0x28
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	6812      	ldr	r2, [r2, #0]
 800ddce:	6852      	ldr	r2, [r2, #4]
 800ddd0:	b2d2      	uxtb	r2, r2
 800ddd2:	701a      	strb	r2, [r3, #0]
 800ddd4:	e00c      	b.n	800ddf0 <UART_Receive_IT+0xac>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddda:	1c59      	adds	r1, r3, #1
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	6291      	str	r1, [r2, #40]	; 0x28
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	6812      	ldr	r2, [r2, #0]
 800dde4:	6852      	ldr	r2, [r2, #4]
 800dde6:	b2d2      	uxtb	r2, r2
 800dde8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ddec:	b2d2      	uxtb	r2, r2
 800ddee:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	85da      	strh	r2, [r3, #46]	; 0x2e
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800de00:	2b00      	cmp	r3, #0
 800de02:	d12b      	bne.n	800de5c <UART_Receive_IT+0x118>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	6812      	ldr	r2, [r2, #0]
 800de0c:	68d2      	ldr	r2, [r2, #12]
 800de0e:	f022 0220 	bic.w	r2, r2, #32
 800de12:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	2b32      	cmp	r3, #50	; 0x32
 800de1e:	d104      	bne.n	800de2a <UART_Receive_IT+0xe6>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2212      	movs	r2, #18
 800de24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800de28:	e013      	b.n	800de52 <UART_Receive_IT+0x10e>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	6812      	ldr	r2, [r2, #0]
 800de32:	68d2      	ldr	r2, [r2, #12]
 800de34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de38:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	6812      	ldr	r2, [r2, #0]
 800de42:	6952      	ldr	r2, [r2, #20]
 800de44:	f022 0201 	bic.w	r2, r2, #1
 800de48:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2201      	movs	r2, #1
 800de4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f002 fdf8 	bl	8010a48 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800de58:	2300      	movs	r3, #0
 800de5a:	e002      	b.n	800de62 <UART_Receive_IT+0x11e>
    }
    return HAL_OK;
 800de5c:	2300      	movs	r3, #0
 800de5e:	e000      	b.n	800de62 <UART_Receive_IT+0x11e>
  }
  else
  {
    return HAL_BUSY; 
 800de60:	2302      	movs	r3, #2
  }
}
 800de62:	4618      	mov	r0, r3
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop

0800de6c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 800de74:	2300      	movs	r3, #0
 800de76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	6812      	ldr	r2, [r2, #0]
 800de80:	6912      	ldr	r2, [r2, #16]
 800de82:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	68d2      	ldr	r2, [r2, #12]
 800de8a:	430a      	orrs	r2, r1
 800de8c:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	689a      	ldr	r2, [r3, #8]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	431a      	orrs	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800deae:	f023 030c 	bic.w	r3, r3, #12
 800deb2:	68f9      	ldr	r1, [r7, #12]
 800deb4:	430b      	orrs	r3, r1
 800deb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	6812      	ldr	r2, [r2, #0]
 800dec0:	6952      	ldr	r2, [r2, #20]
 800dec2:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	6992      	ldr	r2, [r2, #24]
 800deca:	430a      	orrs	r2, r1
 800decc:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ded6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800deda:	429a      	cmp	r2, r3
 800dedc:	d14a      	bne.n	800df74 <UART_SetConfig+0x108>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681c      	ldr	r4, [r3, #0]
 800dee2:	f7f8 fb15 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
 800dee6:	4602      	mov	r2, r0
 800dee8:	4613      	mov	r3, r2
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	4413      	add	r3, r2
 800deee:	009a      	lsls	r2, r3, #2
 800def0:	441a      	add	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	fbb2 f2f3 	udiv	r2, r2, r3
 800defc:	f248 531f 	movw	r3, #34079	; 0x851f
 800df00:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800df04:	fba3 1302 	umull	r1, r3, r3, r2
 800df08:	095b      	lsrs	r3, r3, #5
 800df0a:	011d      	lsls	r5, r3, #4
 800df0c:	f7f8 fb00 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
 800df10:	4602      	mov	r2, r0
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	009a      	lsls	r2, r3, #2
 800df1a:	441a      	add	r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	fbb2 f6f3 	udiv	r6, r2, r3
 800df26:	f7f8 faf3 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
 800df2a:	4602      	mov	r2, r0
 800df2c:	4613      	mov	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	009a      	lsls	r2, r3, #2
 800df34:	441a      	add	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	fbb2 f2f3 	udiv	r2, r2, r3
 800df40:	f248 531f 	movw	r3, #34079	; 0x851f
 800df44:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800df48:	fba3 1302 	umull	r1, r3, r3, r2
 800df4c:	095b      	lsrs	r3, r3, #5
 800df4e:	2264      	movs	r2, #100	; 0x64
 800df50:	fb02 f303 	mul.w	r3, r2, r3
 800df54:	1af3      	subs	r3, r6, r3
 800df56:	011b      	lsls	r3, r3, #4
 800df58:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800df5c:	f248 531f 	movw	r3, #34079	; 0x851f
 800df60:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800df64:	fba3 1302 	umull	r1, r3, r3, r2
 800df68:	095b      	lsrs	r3, r3, #5
 800df6a:	f003 030f 	and.w	r3, r3, #15
 800df6e:	432b      	orrs	r3, r5
 800df70:	60a3      	str	r3, [r4, #8]
 800df72:	e049      	b.n	800e008 <UART_SetConfig+0x19c>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681c      	ldr	r4, [r3, #0]
 800df78:	f7f8 faa6 	bl	80064c8 <HAL_RCC_GetPCLK1Freq>
 800df7c:	4602      	mov	r2, r0
 800df7e:	4613      	mov	r3, r2
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	4413      	add	r3, r2
 800df84:	009a      	lsls	r2, r3, #2
 800df86:	441a      	add	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	fbb2 f2f3 	udiv	r2, r2, r3
 800df92:	f248 531f 	movw	r3, #34079	; 0x851f
 800df96:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800df9a:	fba3 1302 	umull	r1, r3, r3, r2
 800df9e:	095b      	lsrs	r3, r3, #5
 800dfa0:	011d      	lsls	r5, r3, #4
 800dfa2:	f7f8 fa91 	bl	80064c8 <HAL_RCC_GetPCLK1Freq>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	009a      	lsls	r2, r3, #2
 800dfb0:	441a      	add	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800dfbc:	f7f8 fa84 	bl	80064c8 <HAL_RCC_GetPCLK1Freq>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	4413      	add	r3, r2
 800dfc8:	009a      	lsls	r2, r3, #2
 800dfca:	441a      	add	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfd6:	f248 531f 	movw	r3, #34079	; 0x851f
 800dfda:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800dfde:	fba3 1302 	umull	r1, r3, r3, r2
 800dfe2:	095b      	lsrs	r3, r3, #5
 800dfe4:	2264      	movs	r2, #100	; 0x64
 800dfe6:	fb02 f303 	mul.w	r3, r2, r3
 800dfea:	1af3      	subs	r3, r6, r3
 800dfec:	011b      	lsls	r3, r3, #4
 800dfee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800dff2:	f248 531f 	movw	r3, #34079	; 0x851f
 800dff6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800dffa:	fba3 1302 	umull	r1, r3, r3, r2
 800dffe:	095b      	lsrs	r3, r3, #5
 800e000:	f003 030f 	and.w	r3, r3, #15
 800e004:	432b      	orrs	r3, r5
 800e006:	60a3      	str	r3, [r4, #8]
  }
}
 800e008:	3714      	adds	r7, #20
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e00e:	bf00      	nop

0800e010 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e010:	b084      	sub	sp, #16
 800e012:	b580      	push	{r7, lr}
 800e014:	b082      	sub	sp, #8
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	f107 0014 	add.w	r0, r7, #20
 800e01e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	60da      	str	r2, [r3, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f001 fe10 	bl	800fc54 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e03a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e048:	b004      	add	sp, #16
 800e04a:	4770      	bx	lr

0800e04c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	f043 0201 	orr.w	r2, r3, #1
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	370c      	adds	r7, #12
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop

0800e070 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	f023 0201 	bic.w	r2, r3, #1
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop

0800e094 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_HOST_MODE)
 800e0ac:	78fb      	ldrb	r3, [r7, #3]
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d106      	bne.n	800e0c0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	60da      	str	r2, [r3, #12]
 800e0be:	e008      	b.n	800e0d2 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_DEVICE_MODE)
 800e0c0:	78fb      	ldrb	r3, [r7, #3]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d105      	bne.n	800e0d2 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 800e0d2:	2032      	movs	r0, #50	; 0x32
 800e0d4:	f7f2 f914 	bl	8000300 <HAL_Delay>
  
  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop

0800e0e4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0e4:	b084      	sub	sp, #16
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b084      	sub	sp, #16
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	f107 001c 	add.w	r0, r7, #28
 800e0f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	60fb      	str	r3, [r7, #12]
  
  for (index = 0; index < 15 ; index++)
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	60fb      	str	r3, [r7, #12]
 800e0fe:	e009      	b.n	800e114 <USB_DevInit+0x30>
  {
    USBx->DIEPTXF[index] = 0;
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3340      	adds	r3, #64	; 0x40
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	2200      	movs	r2, #0
 800e10c:	605a      	str	r2, [r3, #4]
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  uint32_t index = 0;
  
  for (index = 0; index < 15 ; index++)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	3301      	adds	r3, #1
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b0e      	cmp	r3, #14
 800e118:	d9f2      	bls.n	800e100 <USB_DevInit+0x1c>
  {
    USBx->DIEPTXF[index] = 0;
  }
  
  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e11e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e13c:	6812      	ldr	r2, [r2, #0]
 800e13e:	601a      	str	r2, [r3, #0]
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	2103      	movs	r1, #3
 800e144:	f000 f90a 	bl	800e35c <USB_SetDevSpeed>
  
  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	2110      	movs	r1, #16
 800e14c:	f000 f8be 	bl	800e2cc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 f8e1 	bl	800e318 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e15c:	2200      	movs	r2, #0
 800e15e:	611a      	str	r2, [r3, #16]
  USBx_DEVICE->DOEPMSK = 0;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e166:	2200      	movs	r2, #0
 800e168:	615a      	str	r2, [r3, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e174:	619a      	str	r2, [r3, #24]
  USBx_DEVICE->DAINTMSK = 0;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e17c:	2200      	movs	r2, #0
 800e17e:	61da      	str	r2, [r3, #28]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 800e180:	2300      	movs	r3, #0
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	e02d      	b.n	800e1e2 <USB_DevInit+0xfe>
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	015a      	lsls	r2, r3, #5
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4413      	add	r3, r2
 800e18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	da09      	bge.n	800e1ac <USB_DevInit+0xc8>
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	015a      	lsls	r2, r3, #5
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800e1a8:	601a      	str	r2, [r3, #0]
 800e1aa:	e007      	b.n	800e1bc <USB_DevInit+0xd8>
    }
    else
    {
      USBx_INEP(index)->DIEPCTL = 0;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	015a      	lsls	r2, r3, #5
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	601a      	str	r2, [r3, #0]
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	015a      	lsls	r2, r3, #5
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	015a      	lsls	r2, r3, #5
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1d8:	22ff      	movs	r2, #255	; 0xff
 800e1da:	609a      	str	r2, [r3, #8]
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  USBx_DEVICE->DAINTMSK = 0;
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	69fa      	ldr	r2, [r7, #28]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d8cd      	bhi.n	800e186 <USB_DevInit+0xa2>
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
  }
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	60fb      	str	r3, [r7, #12]
 800e1ee:	e02d      	b.n	800e24c <USB_DevInit+0x168>
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	015a      	lsls	r2, r3, #5
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	da09      	bge.n	800e216 <USB_DevInit+0x132>
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	015a      	lsls	r2, r3, #5
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4413      	add	r3, r2
 800e20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e20e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800e212:	601a      	str	r2, [r3, #0]
 800e214:	e007      	b.n	800e226 <USB_DevInit+0x142>
    }
    else
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	015a      	lsls	r2, r3, #5
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e232:	2200      	movs	r2, #0
 800e234:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	015a      	lsls	r2, r3, #5
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4413      	add	r3, r2
 800e23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e242:	22ff      	movs	r2, #255	; 0xff
 800e244:	609a      	str	r2, [r3, #8]
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
  }
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	3301      	adds	r3, #1
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	69fa      	ldr	r2, [r7, #28]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	429a      	cmp	r2, r3
 800e252:	d8cd      	bhi.n	800e1f0 <USB_DevInit+0x10c>
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e260:	6912      	ldr	r2, [r2, #16]
 800e262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e266:	611a      	str	r2, [r3, #16]
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e274:	615a      	str	r2, [r3, #20]
  
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	f043 0210 	orr.w	r2, r3, #16
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	619a      	str	r2, [r3, #24]
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	699a      	ldr	r2, [r3, #24]
 800e286:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e28a:	f2c8 033c 	movt	r3, #32828	; 0x803c
 800e28e:	4313      	orrs	r3, r2
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	2b00      	cmp	r3, #0
 800e298:	d005      	beq.n	800e2a6 <USB_DevInit+0x1c2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	699b      	ldr	r3, [r3, #24]
 800e29e:	f043 0208 	orr.w	r2, r3, #8
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	619a      	str	r2, [r3, #24]
  }
  
  if (cfg.vbus_sensing_enable == ENABLE)
 800e2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d107      	bne.n	800e2bc <USB_DevInit+0x1d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	699b      	ldr	r3, [r3, #24]
 800e2b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e2b4:	f043 0304 	orr.w	r3, r3, #4
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 800e2bc:	2300      	movs	r3, #0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2c8:	b004      	add	sp, #16
 800e2ca:	4770      	bx	lr

0800e2cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	019b      	lsls	r3, r3, #6
 800e2de:	f043 0220 	orr.w	r2, r3, #32
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800e2f2:	f2c0 0303 	movt	r3, #3
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d901      	bls.n	800e2fe <USB_FlushTxFifo+0x32>
    {
      return HAL_TIMEOUT;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	e006      	b.n	800e30c <USB_FlushTxFifo+0x40>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	f003 0320 	and.w	r3, r3, #32
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1ed      	bne.n	800e2e6 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3714      	adds	r7, #20
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e320:	2300      	movs	r3, #0
 800e322:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2210      	movs	r2, #16
 800e328:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3301      	adds	r3, #1
 800e32e:	60fb      	str	r3, [r7, #12]
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800e336:	f2c0 0303 	movt	r3, #3
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d901      	bls.n	800e342 <USB_FlushRxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800e33e:	2303      	movs	r3, #3
 800e340:	e006      	b.n	800e350 <USB_FlushRxFifo+0x38>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	f003 0310 	and.w	r3, r3, #16
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1ed      	bne.n	800e32a <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	460b      	mov	r3, r1
 800e366:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e374:	6811      	ldr	r1, [r2, #0]
 800e376:	78fa      	ldrb	r2, [r7, #3]
 800e378:	430a      	orrs	r2, r1
 800e37a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	370c      	adds	r7, #12
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop

0800e38c <USB_GetDevSpeed>:
  *          This parameter can be one of the these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e38c:	b480      	push	{r7}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 800e394:	2300      	movs	r3, #0
 800e396:	73fb      	strb	r3, [r7, #15]
  
  if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	f003 0306 	and.w	r3, r3, #6
 800e3a4:	2b02      	cmp	r3, #2
 800e3a6:	d007      	beq.n	800e3b8 <USB_GetDevSpeed+0x2c>
      ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	f003 0306 	and.w	r3, r3, #6
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0;
  
  if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800e3b4:	2b06      	cmp	r3, #6
 800e3b6:	d102      	bne.n	800e3be <USB_GetDevSpeed+0x32>
      ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	73fb      	strb	r3, [r7, #15]
 800e3bc:	e009      	b.n	800e3d2 <USB_GetDevSpeed+0x46>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f003 0306 	and.w	r3, r3, #6
 800e3ca:	2b04      	cmp	r3, #4
 800e3cc:	d101      	bne.n	800e3d2 <USB_GetDevSpeed+0x46>
  {
    speed = USB_OTG_SPEED_LOW;
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3714      	adds	r7, #20
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	785b      	ldrb	r3, [r3, #1]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d004      	beq.n	800e3fc <USB_ActivateEndpoint+0x1c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep->type == EP_TYPE_BULK )
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	78db      	ldrb	r3, [r3, #3]
 800e400:	2b02      	cmp	r3, #2
 800e402:	d102      	bne.n	800e40a <USB_ActivateEndpoint+0x2a>
  {
    ep->data_pid_start = 0;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	2200      	movs	r2, #0
 800e408:	711a      	strb	r2, [r3, #4]
  }
  
  if (ep->is_in == 1)
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	785b      	ldrb	r3, [r3, #1]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d13d      	bne.n	800e48e <USB_ActivateEndpoint+0xae>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e41e:	69d1      	ldr	r1, [r2, #28]
 800e420:	683a      	ldr	r2, [r7, #0]
 800e422:	7812      	ldrb	r2, [r2, #0]
 800e424:	2001      	movs	r0, #1
 800e426:	fa00 f202 	lsl.w	r2, r0, r2
 800e42a:	b292      	uxth	r2, r2
 800e42c:	430a      	orrs	r2, r1
 800e42e:	61da      	str	r2, [r3, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	015a      	lsls	r2, r3, #5
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4413      	add	r3, r2
 800e43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e444:	2b00      	cmp	r3, #0
 800e446:	d15b      	bne.n	800e500 <USB_ActivateEndpoint+0x120>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	015a      	lsls	r2, r3, #5
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4413      	add	r3, r2
 800e452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e456:	461a      	mov	r2, r3
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	0159      	lsls	r1, r3, #5
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	440b      	add	r3, r1
 800e462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e466:	6819      	ldr	r1, [r3, #0]
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	f3c3 000a 	ubfx	r0, r3, #0, #11
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	78db      	ldrb	r3, [r3, #3]
 800e474:	049b      	lsls	r3, r3, #18
 800e476:	4318      	orrs	r0, r3
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	059b      	lsls	r3, r3, #22
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800e47e:	4303      	orrs	r3, r0
 800e480:	430b      	orrs	r3, r1
 800e482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e48a:	6013      	str	r3, [r2, #0]
 800e48c:	e038      	b.n	800e500 <USB_ActivateEndpoint+0x120>
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    }
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e49a:	69d1      	ldr	r1, [r2, #28]
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	7812      	ldrb	r2, [r2, #0]
 800e4a0:	2001      	movs	r0, #1
 800e4a2:	fa00 f202 	lsl.w	r2, r0, r2
 800e4a6:	0412      	lsls	r2, r2, #16
 800e4a8:	430a      	orrs	r2, r1
 800e4aa:	61da      	str	r2, [r3, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	015a      	lsls	r2, r3, #5
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d11d      	bne.n	800e500 <USB_ActivateEndpoint+0x120>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	015a      	lsls	r2, r3, #5
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	0159      	lsls	r1, r3, #5
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	440b      	add	r3, r1
 800e4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4e2:	6819      	ldr	r1, [r3, #0]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	f3c3 000a 	ubfx	r0, r3, #0, #11
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	78db      	ldrb	r3, [r3, #3]
 800e4f0:	049b      	lsls	r3, r3, #18
 800e4f2:	4303      	orrs	r3, r0
 800e4f4:	430b      	orrs	r3, r1
 800e4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4fe:	6013      	str	r3, [r2, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  
  return HAL_OK;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop

0800e510 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	785b      	ldrb	r3, [r3, #1]
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d132      	bne.n	800e588 <USB_DeactivateEndpoint+0x78>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e52e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	7812      	ldrb	r2, [r2, #0]
 800e534:	2001      	movs	r0, #1
 800e536:	fa00 f202 	lsl.w	r2, r0, r2
 800e53a:	b292      	uxth	r2, r2
 800e53c:	43d2      	mvns	r2, r2
 800e53e:	400a      	ands	r2, r1
 800e540:	63da      	str	r2, [r3, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e54e:	69d1      	ldr	r1, [r2, #28]
 800e550:	683a      	ldr	r2, [r7, #0]
 800e552:	7812      	ldrb	r2, [r2, #0]
 800e554:	2001      	movs	r0, #1
 800e556:	fa00 f202 	lsl.w	r2, r0, r2
 800e55a:	b292      	uxth	r2, r2
 800e55c:	43d2      	mvns	r2, r2
 800e55e:	400a      	ands	r2, r1
 800e560:	61da      	str	r2, [r3, #28]
    USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	015a      	lsls	r2, r3, #5
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4413      	add	r3, r2
 800e56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e570:	683a      	ldr	r2, [r7, #0]
 800e572:	7812      	ldrb	r2, [r2, #0]
 800e574:	0151      	lsls	r1, r2, #5
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	440a      	add	r2, r1
 800e57a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e57e:	6812      	ldr	r2, [r2, #0]
 800e580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e584:	601a      	str	r2, [r3, #0]
 800e586:	e031      	b.n	800e5ec <USB_DeactivateEndpoint+0xdc>
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e594:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	7812      	ldrb	r2, [r2, #0]
 800e59a:	2001      	movs	r0, #1
 800e59c:	fa00 f202 	lsl.w	r2, r0, r2
 800e5a0:	0412      	lsls	r2, r2, #16
 800e5a2:	43d2      	mvns	r2, r2
 800e5a4:	400a      	ands	r2, r1
 800e5a6:	63da      	str	r2, [r3, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5b4:	69d1      	ldr	r1, [r2, #28]
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	7812      	ldrb	r2, [r2, #0]
 800e5ba:	2001      	movs	r0, #1
 800e5bc:	fa00 f202 	lsl.w	r2, r0, r2
 800e5c0:	0412      	lsls	r2, r2, #16
 800e5c2:	43d2      	mvns	r2, r2
 800e5c4:	400a      	ands	r2, r1
 800e5c6:	61da      	str	r2, [r3, #28]
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	015a      	lsls	r2, r3, #5
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	7812      	ldrb	r2, [r2, #0]
 800e5da:	0151      	lsls	r1, r2, #5
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	440a      	add	r2, r1
 800e5e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5e4:	6812      	ldr	r2, [r2, #0]
 800e5e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e5ea:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	370c      	adds	r7, #12
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop

0800e5fc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  uint16_t pktcnt = 0;
 800e606:	2300      	movs	r3, #0
 800e608:	81fb      	strh	r3, [r7, #14]
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	785b      	ldrb	r3, [r3, #1]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	f040 812e 	bne.w	800e870 <USB_EPStartXfer+0x274>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	695b      	ldr	r3, [r3, #20]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d13a      	bne.n	800e692 <USB_EPStartXfer+0x96>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	015a      	lsls	r2, r3, #5
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4413      	add	r3, r2
 800e626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e62a:	461a      	mov	r2, r3
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	0159      	lsls	r1, r3, #5
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	440b      	add	r3, r1
 800e636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e640:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e644:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e654:	683a      	ldr	r2, [r7, #0]
 800e656:	7812      	ldrb	r2, [r2, #0]
 800e658:	0151      	lsls	r1, r2, #5
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	440a      	add	r2, r1
 800e65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e662:	6912      	ldr	r2, [r2, #16]
 800e664:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800e668:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	015a      	lsls	r2, r3, #5
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	4413      	add	r3, r2
 800e674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e678:	461a      	mov	r2, r3
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	0159      	lsls	r1, r3, #5
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	440b      	add	r3, r1
 800e684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	0cdb      	lsrs	r3, r3, #19
 800e68c:	04db      	lsls	r3, r3, #19
 800e68e:	6113      	str	r3, [r2, #16]
 800e690:	e085      	b.n	800e79e <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	015a      	lsls	r2, r3, #5
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4413      	add	r3, r2
 800e69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	0159      	lsls	r1, r3, #5
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	440b      	add	r3, r1
 800e6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6b0:	691b      	ldr	r3, [r3, #16]
 800e6b2:	0cdb      	lsrs	r3, r3, #19
 800e6b4:	04db      	lsls	r3, r3, #19
 800e6b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	015a      	lsls	r2, r3, #5
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	0159      	lsls	r1, r3, #5
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	440b      	add	r3, r1
 800e6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e6dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e6e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	015a      	lsls	r2, r3, #5
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	0159      	lsls	r1, r3, #5
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	440b      	add	r3, r1
 800e6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e700:	6919      	ldr	r1, [r3, #16]
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	6958      	ldr	r0, [r3, #20]
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	689b      	ldr	r3, [r3, #8]
 800e70a:	4403      	add	r3, r0
 800e70c:	1e58      	subs	r0, r3, #1
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	fbb0 f3f3 	udiv	r3, r0, r3
 800e716:	04d8      	lsls	r0, r3, #19
 800e718:	2300      	movs	r3, #0
 800e71a:	f6c1 73f8 	movt	r3, #8184	; 0x1ff8
 800e71e:	4003      	ands	r3, r0
 800e720:	430b      	orrs	r3, r1
 800e722:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	015a      	lsls	r2, r3, #5
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4413      	add	r3, r2
 800e72e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e732:	683a      	ldr	r2, [r7, #0]
 800e734:	7812      	ldrb	r2, [r2, #0]
 800e736:	0151      	lsls	r1, r2, #5
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	440a      	add	r2, r1
 800e73c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e740:	6911      	ldr	r1, [r2, #16]
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	6952      	ldr	r2, [r2, #20]
 800e746:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800e74a:	430a      	orrs	r2, r1
 800e74c:	611a      	str	r2, [r3, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	78db      	ldrb	r3, [r3, #3]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d123      	bne.n	800e79e <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4413      	add	r3, r2
 800e760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e764:	683a      	ldr	r2, [r7, #0]
 800e766:	7812      	ldrb	r2, [r2, #0]
 800e768:	0151      	lsls	r1, r2, #5
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	440a      	add	r2, r1
 800e76e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e772:	6912      	ldr	r2, [r2, #16]
 800e774:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 800e778:	611a      	str	r2, [r3, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	015a      	lsls	r2, r3, #5
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4413      	add	r3, r2
 800e784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e788:	683a      	ldr	r2, [r7, #0]
 800e78a:	7812      	ldrb	r2, [r2, #0]
 800e78c:	0151      	lsls	r1, r2, #5
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	440a      	add	r2, r1
 800e792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e796:	6912      	ldr	r2, [r2, #16]
 800e798:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e79c:	611a      	str	r2, [r3, #16]
      }
    }
    
    if (ep->type != EP_TYPE_ISOC)
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	78db      	ldrb	r3, [r3, #3]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d011      	beq.n	800e7ca <USB_EPStartXfer+0x1ce>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	695b      	ldr	r3, [r3, #20]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00d      	beq.n	800e7ca <USB_EPStartXfer+0x1ce>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7ba:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	7812      	ldrb	r2, [r2, #0]
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	fa00 f202 	lsl.w	r2, r0, r2
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	78db      	ldrb	r3, [r3, #3]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d12c      	bne.n	800e82c <USB_EPStartXfer+0x230>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d112      	bne.n	800e808 <USB_EPStartXfer+0x20c>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	015a      	lsls	r2, r3, #5
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	7812      	ldrb	r2, [r2, #0]
 800e7f4:	0151      	lsls	r1, r2, #5
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	440a      	add	r2, r1
 800e7fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7fe:	6812      	ldr	r2, [r2, #0]
 800e800:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e804:	601a      	str	r2, [r3, #0]
 800e806:	e011      	b.n	800e82c <USB_EPStartXfer+0x230>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	015a      	lsls	r2, r3, #5
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4413      	add	r3, r2
 800e812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e816:	683a      	ldr	r2, [r7, #0]
 800e818:	7812      	ldrb	r2, [r2, #0]
 800e81a:	0151      	lsls	r1, r2, #5
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	440a      	add	r2, r1
 800e820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e824:	6812      	ldr	r2, [r2, #0]
 800e826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e82a:	601a      	str	r2, [r3, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	015a      	lsls	r2, r3, #5
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4413      	add	r3, r2
 800e836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e83a:	683a      	ldr	r2, [r7, #0]
 800e83c:	7812      	ldrb	r2, [r2, #0]
 800e83e:	0151      	lsls	r1, r2, #5
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	440a      	add	r2, r1
 800e844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e848:	6812      	ldr	r2, [r2, #0]
 800e84a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e84e:	601a      	str	r2, [r3, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	78db      	ldrb	r3, [r3, #3]
 800e854:	2b01      	cmp	r3, #1
 800e856:	f040 80de 	bne.w	800ea16 <USB_EPStartXfer+0x41a>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	68d9      	ldr	r1, [r3, #12]
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	781a      	ldrb	r2, [r3, #0]
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	695b      	ldr	r3, [r3, #20]
 800e866:	b29b      	uxth	r3, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 fa11 	bl	800ec90 <USB_WritePacket>
 800e86e:	e0d2      	b.n	800ea16 <USB_EPStartXfer+0x41a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	015a      	lsls	r2, r3, #5
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4413      	add	r3, r2
 800e87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e87e:	461a      	mov	r2, r3
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	0159      	lsls	r1, r3, #5
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	440b      	add	r3, r1
 800e88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	0cdb      	lsrs	r3, r3, #19
 800e892:	04db      	lsls	r3, r3, #19
 800e894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	015a      	lsls	r2, r3, #5
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4413      	add	r3, r2
 800e8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	0159      	lsls	r1, r3, #5
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	440b      	add	r3, r1
 800e8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8b4:	691b      	ldr	r3, [r3, #16]
 800e8b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e8ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e8be:	6113      	str	r3, [r2, #16]
    
    if (ep->xfer_len == 0)
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	695b      	ldr	r3, [r3, #20]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d127      	bne.n	800e918 <USB_EPStartXfer+0x31c>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	015a      	lsls	r2, r3, #5
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8d6:	683a      	ldr	r2, [r7, #0]
 800e8d8:	7812      	ldrb	r2, [r2, #0]
 800e8da:	0151      	lsls	r1, r2, #5
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	440a      	add	r2, r1
 800e8e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8e4:	6911      	ldr	r1, [r2, #16]
 800e8e6:	683a      	ldr	r2, [r7, #0]
 800e8e8:	6892      	ldr	r2, [r2, #8]
 800e8ea:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	611a      	str	r2, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	015a      	lsls	r2, r3, #5
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	7812      	ldrb	r2, [r2, #0]
 800e904:	0151      	lsls	r1, r2, #5
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	440a      	add	r2, r1
 800e90a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e90e:	6912      	ldr	r2, [r2, #16]
 800e910:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800e914:	611a      	str	r2, [r3, #16]
 800e916:	e03b      	b.n	800e990 <USB_EPStartXfer+0x394>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	695a      	ldr	r2, [r3, #20]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	4413      	add	r3, r2
 800e922:	1e5a      	subs	r2, r3, #1
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	fbb2 f3f3 	udiv	r3, r2, r3
 800e92c:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	015a      	lsls	r2, r3, #5
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4413      	add	r3, r2
 800e938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e93c:	461a      	mov	r2, r3
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	0159      	lsls	r1, r3, #5
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	440b      	add	r3, r1
 800e948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e94c:	6919      	ldr	r1, [r3, #16]
 800e94e:	89fb      	ldrh	r3, [r7, #14]
 800e950:	04db      	lsls	r3, r3, #19
 800e952:	4618      	mov	r0, r3
 800e954:	2300      	movs	r3, #0
 800e956:	f6c1 73f8 	movt	r3, #8184	; 0x1ff8
 800e95a:	4003      	ands	r3, r0
 800e95c:	430b      	orrs	r3, r1
 800e95e:	6113      	str	r3, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	015a      	lsls	r2, r3, #5
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4413      	add	r3, r2
 800e96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e96e:	683a      	ldr	r2, [r7, #0]
 800e970:	7812      	ldrb	r2, [r2, #0]
 800e972:	0151      	lsls	r1, r2, #5
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	440a      	add	r2, r1
 800e978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e97c:	6911      	ldr	r1, [r2, #16]
 800e97e:	683a      	ldr	r2, [r7, #0]
 800e980:	6892      	ldr	r2, [r2, #8]
 800e982:	89f8      	ldrh	r0, [r7, #14]
 800e984:	fb00 f202 	mul.w	r2, r0, r2
 800e988:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800e98c:	430a      	orrs	r2, r1
 800e98e:	611a      	str	r2, [r3, #16]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	78db      	ldrb	r3, [r3, #3]
 800e994:	2b01      	cmp	r3, #1
 800e996:	d12c      	bne.n	800e9f2 <USB_EPStartXfer+0x3f6>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d112      	bne.n	800e9ce <USB_EPStartXfer+0x3d2>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	015a      	lsls	r2, r3, #5
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	7812      	ldrb	r2, [r2, #0]
 800e9ba:	0151      	lsls	r1, r2, #5
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	440a      	add	r2, r1
 800e9c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9c4:	6812      	ldr	r2, [r2, #0]
 800e9c6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	e011      	b.n	800e9f2 <USB_EPStartXfer+0x3f6>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	015a      	lsls	r2, r3, #5
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9dc:	683a      	ldr	r2, [r7, #0]
 800e9de:	7812      	ldrb	r2, [r2, #0]
 800e9e0:	0151      	lsls	r1, r2, #5
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	440a      	add	r2, r1
 800e9e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ea:	6812      	ldr	r2, [r2, #0]
 800e9ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e9f0:	601a      	str	r2, [r3, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	015a      	lsls	r2, r3, #5
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	7812      	ldrb	r2, [r2, #0]
 800ea04:	0151      	lsls	r1, r2, #5
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	440a      	add	r2, r1
 800ea0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea0e:	6812      	ldr	r2, [r2, #0]
 800ea10:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ea14:	601a      	str	r2, [r3, #0]
  }
  
  return HAL_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <USB_EP0StartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1)
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	785b      	ldrb	r3, [r3, #1]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	f040 80bd 	bne.w	800ebae <USB_EP0StartXfer+0x18e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	695b      	ldr	r3, [r3, #20]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d13a      	bne.n	800eab2 <USB_EP0StartXfer+0x92>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	015a      	lsls	r2, r3, #5
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4413      	add	r3, r2
 800ea46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	0159      	lsls	r1, r3, #5
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	440b      	add	r3, r1
 800ea56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea64:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19));
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	015a      	lsls	r2, r3, #5
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4413      	add	r3, r2
 800ea70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea74:	683a      	ldr	r2, [r7, #0]
 800ea76:	7812      	ldrb	r2, [r2, #0]
 800ea78:	0151      	lsls	r1, r2, #5
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	440a      	add	r2, r1
 800ea7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea82:	6912      	ldr	r2, [r2, #16]
 800ea84:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800ea88:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	015a      	lsls	r2, r3, #5
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4413      	add	r3, r2
 800ea94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea98:	461a      	mov	r2, r3
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	0159      	lsls	r1, r3, #5
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	440b      	add	r3, r1
 800eaa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	0cdb      	lsrs	r3, r3, #19
 800eaac:	04db      	lsls	r3, r3, #19
 800eaae:	6113      	str	r3, [r2, #16]
 800eab0:	e058      	b.n	800eb64 <USB_EP0StartXfer+0x144>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	015a      	lsls	r2, r3, #5
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4413      	add	r3, r2
 800eabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac0:	461a      	mov	r2, r3
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	0159      	lsls	r1, r3, #5
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	440b      	add	r3, r1
 800eacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	0cdb      	lsrs	r3, r3, #19
 800ead4:	04db      	lsls	r3, r3, #19
 800ead6:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eae6:	461a      	mov	r2, r3
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	0159      	lsls	r1, r3, #5
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	440b      	add	r3, r1
 800eaf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eafc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eb00:	6113      	str	r3, [r2, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	695a      	ldr	r2, [r3, #20]
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d903      	bls.n	800eb16 <USB_EP0StartXfer+0xf6>
      {
        ep->xfer_len = ep->maxpacket;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	689a      	ldr	r2, [r3, #8]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19));
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	015a      	lsls	r2, r3, #5
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4413      	add	r3, r2
 800eb20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb24:	683a      	ldr	r2, [r7, #0]
 800eb26:	7812      	ldrb	r2, [r2, #0]
 800eb28:	0151      	lsls	r1, r2, #5
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	440a      	add	r2, r1
 800eb2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb32:	6912      	ldr	r2, [r2, #16]
 800eb34:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800eb38:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	015a      	lsls	r2, r3, #5
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4413      	add	r3, r2
 800eb44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	7812      	ldrb	r2, [r2, #0]
 800eb4c:	0151      	lsls	r1, r2, #5
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	440a      	add	r2, r1
 800eb52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb56:	6911      	ldr	r1, [r2, #16]
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	6952      	ldr	r2, [r2, #20]
 800eb5c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800eb60:	430a      	orrs	r2, r1
 800eb62:	611a      	str	r2, [r3, #16]
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	695b      	ldr	r3, [r3, #20]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00d      	beq.n	800eb88 <USB_EP0StartXfer+0x168>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb78:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	7812      	ldrb	r2, [r2, #0]
 800eb7e:	2001      	movs	r0, #1
 800eb80:	fa00 f202 	lsl.w	r2, r0, r2
 800eb84:	430a      	orrs	r2, r1
 800eb86:	635a      	str	r2, [r3, #52]	; 0x34
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	015a      	lsls	r2, r3, #5
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4413      	add	r3, r2
 800eb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	7812      	ldrb	r2, [r2, #0]
 800eb9a:	0151      	lsls	r1, r2, #5
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	440a      	add	r2, r1
 800eba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eba4:	6812      	ldr	r2, [r2, #0]
 800eba6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ebaa:	601a      	str	r2, [r3, #0]
 800ebac:	e068      	b.n	800ec80 <USB_EP0StartXfer+0x260>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	015a      	lsls	r2, r3, #5
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	0159      	lsls	r1, r3, #5
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	440b      	add	r3, r1
 800ebc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	0cdb      	lsrs	r3, r3, #19
 800ebd0:	04db      	lsls	r3, r3, #19
 800ebd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	015a      	lsls	r2, r3, #5
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	0159      	lsls	r1, r3, #5
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	440b      	add	r3, r1
 800ebee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf2:	691b      	ldr	r3, [r3, #16]
 800ebf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ebf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ebfc:	6113      	str	r3, [r2, #16]
    
    if (ep->xfer_len > 0)
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	695b      	ldr	r3, [r3, #20]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d003      	beq.n	800ec0e <USB_EP0StartXfer+0x1ee>
    {
      ep->xfer_len = ep->maxpacket;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	689a      	ldr	r2, [r3, #8]
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	015a      	lsls	r2, r3, #5
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	4413      	add	r3, r2
 800ec18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec1c:	683a      	ldr	r2, [r7, #0]
 800ec1e:	7812      	ldrb	r2, [r2, #0]
 800ec20:	0151      	lsls	r1, r2, #5
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	440a      	add	r2, r1
 800ec26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec2a:	6912      	ldr	r2, [r2, #16]
 800ec2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800ec30:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	015a      	lsls	r2, r3, #5
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	7812      	ldrb	r2, [r2, #0]
 800ec44:	0151      	lsls	r1, r2, #5
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	440a      	add	r2, r1
 800ec4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec4e:	6911      	ldr	r1, [r2, #16]
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	6892      	ldr	r2, [r2, #8]
 800ec54:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800ec58:	430a      	orrs	r2, r1
 800ec5a:	611a      	str	r2, [r3, #16]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	015a      	lsls	r2, r3, #5
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4413      	add	r3, r2
 800ec66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	7812      	ldrb	r2, [r2, #0]
 800ec6e:	0151      	lsls	r1, r2, #5
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	440a      	add	r2, r1
 800ec74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec78:	6812      	ldr	r2, [r2, #0]
 800ec7a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ec7e:	601a      	str	r2, [r3, #0]
  }
  
  return HAL_OK;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	370c      	adds	r7, #12
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop

0800ec90 <USB_WritePacket>:
  * @param  ch_ep_num : endpoint or host channel number
  * @param  len : Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b087      	sub	sp, #28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	71fa      	strb	r2, [r7, #7]
 800ec9c:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0 , index = 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	613b      	str	r3, [r7, #16]
 800eca2:	2300      	movs	r3, #0
 800eca4:	617b      	str	r3, [r7, #20]
  
  count32b =  (len + 3) / 4;
 800eca6:	88bb      	ldrh	r3, [r7, #4]
 800eca8:	3303      	adds	r3, #3
 800ecaa:	1cda      	adds	r2, r3, #3
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	bfb8      	it	lt
 800ecb0:	4613      	movlt	r3, r2
 800ecb2:	109b      	asrs	r3, r3, #2
 800ecb4:	613b      	str	r3, [r7, #16]
  for (index = 0; index < count32b; index++, src += 4)
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	617b      	str	r3, [r7, #20]
 800ecba:	e00e      	b.n	800ecda <USB_WritePacket+0x4a>
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800ecbc:	79fb      	ldrb	r3, [r7, #7]
 800ecbe:	031a      	lsls	r2, r3, #12
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecc8:	68ba      	ldr	r2, [r7, #8]
 800ecca:	6812      	ldr	r2, [r2, #0]
 800eccc:	601a      	str	r2, [r3, #0]
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
  uint32_t count32b = 0 , index = 0;
  
  count32b =  (len + 3) / 4;
  for (index = 0; index < count32b; index++, src += 4)
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	617b      	str	r3, [r7, #20]
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	3304      	adds	r3, #4
 800ecd8:	60bb      	str	r3, [r7, #8]
 800ecda:	697a      	ldr	r2, [r7, #20]
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d3ec      	bcc.n	800ecbc <USB_WritePacket+0x2c>
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
  }
  return HAL_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	371c      	adds	r7, #28
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <USB_ReadPacket>:
  * @param  dest : destination pointer
  * @param  len : Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b087      	sub	sp, #28
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 800ed02:	88fb      	ldrh	r3, [r7, #6]
 800ed04:	3303      	adds	r3, #3
 800ed06:	1cda      	adds	r2, r3, #3
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	bfb8      	it	lt
 800ed0c:	4613      	movlt	r3, r2
 800ed0e:	109b      	asrs	r3, r3, #2
 800ed10:	613b      	str	r3, [r7, #16]
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 800ed12:	2300      	movs	r3, #0
 800ed14:	617b      	str	r3, [r7, #20]
 800ed16:	e00b      	b.n	800ed30 <USB_ReadPacket+0x40>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	601a      	str	r2, [r3, #0]
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t index = 0;
  uint32_t count32b = (len + 3) / 4;
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	3301      	adds	r3, #1
 800ed28:	617b      	str	r3, [r7, #20]
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	3304      	adds	r3, #4
 800ed2e:	60bb      	str	r3, [r7, #8]
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d3ef      	bcc.n	800ed18 <USB_ReadPacket+0x28>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
    
  }
  return ((void *)dest);
 800ed38:	68bb      	ldr	r3, [r7, #8]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	371c      	adds	r7, #28
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop

0800ed48 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	785b      	ldrb	r3, [r3, #1]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d12e      	bne.n	800edb8 <USB_EPSetStall+0x70>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	015a      	lsls	r2, r3, #5
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4413      	add	r3, r2
 800ed64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	db11      	blt.n	800ed92 <USB_EPSetStall+0x4a>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	015a      	lsls	r2, r3, #5
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4413      	add	r3, r2
 800ed78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	7812      	ldrb	r2, [r2, #0]
 800ed80:	0151      	lsls	r1, r2, #5
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	440a      	add	r2, r1
 800ed86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed8a:	6812      	ldr	r2, [r2, #0]
 800ed8c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800ed90:	601a      	str	r2, [r3, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	015a      	lsls	r2, r3, #5
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eda0:	683a      	ldr	r2, [r7, #0]
 800eda2:	7812      	ldrb	r2, [r2, #0]
 800eda4:	0151      	lsls	r1, r2, #5
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	440a      	add	r2, r1
 800edaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edae:	6812      	ldr	r2, [r2, #0]
 800edb0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800edb4:	601a      	str	r2, [r3, #0]
 800edb6:	e02d      	b.n	800ee14 <USB_EPSetStall+0xcc>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	015a      	lsls	r2, r3, #5
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4413      	add	r3, r2
 800edc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	db11      	blt.n	800edf0 <USB_EPSetStall+0xa8>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	015a      	lsls	r2, r3, #5
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	4413      	add	r3, r2
 800edd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edda:	683a      	ldr	r2, [r7, #0]
 800eddc:	7812      	ldrb	r2, [r2, #0]
 800edde:	0151      	lsls	r1, r2, #5
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	440a      	add	r2, r1
 800ede4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ede8:	6812      	ldr	r2, [r2, #0]
 800edea:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800edee:	601a      	str	r2, [r3, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	015a      	lsls	r2, r3, #5
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4413      	add	r3, r2
 800edfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	7812      	ldrb	r2, [r2, #0]
 800ee02:	0151      	lsls	r1, r2, #5
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	440a      	add	r2, r1
 800ee08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee0c:	6812      	ldr	r2, [r2, #0]
 800ee0e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800ee12:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop

0800ee24 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	785b      	ldrb	r3, [r3, #1]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d12c      	bne.n	800ee90 <USB_EPClearStall+0x6c>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	015a      	lsls	r2, r3, #5
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4413      	add	r3, r2
 800ee40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee44:	683a      	ldr	r2, [r7, #0]
 800ee46:	7812      	ldrb	r2, [r2, #0]
 800ee48:	0151      	lsls	r1, r2, #5
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	440a      	add	r2, r1
 800ee4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee52:	6812      	ldr	r2, [r2, #0]
 800ee54:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800ee58:	601a      	str	r2, [r3, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	78db      	ldrb	r3, [r3, #3]
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d003      	beq.n	800ee6a <USB_EPClearStall+0x46>
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	78db      	ldrb	r3, [r3, #3]
 800ee66:	2b02      	cmp	r3, #2
 800ee68:	d13e      	bne.n	800eee8 <USB_EPClearStall+0xc4>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	015a      	lsls	r2, r3, #5
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4413      	add	r3, r2
 800ee74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee78:	683a      	ldr	r2, [r7, #0]
 800ee7a:	7812      	ldrb	r2, [r2, #0]
 800ee7c:	0151      	lsls	r1, r2, #5
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	440a      	add	r2, r1
 800ee82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee86:	6812      	ldr	r2, [r2, #0]
 800ee88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ee8c:	601a      	str	r2, [r3, #0]
 800ee8e:	e02b      	b.n	800eee8 <USB_EPClearStall+0xc4>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	015a      	lsls	r2, r3, #5
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	4413      	add	r3, r2
 800ee9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee9e:	683a      	ldr	r2, [r7, #0]
 800eea0:	7812      	ldrb	r2, [r2, #0]
 800eea2:	0151      	lsls	r1, r2, #5
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	440a      	add	r2, r1
 800eea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eeac:	6812      	ldr	r2, [r2, #0]
 800eeae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800eeb2:	601a      	str	r2, [r3, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	78db      	ldrb	r3, [r3, #3]
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d003      	beq.n	800eec4 <USB_EPClearStall+0xa0>
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	78db      	ldrb	r3, [r3, #3]
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d111      	bne.n	800eee8 <USB_EPClearStall+0xc4>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	015a      	lsls	r2, r3, #5
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4413      	add	r3, r2
 800eece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eed2:	683a      	ldr	r2, [r7, #0]
 800eed4:	7812      	ldrb	r2, [r2, #0]
 800eed6:	0151      	lsls	r1, r2, #5
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	440a      	add	r2, r1
 800eedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eee0:	6812      	ldr	r2, [r2, #0]
 800eee2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800eee6:	601a      	str	r2, [r3, #0]
    }
  }
  return HAL_OK;
 800eee8:	2300      	movs	r3, #0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	370c      	adds	r7, #12
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop

0800eef8 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  uint32_t index = 0;
 800ef00:	2300      	movs	r3, #0
 800ef02:	60fb      	str	r3, [r7, #12]
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
 800ef04:	2300      	movs	r3, #0
 800ef06:	60fb      	str	r3, [r7, #12]
 800ef08:	e012      	b.n	800ef30 <USB_StopDevice+0x38>
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	015a      	lsls	r2, r3, #5
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4413      	add	r3, r2
 800ef12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef16:	22ff      	movs	r2, #255	; 0xff
 800ef18:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	015a      	lsls	r2, r3, #5
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4413      	add	r3, r2
 800ef22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef26:	22ff      	movs	r2, #255	; 0xff
 800ef28:	609a      	str	r2, [r3, #8]
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t index = 0;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2b0e      	cmp	r3, #14
 800ef34:	d9e9      	bls.n	800ef0a <USB_StopDevice+0x12>
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef40:	619a      	str	r2, [r3, #24]
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef48:	2200      	movs	r2, #0
 800ef4a:	611a      	str	r2, [r3, #16]
  USBx_DEVICE->DOEPMSK  = 0;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef52:	2200      	movs	r2, #0
 800ef54:	615a      	str	r2, [r3, #20]
  USBx_DEVICE->DAINTMSK = 0;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	61da      	str	r2, [r3, #28]
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f7ff f9d9 	bl	800e318 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	2110      	movs	r1, #16
 800ef6a:	f7ff f9af 	bl	800e2cc <USB_FlushTxFifo>
  
  return HAL_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef90:	6812      	ldr	r2, [r2, #0]
 800ef92:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800ef96:	601a      	str	r2, [r3, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efa4:	6811      	ldr	r1, [r2, #0]
 800efa6:	78fa      	ldrb	r2, [r7, #3]
 800efa8:	0112      	lsls	r2, r2, #4
 800efaa:	f402 62fe 	and.w	r2, r2, #2032	; 0x7f0
 800efae:	430a      	orrs	r2, r1
 800efb0:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efd4:	6852      	ldr	r2, [r2, #4]
 800efd6:	f022 0202 	bic.w	r2, r2, #2
 800efda:	605a      	str	r2, [r3, #4]
  HAL_Delay(3);
 800efdc:	2003      	movs	r0, #3
 800efde:	f7f1 f98f 	bl	8000300 <HAL_Delay>
  
  return HAL_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f000:	6852      	ldr	r2, [r2, #4]
 800f002:	f042 0202 	orr.w	r2, r2, #2
 800f006:	605a      	str	r2, [r3, #4]
  HAL_Delay(3);
 800f008:	2003      	movs	r0, #3
 800f00a:	f7f1 f979 	bl	8000300 <HAL_Delay>
  
  return HAL_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 800f018:	b480      	push	{r7}
 800f01a:	b085      	sub	sp, #20
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f020:	2300      	movs	r3, #0
 800f022:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->GINTSTS;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	695b      	ldr	r3, [r3, #20]
 800f028:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	699b      	ldr	r3, [r3, #24]
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	4013      	ands	r3, r2
 800f032:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f034:	68fb      	ldr	r3, [r7, #12]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3714      	adds	r7, #20
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop

0800f044 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	60fb      	str	r3, [r7, #12]
  tmpreg  = USBx_DEVICE->DAINT;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f056:	699b      	ldr	r3, [r3, #24]
 800f058:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f060:	69db      	ldr	r3, [r3, #28]
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	4013      	ands	r3, r2
 800f066:	60fb      	str	r3, [r7, #12]
  return ((tmpreg & 0xffff0000) >> 16);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	0c1b      	lsrs	r3, r3, #16
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3714      	adds	r7, #20
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800f078:	b480      	push	{r7}
 800f07a:	b085      	sub	sp, #20
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f080:	2300      	movs	r3, #0
 800f082:	60fb      	str	r3, [r7, #12]
  tmpreg  = USBx_DEVICE->DAINT;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f08a:	699b      	ldr	r3, [r3, #24]
 800f08c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f094:	69db      	ldr	r3, [r3, #28]
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	4013      	ands	r3, r2
 800f09a:	60fb      	str	r3, [r7, #12]
  return ((tmpreg & 0xFFFF));
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	b29b      	uxth	r3, r3
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3714      	adds	r7, #20
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	60fb      	str	r3, [r7, #12]
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 800f0bc:	78fb      	ldrb	r3, [r7, #3]
 800f0be:	015a      	lsls	r2, r3, #5
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0c8:	689b      	ldr	r3, [r3, #8]
 800f0ca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0d2:	695b      	ldr	r3, [r3, #20]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	4013      	ands	r3, r2
 800f0d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f0da:	68fb      	ldr	r3, [r7, #12]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3714      	adds	r7, #20
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b087      	sub	sp, #28
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0, msk = 0, emp = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	617b      	str	r3, [r7, #20]
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	613b      	str	r3, [r7, #16]
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	60fb      	str	r3, [r7, #12]
  
  msk = USBx_DEVICE->DIEPMSK;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f112:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800f114:	78fb      	ldrb	r3, [r7, #3]
 800f116:	68fa      	ldr	r2, [r7, #12]
 800f118:	fa22 f303 	lsr.w	r3, r2, r3
 800f11c:	01db      	lsls	r3, r3, #7
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	693a      	ldr	r2, [r7, #16]
 800f122:	4313      	orrs	r3, r2
 800f124:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800f126:	78fb      	ldrb	r3, [r7, #3]
 800f128:	015a      	lsls	r2, r3, #5
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4413      	add	r3, r2
 800f12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f132:	689a      	ldr	r2, [r3, #8]
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	4013      	ands	r3, r2
 800f138:	617b      	str	r3, [r7, #20]
  return tmpreg;
 800f13a:	697b      	ldr	r3, [r7, #20]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	371c      	adds	r7, #28
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <USB_ClearInterrupts>:
  * @param  USBx : Selected device
  * @param  interrupt : interrupt flag
  * @retval None
  */
void  USB_ClearInterrupts (USB_OTG_GlobalTypeDef *USBx, uint32_t interrupt)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  USBx->GINTSTS |= interrupt;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	695a      	ldr	r2, [r3, #20]
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	431a      	orrs	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	615a      	str	r2, [r3, #20]
}
 800f15e:	370c      	adds	r7, #12
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <USB_GetMode>:
  *          This parameter can be one of the these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	695b      	ldr	r3, [r3, #20]
 800f174:	f003 0301 	and.w	r3, r3, #1
}
 800f178:	4618      	mov	r0, r3
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f192:	461a      	mov	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f1a0:	f023 0307 	bic.w	r3, r3, #7
 800f1a4:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	f003 0306 	and.w	r3, r3, #6
 800f1b2:	2b04      	cmp	r3, #4
 800f1b4:	d109      	bne.n	800f1ca <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1c2:	6812      	ldr	r2, [r2, #0]
 800f1c4:	f042 0203 	orr.w	r2, r2, #3
 800f1c8:	601a      	str	r2, [r3, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1d6:	6852      	ldr	r2, [r2, #4]
 800f1d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f1dc:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800f1de:	2300      	movs	r3, #0
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f20c:	6912      	ldr	r2, [r2, #16]
 800f20e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800f212:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f220:	6912      	ldr	r2, [r2, #16]
 800f222:	f042 0218 	orr.w	r2, r2, #24
 800f226:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f234:	6912      	ldr	r2, [r2, #16]
 800f236:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800f23a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 800f23c:	2300      	movs	r3, #0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop

0800f24c <USB_HostInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f24c:	b084      	sub	sp, #16
 800f24e:	b580      	push	{r7, lr}
 800f250:	b084      	sub	sp, #16
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	f107 001c 	add.w	r0, r7, #28
 800f25a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;
 800f25e:	2300      	movs	r3, #0
 800f260:	60fb      	str	r3, [r7, #12]
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f268:	2200      	movs	r2, #0
 800f26a:	601a      	str	r2, [r3, #0]
  
  /* no VBUS sensing*/
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f270:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f27c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	2b03      	cmp	r3, #3
 800f288:	d10e      	bne.n	800f2a8 <USB_HostInit+0x5c>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f290:	d00a      	beq.n	800f2a8 <USB_HostInit+0x5c>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f29e:	6812      	ldr	r2, [r2, #0]
 800f2a0:	f042 0204 	orr.w	r2, r2, #4
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	e009      	b.n	800f2bc <USB_HostInit+0x70>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f2b4:	6812      	ldr	r2, [r2, #0]
 800f2b6:	f022 0204 	bic.w	r2, r2, #4
 800f2ba:	601a      	str	r2, [r3, #0]
  }
  
  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10 ); /* all Tx FIFOs */
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	2110      	movs	r1, #16
 800f2c0:	f7ff f804 	bl	800e2cc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7ff f827 	bl	800e318 <USB_FlushRxFifo>
  
  /* Clear all pending HC Interrupts */
  for (index = 0; index < cfg.Host_channels; index++)
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	60fb      	str	r3, [r7, #12]
 800f2ce:	e013      	b.n	800f2f8 <USB_HostInit+0xac>
  {
    USBx_HC(index)->HCINT = 0xFFFFFFFF;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	015a      	lsls	r2, r3, #5
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2e0:	609a      	str	r2, [r3, #8]
    USBx_HC(index)->HCINTMSK = 0;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	015a      	lsls	r2, r3, #5
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	60da      	str	r2, [r3, #12]
  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10 ); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending HC Interrupts */
  for (index = 0; index < cfg.Host_channels; index++)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	60fb      	str	r3, [r7, #12]
 800f2f8:	6a3a      	ldr	r2, [r7, #32]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d8e7      	bhi.n	800f2d0 <USB_HostInit+0x84>
    USBx_HC(index)->HCINT = 0xFFFFFFFF;
    USBx_HC(index)->HCINTMSK = 0;
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	2101      	movs	r1, #1
 800f304:	f000 f88e 	bl	800f424 <USB_DriveVbus>
  
  HAL_Delay(200);
 800f308:	20c8      	movs	r0, #200	; 0xc8
 800f30a:	f7f0 fff9 	bl	8000300 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2200      	movs	r2, #0
 800f312:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFF;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f31a:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f322:	d10d      	bne.n	800f340 <USB_HostInit+0xf4>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x80; 
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2280      	movs	r2, #128	; 0x80
 800f328:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60 << 16)& USB_OTG_NPTXFD) | 0x80);
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	2380      	movs	r3, #128	; 0x80
 800f32e:	f2c0 0360 	movt	r3, #96	; 0x60
 800f332:	6293      	str	r3, [r2, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0);
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	23e0      	movs	r3, #224	; 0xe0
 800f338:	f2c0 0340 	movt	r3, #64	; 0x40
 800f33c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	699b      	ldr	r3, [r3, #24]
 800f344:	f043 0210 	orr.w	r2, r3, #16
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	619a      	str	r2, [r3, #24]
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	699a      	ldr	r2, [r3, #24]
 800f350:	2308      	movs	r3, #8
 800f352:	f2ca 3320 	movt	r3, #41760	; 0xa320
 800f356:	4313      	orrs	r3, r2
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);
  
  return HAL_OK;
 800f35c:	2300      	movs	r3, #0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3710      	adds	r7, #16
 800f362:	46bd      	mov	sp, r7
 800f364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f368:	b004      	add	sp, #16
 800f36a:	4770      	bx	lr

0800f36c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	460b      	mov	r3, r1
 800f376:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f384:	6812      	ldr	r2, [r2, #0]
 800f386:	f022 0203 	bic.w	r2, r2, #3
 800f38a:	601a      	str	r2, [r3, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f398:	6811      	ldr	r1, [r2, #0]
 800f39a:	78fa      	ldrb	r2, [r7, #3]
 800f39c:	f002 0203 	and.w	r2, r2, #3
 800f3a0:	430a      	orrs	r2, r1
 800f3a2:	601a      	str	r2, [r3, #0]
  
  if (freq ==  HCFG_48_MHZ)
 800f3a4:	78fb      	ldrb	r3, [r7, #3]
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d106      	bne.n	800f3b8 <USB_InitFSLSPClkSel+0x4c>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3b0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800f3b4:	605a      	str	r2, [r3, #4]
 800f3b6:	e008      	b.n	800f3ca <USB_InitFSLSPClkSel+0x5e>
  }
  else if (freq ==  HCFG_6_MHZ)
 800f3b8:	78fb      	ldrb	r3, [r7, #3]
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	d105      	bne.n	800f3ca <USB_InitFSLSPClkSel+0x5e>
  {
    USBx_HOST->HFIR = (uint32_t)6000;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f3c4:	f241 7270 	movw	r2, #6000	; 0x1770
 800f3c8:	605a      	str	r2, [r3, #4]
  }
  return HAL_OK;
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <USB_ResetPort>:
  * @retval HAL status
  * @note : (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0 = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	60fb      	str	r3, [r7, #12]
  
  hprt0 = USBx_HPRT0;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f3f4:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f402:	601a      	str	r2, [r3, #0]
  HAL_Delay (10);                                /* See Note #1 */
 800f404:	200a      	movs	r0, #10
 800f406:	f7f0 ff7b 	bl	8000300 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f416:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop

0800f424 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f424:	b480      	push	{r7}
 800f426:	b085      	sub	sp, #20
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	460b      	mov	r3, r1
 800f42e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0 = 0;
 800f430:	2300      	movs	r3, #0
 800f432:	60fb      	str	r3, [r7, #12]
  
  hprt0 = USBx_HPRT0;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f444:	60fb      	str	r3, [r7, #12]
          USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d109      	bne.n	800f464 <USB_DriveVbus+0x40>
 800f450:	78fb      	ldrb	r3, [r7, #3]
 800f452:	2b01      	cmp	r3, #1
 800f454:	d106      	bne.n	800f464 <USB_DriveVbus+0x40>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f462:	601a      	str	r2, [r3, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d009      	beq.n	800f482 <USB_DriveVbus+0x5e>
 800f46e:	78fb      	ldrb	r3, [r7, #3]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d106      	bne.n	800f482 <USB_DriveVbus+0x5e>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f480:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <USB_GetHostSpeed>:
  *          This parameter can be one of the these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0 = 0;
 800f498:	2300      	movs	r3, #0
 800f49a:	60fb      	str	r3, [r7, #12]
  
  hprt0 = USBx_HPRT0;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800f4ac:	0c5b      	lsrs	r3, r3, #17
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3714      	adds	r7, #20
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr
 800f4ba:	bf00      	nop

0800f4bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx : Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f4ca:	689b      	ldr	r3, [r3, #8]
 800f4cc:	b29b      	uxth	r3, r3
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	370c      	adds	r7, #12
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop

0800f4dc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	70f9      	strb	r1, [r7, #3]
 800f4e6:	70ba      	strb	r2, [r7, #2]
 800f4e8:	707b      	strb	r3, [r7, #1]
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
 800f4ea:	78fb      	ldrb	r3, [r7, #3]
 800f4ec:	015a      	lsls	r2, r3, #5
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4fa:	609a      	str	r2, [r3, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 800f4fc:	7d3b      	ldrb	r3, [r7, #20]
 800f4fe:	2b03      	cmp	r3, #3
 800f500:	d867      	bhi.n	800f5d2 <USB_HC_Init+0xf6>
 800f502:	a201      	add	r2, pc, #4	; (adr r2, 800f508 <USB_HC_Init+0x2c>)
 800f504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f508:	0800f519 	.word	0x0800f519
 800f50c:	0800f595 	.word	0x0800f595
 800f510:	0800f519 	.word	0x0800f519
 800f514:	0800f557 	.word	0x0800f557
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800f518:	78fb      	ldrb	r3, [r7, #3]
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4413      	add	r3, r2
 800f520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f524:	f240 429d 	movw	r2, #1181	; 0x49d
 800f528:	60da      	str	r2, [r3, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
  
    if (epnum & 0x80) 
 800f52a:	78bb      	ldrb	r3, [r7, #2]
 800f52c:	b25b      	sxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	da10      	bge.n	800f554 <USB_HC_Init+0x78>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f532:	78fb      	ldrb	r3, [r7, #3]
 800f534:	015a      	lsls	r2, r3, #5
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4413      	add	r3, r2
 800f53a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f53e:	78fa      	ldrb	r2, [r7, #3]
 800f540:	0151      	lsls	r1, r2, #5
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	440a      	add	r2, r1
 800f546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f54a:	68d2      	ldr	r2, [r2, #12]
 800f54c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f550:	60da      	str	r2, [r3, #12]
    }
    break;
 800f552:	e03e      	b.n	800f5d2 <USB_HC_Init+0xf6>
 800f554:	e03d      	b.n	800f5d2 <USB_HC_Init+0xf6>
  
  case EP_TYPE_INTR:
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800f556:	78fb      	ldrb	r3, [r7, #3]
 800f558:	015a      	lsls	r2, r3, #5
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4413      	add	r3, r2
 800f55e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f562:	f240 629d 	movw	r2, #1693	; 0x69d
 800f566:	60da      	str	r2, [r3, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;
    
    if (epnum & 0x80) 
 800f568:	78bb      	ldrb	r3, [r7, #2]
 800f56a:	b25b      	sxtb	r3, r3
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	da10      	bge.n	800f592 <USB_HC_Init+0xb6>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f570:	78fb      	ldrb	r3, [r7, #3]
 800f572:	015a      	lsls	r2, r3, #5
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4413      	add	r3, r2
 800f578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f57c:	78fa      	ldrb	r2, [r7, #3]
 800f57e:	0151      	lsls	r1, r2, #5
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	440a      	add	r2, r1
 800f584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f588:	68d2      	ldr	r2, [r2, #12]
 800f58a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f58e:	60da      	str	r2, [r3, #12]
    }
    
    break;
 800f590:	e01f      	b.n	800f5d2 <USB_HC_Init+0xf6>
 800f592:	e01e      	b.n	800f5d2 <USB_HC_Init+0xf6>
  
  case EP_TYPE_ISOC:
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800f594:	78fb      	ldrb	r3, [r7, #3]
 800f596:	015a      	lsls	r2, r3, #5
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4413      	add	r3, r2
 800f59c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5a0:	f240 2225 	movw	r2, #549	; 0x225
 800f5a4:	60da      	str	r2, [r3, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;
    
    if (epnum & 0x80) 
 800f5a6:	78bb      	ldrb	r3, [r7, #2]
 800f5a8:	b25b      	sxtb	r3, r3
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	da10      	bge.n	800f5d0 <USB_HC_Init+0xf4>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800f5ae:	78fb      	ldrb	r3, [r7, #3]
 800f5b0:	015a      	lsls	r2, r3, #5
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5ba:	78fa      	ldrb	r2, [r7, #3]
 800f5bc:	0151      	lsls	r1, r2, #5
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	440a      	add	r2, r1
 800f5c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f5c6:	68d2      	ldr	r2, [r2, #12]
 800f5c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f5cc:	60da      	str	r2, [r3, #12]
    }
    break;
 800f5ce:	e7ff      	b.n	800f5d0 <USB_HC_Init+0xf4>
 800f5d0:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f5de:	6991      	ldr	r1, [r2, #24]
 800f5e0:	78fa      	ldrb	r2, [r7, #3]
 800f5e2:	2001      	movs	r0, #1
 800f5e4:	fa00 f202 	lsl.w	r2, r0, r2
 800f5e8:	430a      	orrs	r2, r1
 800f5ea:	619a      	str	r2, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	699b      	ldr	r3, [r3, #24]
 800f5f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 800f5f8:	78fb      	ldrb	r3, [r7, #3]
 800f5fa:	015a      	lsls	r2, r3, #5
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4413      	add	r3, r2
 800f600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f604:	461a      	mov	r2, r3
 800f606:	787b      	ldrb	r3, [r7, #1]
 800f608:	059b      	lsls	r3, r3, #22
 800f60a:	f003 51fe 	and.w	r1, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 800f60e:	78bb      	ldrb	r3, [r7, #2]
 800f610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f614:	02db      	lsls	r3, r3, #11
 800f616:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 800f61a:	4319      	orrs	r1, r3
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 800f61c:	78bb      	ldrb	r3, [r7, #2]
 800f61e:	b25b      	sxtb	r3, r3
 800f620:	2b00      	cmp	r3, #0
 800f622:	da02      	bge.n	800f62a <USB_HC_Init+0x14e>
 800f624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f628:	e000      	b.n	800f62c <USB_HC_Init+0x150>
 800f62a:	2300      	movs	r3, #0
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 800f62c:	4319      	orrs	r1, r3
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 800f62e:	7c3b      	ldrb	r3, [r7, #16]
 800f630:	2b02      	cmp	r3, #2
 800f632:	d102      	bne.n	800f63a <USB_HC_Init+0x15e>
 800f634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f638:	e000      	b.n	800f63c <USB_HC_Init+0x160>
 800f63a:	2300      	movs	r3, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 800f63c:	4319      	orrs	r1, r3
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 800f63e:	7d3b      	ldrb	r3, [r7, #20]
 800f640:	049b      	lsls	r3, r3, #18
 800f642:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 800f646:	4319      	orrs	r1, r3
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 800f648:	8b3b      	ldrh	r3, [r7, #24]
 800f64a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 800f64e:	430b      	orrs	r3, r1
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 800f650:	6013      	str	r3, [r2, #0]
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
  
  if (ep_type == EP_TYPE_INTR)
 800f652:	7d3b      	ldrb	r3, [r7, #20]
 800f654:	2b03      	cmp	r3, #3
 800f656:	d10f      	bne.n	800f678 <USB_HC_Init+0x19c>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800f658:	78fb      	ldrb	r3, [r7, #3]
 800f65a:	015a      	lsls	r2, r3, #5
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4413      	add	r3, r2
 800f660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f664:	78fa      	ldrb	r2, [r7, #3]
 800f666:	0151      	lsls	r1, r2, #5
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	440a      	add	r2, r1
 800f66c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f670:	6812      	ldr	r2, [r2, #0]
 800f672:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800f676:	601a      	str	r2, [r3, #0]
  }
  
  return HAL_OK;
 800f678:	2300      	movs	r3, #0
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	370c      	adds	r7, #12
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop

0800f688 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  uint8_t  is_oddframe = 0;
 800f692:	2300      	movs	r3, #0
 800f694:	757b      	strb	r3, [r7, #21]
  uint16_t len_words = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	827b      	strh	r3, [r7, #18]
  uint16_t num_packets = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	82fb      	strh	r3, [r7, #22]
  uint16_t max_hc_pkt_count = 256;
 800f69e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6a2:	823b      	strh	r3, [r7, #16]
  uint32_t tmpreg = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	60fb      	str	r3, [r7, #12]
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0)
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d019      	beq.n	800f6e4 <USB_HC_StartXfer+0x5c>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1) / hc->max_packet;
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	691a      	ldr	r2, [r3, #16]
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	891b      	ldrh	r3, [r3, #8]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	1e5a      	subs	r2, r3, #1
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	891b      	ldrh	r3, [r3, #8]
 800f6c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6c4:	82fb      	strh	r3, [r7, #22]
    
    if (num_packets > max_hc_pkt_count)
 800f6c6:	8afa      	ldrh	r2, [r7, #22]
 800f6c8:	8a3b      	ldrh	r3, [r7, #16]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d90c      	bls.n	800f6e8 <USB_HC_StartXfer+0x60>
    {
      num_packets = max_hc_pkt_count;
 800f6ce:	8a3b      	ldrh	r3, [r7, #16]
 800f6d0:	82fb      	strh	r3, [r7, #22]
      hc->xfer_len = num_packets * hc->max_packet;
 800f6d2:	8afb      	ldrh	r3, [r7, #22]
 800f6d4:	683a      	ldr	r2, [r7, #0]
 800f6d6:	8912      	ldrh	r2, [r2, #8]
 800f6d8:	fb02 f303 	mul.w	r3, r2, r3
 800f6dc:	461a      	mov	r2, r3
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	611a      	str	r2, [r3, #16]
 800f6e2:	e001      	b.n	800f6e8 <USB_HC_StartXfer+0x60>
    }
  }
  else
  {
    num_packets = 1;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	82fb      	strh	r3, [r7, #22]
  }
  if (hc->ep_is_in)
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	78db      	ldrb	r3, [r3, #3]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d007      	beq.n	800f700 <USB_HC_StartXfer+0x78>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 800f6f0:	8afb      	ldrh	r3, [r7, #22]
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	8912      	ldrh	r2, [r2, #8]
 800f6f6:	fb02 f303 	mul.w	r3, r2, r3
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	785b      	ldrb	r3, [r3, #1]
 800f704:	015a      	lsls	r2, r3, #5
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4413      	add	r3, r2
 800f70a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f70e:	461a      	mov	r2, r3
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	f3c3 0112 	ubfx	r1, r3, #0, #19
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 800f718:	8afb      	ldrh	r3, [r7, #22]
 800f71a:	04db      	lsls	r3, r3, #19
 800f71c:	4618      	mov	r0, r3
 800f71e:	2300      	movs	r3, #0
 800f720:	f6c1 73f8 	movt	r3, #8184	; 0x1ff8
 800f724:	4003      	ands	r3, r0
  {
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800f726:	4319      	orrs	r1, r3
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	7a9b      	ldrb	r3, [r3, #10]
 800f72c:	075b      	lsls	r3, r3, #29
 800f72e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 800f732:	430b      	orrs	r3, r1
  {
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800f734:	6113      	str	r3, [r2, #16]
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	f003 0301 	and.w	r3, r3, #1
 800f742:	2b00      	cmp	r3, #0
 800f744:	bf14      	ite	ne
 800f746:	2300      	movne	r3, #0
 800f748:	2301      	moveq	r3, #1
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	757b      	strb	r3, [r7, #21]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	785b      	ldrb	r3, [r3, #1]
 800f752:	015a      	lsls	r2, r3, #5
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4413      	add	r3, r2
 800f758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f75c:	683a      	ldr	r2, [r7, #0]
 800f75e:	7852      	ldrb	r2, [r2, #1]
 800f760:	0151      	lsls	r1, r2, #5
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	440a      	add	r2, r1
 800f766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f76a:	6812      	ldr	r2, [r2, #0]
 800f76c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800f770:	601a      	str	r2, [r3, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	785b      	ldrb	r3, [r3, #1]
 800f776:	015a      	lsls	r2, r3, #5
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4413      	add	r3, r2
 800f77c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	7852      	ldrb	r2, [r2, #1]
 800f784:	0151      	lsls	r1, r2, #5
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	440a      	add	r2, r1
 800f78a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f78e:	6811      	ldr	r1, [r2, #0]
 800f790:	7d7a      	ldrb	r2, [r7, #21]
 800f792:	0752      	lsls	r2, r2, #29
 800f794:	430a      	orrs	r2, r1
 800f796:	601a      	str	r2, [r3, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	785b      	ldrb	r3, [r3, #1]
 800f79c:	015a      	lsls	r2, r3, #5
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f7b0:	60fb      	str	r3, [r7, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f7b8:	60fb      	str	r3, [r7, #12]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	785b      	ldrb	r3, [r3, #1]
 800f7be:	015a      	lsls	r2, r3, #5
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	601a      	str	r2, [r3, #0]
  
  if((hc->ep_is_in == 0) && (hc->xfer_len > 0))
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	78db      	ldrb	r3, [r3, #3]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d146      	bne.n	800f862 <USB_HC_StartXfer+0x1da>
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d042      	beq.n	800f862 <USB_HC_StartXfer+0x1da>
  {
    switch(hc->ep_type) 
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	79db      	ldrb	r3, [r3, #7]
 800f7e0:	2b03      	cmp	r3, #3
 800f7e2:	d833      	bhi.n	800f84c <USB_HC_StartXfer+0x1c4>
 800f7e4:	a201      	add	r2, pc, #4	; (adr r2, 800f7ec <USB_HC_StartXfer+0x164>)
 800f7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ea:	bf00      	nop
 800f7ec:	0800f7fd 	.word	0x0800f7fd
 800f7f0:	0800f823 	.word	0x0800f823
 800f7f4:	0800f7fd 	.word	0x0800f7fd
 800f7f8:	0800f823 	.word	0x0800f823
    {
      /* Non periodic transfer */
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      len_words = (hc->xfer_len + 3) / 4;
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	691b      	ldr	r3, [r3, #16]
 800f800:	3303      	adds	r3, #3
 800f802:	089b      	lsrs	r3, r3, #2
 800f804:	827b      	strh	r3, [r7, #18]
      
      /* check if there is enough space in FIFO space */
      if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 800f806:	8a7a      	ldrh	r2, [r7, #18]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f80c:	b29b      	uxth	r3, r3
 800f80e:	429a      	cmp	r2, r3
 800f810:	d906      	bls.n	800f820 <USB_HC_StartXfer+0x198>
      {
        /* need to process data in nptxfempty interrupt */
        USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	699b      	ldr	r3, [r3, #24]
 800f816:	f043 0220 	orr.w	r2, r3, #32
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	619a      	str	r2, [r3, #24]
      }
      break;
 800f81e:	e016      	b.n	800f84e <USB_HC_StartXfer+0x1c6>
 800f820:	e015      	b.n	800f84e <USB_HC_StartXfer+0x1c6>
      
      /* Periodic transfer */
    case EP_TYPE_INTR:
    case EP_TYPE_ISOC:
      len_words = (hc->xfer_len + 3) / 4;
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	691b      	ldr	r3, [r3, #16]
 800f826:	3303      	adds	r3, #3
 800f828:	089b      	lsrs	r3, r3, #2
 800f82a:	827b      	strh	r3, [r7, #18]
      /* check if there is enough space in FIFO space */
      if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 800f82c:	8a7a      	ldrh	r2, [r7, #18]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f834:	691b      	ldr	r3, [r3, #16]
 800f836:	b29b      	uxth	r3, r3
 800f838:	429a      	cmp	r2, r3
 800f83a:	d906      	bls.n	800f84a <USB_HC_StartXfer+0x1c2>
      {
        /* need to process data in ptxfempty interrupt */
        USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	699b      	ldr	r3, [r3, #24]
 800f840:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	619a      	str	r2, [r3, #24]
      }
      break;
 800f848:	e001      	b.n	800f84e <USB_HC_StartXfer+0x1c6>
 800f84a:	e000      	b.n	800f84e <USB_HC_StartXfer+0x1c6>
      
    default:
      break;
 800f84c:	bf00      	nop
    }
    
    /* Write packet into the Tx FIFO. */
    USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len);
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	68d9      	ldr	r1, [r3, #12]
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	785a      	ldrb	r2, [r3, #1]
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7ff fa17 	bl	800ec90 <USB_WritePacket>
  }
  
  return HAL_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3718      	adds	r7, #24
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFF);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f87a:	695b      	ldr	r3, [r3, #20]
 800f87c:	b29b      	uxth	r3, r3
}
 800f87e:	4618      	mov	r0, r3
 800f880:	370c      	adds	r7, #12
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop

0800f88c <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	460b      	mov	r3, r1
 800f896:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0;
 800f898:	2300      	movs	r3, #0
 800f89a:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((USBx_HC(hc_num)->HCCHAR) & (HCCHAR_CTRL << 18)) || ((USBx_HC(hc_num)->HCCHAR) & (HCCHAR_BULK << 18)))
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	015a      	lsls	r2, r3, #5
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	78fb      	ldrb	r3, [r7, #3]
 800f8ac:	015a      	lsls	r2, r3, #5
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d069      	beq.n	800f994 <USB_HC_Halt+0x108>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f8c0:	78fb      	ldrb	r3, [r7, #3]
 800f8c2:	015a      	lsls	r2, r3, #5
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8cc:	78fa      	ldrb	r2, [r7, #3]
 800f8ce:	0151      	lsls	r1, r2, #5
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	440a      	add	r2, r1
 800f8d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f8d8:	6812      	ldr	r2, [r2, #0]
 800f8da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f8de:	601a      	str	r2, [r3, #0]
    
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d142      	bne.n	800f970 <USB_HC_Halt+0xe4>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f8ea:	78fb      	ldrb	r3, [r7, #3]
 800f8ec:	015a      	lsls	r2, r3, #5
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8f6:	78fa      	ldrb	r2, [r7, #3]
 800f8f8:	0151      	lsls	r1, r2, #5
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	440a      	add	r2, r1
 800f8fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f902:	6812      	ldr	r2, [r2, #0]
 800f904:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800f908:	601a      	str	r2, [r3, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f90a:	78fb      	ldrb	r3, [r7, #3]
 800f90c:	015a      	lsls	r2, r3, #5
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4413      	add	r3, r2
 800f912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f916:	78fa      	ldrb	r2, [r7, #3]
 800f918:	0151      	lsls	r1, r2, #5
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	440a      	add	r2, r1
 800f91e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f922:	6812      	ldr	r2, [r2, #0]
 800f924:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f928:	601a      	str	r2, [r3, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f92a:	78fb      	ldrb	r3, [r7, #3]
 800f92c:	015a      	lsls	r2, r3, #5
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4413      	add	r3, r2
 800f932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f936:	78fa      	ldrb	r2, [r7, #3]
 800f938:	0151      	lsls	r1, r2, #5
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	440a      	add	r2, r1
 800f93e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f942:	6812      	ldr	r2, [r2, #0]
 800f944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f948:	601a      	str	r2, [r3, #0]
      do
      {
        if (++count > 1000)
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	3301      	adds	r3, #1
 800f94e:	60fb      	str	r3, [r7, #12]
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f956:	d901      	bls.n	800f95c <USB_HC_Halt+0xd0>
        {
          break;
 800f958:	bf00      	nop
 800f95a:	e01a      	b.n	800f992 <USB_HC_Halt+0x106>
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f95c:	78fb      	ldrb	r3, [r7, #3]
 800f95e:	015a      	lsls	r2, r3, #5
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4413      	add	r3, r2
 800f964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	dbed      	blt.n	800f94a <USB_HC_Halt+0xbe>
 800f96e:	e010      	b.n	800f992 <USB_HC_Halt+0x106>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f970:	78fb      	ldrb	r3, [r7, #3]
 800f972:	015a      	lsls	r2, r3, #5
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4413      	add	r3, r2
 800f978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f97c:	78fa      	ldrb	r2, [r7, #3]
 800f97e:	0151      	lsls	r1, r2, #5
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	440a      	add	r2, r1
 800f984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f988:	6812      	ldr	r2, [r2, #0]
 800f98a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f98e:	601a      	str	r2, [r3, #0]
  /* Check for space in the request queue to issue the halt. */
  if (((USBx_HC(hc_num)->HCCHAR) & (HCCHAR_CTRL << 18)) || ((USBx_HC(hc_num)->HCCHAR) & (HCCHAR_BULK << 18)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
    
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800f990:	e06a      	b.n	800fa68 <USB_HC_Halt+0x1dc>
 800f992:	e069      	b.n	800fa68 <USB_HC_Halt+0x1dc>
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f994:	78fb      	ldrb	r3, [r7, #3]
 800f996:	015a      	lsls	r2, r3, #5
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4413      	add	r3, r2
 800f99c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f9a0:	78fa      	ldrb	r2, [r7, #3]
 800f9a2:	0151      	lsls	r1, r2, #5
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	440a      	add	r2, r1
 800f9a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f9ac:	6812      	ldr	r2, [r2, #0]
 800f9ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f9b2:	601a      	str	r2, [r3, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d142      	bne.n	800fa48 <USB_HC_Halt+0x1bc>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f9c2:	78fb      	ldrb	r3, [r7, #3]
 800f9c4:	015a      	lsls	r2, r3, #5
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f9ce:	78fa      	ldrb	r2, [r7, #3]
 800f9d0:	0151      	lsls	r1, r2, #5
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	440a      	add	r2, r1
 800f9d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f9da:	6812      	ldr	r2, [r2, #0]
 800f9dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800f9e0:	601a      	str	r2, [r3, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f9e2:	78fb      	ldrb	r3, [r7, #3]
 800f9e4:	015a      	lsls	r2, r3, #5
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f9ee:	78fa      	ldrb	r2, [r7, #3]
 800f9f0:	0151      	lsls	r1, r2, #5
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	440a      	add	r2, r1
 800f9f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f9fa:	6812      	ldr	r2, [r2, #0]
 800f9fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800fa00:	601a      	str	r2, [r3, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800fa02:	78fb      	ldrb	r3, [r7, #3]
 800fa04:	015a      	lsls	r2, r3, #5
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4413      	add	r3, r2
 800fa0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa0e:	78fa      	ldrb	r2, [r7, #3]
 800fa10:	0151      	lsls	r1, r2, #5
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	440a      	add	r2, r1
 800fa16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fa1a:	6812      	ldr	r2, [r2, #0]
 800fa1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fa20:	601a      	str	r2, [r3, #0]
      do
      {
        if (++count > 1000)
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	3301      	adds	r3, #1
 800fa26:	60fb      	str	r3, [r7, #12]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fa2e:	d901      	bls.n	800fa34 <USB_HC_Halt+0x1a8>
        {
          break;
 800fa30:	bf00      	nop
 800fa32:	e019      	b.n	800fa68 <USB_HC_Halt+0x1dc>
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fa34:	78fb      	ldrb	r3, [r7, #3]
 800fa36:	015a      	lsls	r2, r3, #5
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	dbed      	blt.n	800fa22 <USB_HC_Halt+0x196>
 800fa46:	e00f      	b.n	800fa68 <USB_HC_Halt+0x1dc>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800fa48:	78fb      	ldrb	r3, [r7, #3]
 800fa4a:	015a      	lsls	r2, r3, #5
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4413      	add	r3, r2
 800fa50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa54:	78fa      	ldrb	r2, [r7, #3]
 800fa56:	0151      	lsls	r1, r2, #5
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	440a      	add	r2, r1
 800fa5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fa60:	6812      	ldr	r2, [r2, #0]
 800fa62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800fa66:	601a      	str	r2, [r3, #0]
    }
  }
  
  return HAL_OK;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3714      	adds	r7, #20
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop

0800fa78 <USB_DoPing>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	460b      	mov	r3, r1
 800fa82:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1;
 800fa84:	2301      	movs	r3, #1
 800fa86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	60bb      	str	r3, [r7, #8]
  
  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 800fa8c:	78fb      	ldrb	r3, [r7, #3]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa98:	461a      	mov	r2, r3
 800fa9a:	7bfb      	ldrb	r3, [r7, #15]
 800fa9c:	04db      	lsls	r3, r3, #19
 800fa9e:	4619      	mov	r1, r3
 800faa0:	2300      	movs	r3, #0
 800faa2:	f6c1 73f8 	movt	r3, #8184	; 0x1ff8
 800faa6:	400b      	ands	r3, r1
 800faa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800faac:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800faae:	78fb      	ldrb	r3, [r7, #3]
 800fab0:	015a      	lsls	r2, r3, #5
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4413      	add	r3, r2
 800fab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fac4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800facc:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800face:	78fb      	ldrb	r3, [r7, #3]
 800fad0:	015a      	lsls	r2, r3, #5
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4413      	add	r3, r2
 800fad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;  
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  uint8_t index;
  uint32_t count = 0;
 800faf4:	2300      	movs	r3, #0
 800faf6:	613b      	str	r3, [r7, #16]
  uint32_t value = 0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	60fb      	str	r3, [r7, #12]
  
  USB_DisableGlobalInt(USBx);
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7fe fab7 	bl	800e070 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	2110      	movs	r1, #16
 800fb06:	f7fe fbe1 	bl	800e2cc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7fe fc04 	bl	800e318 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (index = 0; index <= 15; index++)
 800fb10:	2300      	movs	r3, #0
 800fb12:	75fb      	strb	r3, [r7, #23]
 800fb14:	e01e      	b.n	800fb54 <USB_StopHost+0x68>
  {
    value = USBx_HC(index)->HCCHAR;
 800fb16:	7dfb      	ldrb	r3, [r7, #23]
 800fb18:	015a      	lsls	r2, r3, #5
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb2c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb34:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb3c:	60fb      	str	r3, [r7, #12]
    USBx_HC(index)->HCCHAR = value;
 800fb3e:	7dfb      	ldrb	r3, [r7, #23]
 800fb40:	015a      	lsls	r2, r3, #5
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4413      	add	r3, r2
 800fb46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb4a:	68fa      	ldr	r2, [r7, #12]
 800fb4c:	601a      	str	r2, [r3, #0]
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
  USB_FlushRxFifo(USBx);
  
  /* Flush out any leftover queued requests. */
  for (index = 0; index <= 15; index++)
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	3301      	adds	r3, #1
 800fb52:	75fb      	strb	r3, [r7, #23]
 800fb54:	7dfb      	ldrb	r3, [r7, #23]
 800fb56:	2b0f      	cmp	r3, #15
 800fb58:	d9dd      	bls.n	800fb16 <USB_StopHost+0x2a>
    value &= ~USB_OTG_HCCHAR_EPDIR;
    USBx_HC(index)->HCCHAR = value;
  }
  
  /* Halt all channels to put them into a known state. */
  for (index = 0; index <= 15; index++)
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	75fb      	strb	r3, [r7, #23]
 800fb5e:	e02f      	b.n	800fbc0 <USB_StopHost+0xd4>
  {
    value = USBx_HC(index)->HCCHAR ;
 800fb60:	7dfb      	ldrb	r3, [r7, #23]
 800fb62:	015a      	lsls	r2, r3, #5
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4413      	add	r3, r2
 800fb68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHDIS;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb76:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb7e:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb86:	60fb      	str	r3, [r7, #12]
    USBx_HC(index)->HCCHAR = value;
 800fb88:	7dfb      	ldrb	r3, [r7, #23]
 800fb8a:	015a      	lsls	r2, r3, #5
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	4413      	add	r3, r2
 800fb90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	601a      	str	r2, [r3, #0]
    
    do
    {
      if (++count > 1000)
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	613b      	str	r3, [r7, #16]
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fba4:	d900      	bls.n	800fba8 <USB_StopHost+0xbc>
      {
        break;
 800fba6:	e008      	b.n	800fbba <USB_StopHost+0xce>
      }
    }
    while ((USBx_HC(index)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fba8:	7dfb      	ldrb	r3, [r7, #23]
 800fbaa:	015a      	lsls	r2, r3, #5
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4413      	add	r3, r2
 800fbb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	dbee      	blt.n	800fb98 <USB_StopHost+0xac>
    value &= ~USB_OTG_HCCHAR_EPDIR;
    USBx_HC(index)->HCCHAR = value;
  }
  
  /* Halt all channels to put them into a known state. */
  for (index = 0; index <= 15; index++)
 800fbba:	7dfb      	ldrb	r3, [r7, #23]
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	75fb      	strb	r3, [r7, #23]
 800fbc0:	7dfb      	ldrb	r3, [r7, #23]
 800fbc2:	2b0f      	cmp	r3, #15
 800fbc4:	d9cc      	bls.n	800fb60 <USB_StopHost+0x74>
    }
    while ((USBx_HC(index)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
  }
  
  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbd0:	615a      	str	r2, [r3, #20]
  USBx->GINTSTS = 0xFFFFFFFF;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbd8:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7fe fa36 	bl	800e04c <USB_EnableGlobalInt>
  
  return HAL_OK;
 800fbe0:	2300      	movs	r3, #0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop

0800fbec <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	f003 0301 	and.w	r3, r3, #1
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d009      	beq.n	800fc18 <USB_ActivateRemoteWakeup+0x2c>
  {
    /* active Remote wakeup signalling */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc10:	6852      	ldr	r2, [r2, #4]
 800fc12:	f042 0201 	orr.w	r2, r2, #1
 800fc16:	605a      	str	r2, [r3, #4]
  }
  return HAL_OK;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	370c      	adds	r7, #12
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop

0800fc28 <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup : de-active remote wakeup signalling
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  /* active Remote wakeup signalling */
   USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc3c:	6852      	ldr	r2, [r2, #4]
 800fc3e:	f022 0201 	bic.w	r2, r2, #1
 800fc42:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 800fc44:	2300      	movs	r3, #0
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	370c      	adds	r7, #12
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop

0800fc54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	3301      	adds	r3, #1
 800fc64:	60fb      	str	r3, [r7, #12]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800fc6c:	f2c0 0303 	movt	r3, #3
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d901      	bls.n	800fc78 <USB_CoreReset+0x24>
    {
      return HAL_TIMEOUT;
 800fc74:	2303      	movs	r3, #3
 800fc76:	e01e      	b.n	800fcb6 <USB_CoreReset+0x62>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	691b      	ldr	r3, [r3, #16]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	daef      	bge.n	800fc60 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 800fc80:	2300      	movs	r3, #0
 800fc82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	f043 0201 	orr.w	r2, r3, #1
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	3301      	adds	r3, #1
 800fc94:	60fb      	str	r3, [r7, #12]
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800fc9c:	f2c0 0303 	movt	r3, #3
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d901      	bls.n	800fca8 <USB_CoreReset+0x54>
    {
      return HAL_TIMEOUT;
 800fca4:	2303      	movs	r3, #3
 800fca6:	e006      	b.n	800fcb6 <USB_CoreReset+0x62>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	f003 0301 	and.w	r3, r3, #1
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d1ed      	bne.n	800fc90 <USB_CoreReset+0x3c>
  
  return HAL_OK;
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop

0800fcc4 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fcc8:	f7f0 fa8c 	bl	80001e4 <HAL_Init>
  
  /* Configure the system clock to 72 Mhz */
  SystemClock_Config();
 800fccc:	f000 f826 	bl	800fd1c <SystemClock_Config>
  
  /* Init Device Library */
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 800fcd0:	f640 2028 	movw	r0, #2600	; 0xa28
 800fcd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800fcd8:	f240 112c 	movw	r1, #300	; 0x12c
 800fcdc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800fce0:	2200      	movs	r2, #0
 800fce2:	f001 fa99 	bl	8011218 <USBD_Init>
  
  /* Add Supported Class */
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 800fce6:	f640 2028 	movw	r0, #2600	; 0xa28
 800fcea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800fcee:	f240 0110 	movw	r1, #16
 800fcf2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800fcf6:	f001 fabb 	bl	8011270 <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 800fcfa:	f640 2028 	movw	r0, #2600	; 0xa28
 800fcfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800fd02:	f240 111c 	movw	r1, #284	; 0x11c
 800fd06:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800fd0a:	f000 fc41 	bl	8010590 <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&USBD_Device);
 800fd0e:	f640 2028 	movw	r0, #2600	; 0xa28
 800fd12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800fd16:	f001 fac5 	bl	80112a4 <USBD_Start>
  
  /* Infinite loop */
  while (1)
  {
  }
 800fd1a:	e7fe      	b.n	800fd1a <main+0x56>

0800fd1c <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b09c      	sub	sp, #112	; 0x70
 800fd20:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800fd22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fd26:	2200      	movs	r2, #0
 800fd28:	601a      	str	r2, [r3, #0]
 800fd2a:	3304      	adds	r3, #4
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	601a      	str	r2, [r3, #0]
 800fd30:	3304      	adds	r3, #4
 800fd32:	2200      	movs	r2, #0
 800fd34:	601a      	str	r2, [r3, #0]
 800fd36:	3304      	adds	r3, #4
 800fd38:	2200      	movs	r2, #0
 800fd3a:	601a      	str	r2, [r3, #0]
 800fd3c:	3304      	adds	r3, #4
 800fd3e:	2200      	movs	r2, #0
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	3304      	adds	r3, #4
  RCC_OscInitTypeDef oscinitstruct = {0};
 800fd44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd48:	2200      	movs	r2, #0
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	3304      	adds	r3, #4
 800fd4e:	2200      	movs	r2, #0
 800fd50:	601a      	str	r2, [r3, #0]
 800fd52:	3304      	adds	r3, #4
 800fd54:	2200      	movs	r2, #0
 800fd56:	601a      	str	r2, [r3, #0]
 800fd58:	3304      	adds	r3, #4
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	3304      	adds	r3, #4
 800fd60:	2200      	movs	r2, #0
 800fd62:	601a      	str	r2, [r3, #0]
 800fd64:	3304      	adds	r3, #4
 800fd66:	2200      	movs	r2, #0
 800fd68:	601a      	str	r2, [r3, #0]
 800fd6a:	3304      	adds	r3, #4
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	3304      	adds	r3, #4
 800fd72:	2200      	movs	r2, #0
 800fd74:	601a      	str	r2, [r3, #0]
 800fd76:	3304      	adds	r3, #4
 800fd78:	2200      	movs	r2, #0
 800fd7a:	601a      	str	r2, [r3, #0]
 800fd7c:	3304      	adds	r3, #4
 800fd7e:	2200      	movs	r2, #0
 800fd80:	601a      	str	r2, [r3, #0]
 800fd82:	3304      	adds	r3, #4
 800fd84:	2200      	movs	r2, #0
 800fd86:	601a      	str	r2, [r3, #0]
 800fd88:	3304      	adds	r3, #4
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	601a      	str	r2, [r3, #0]
 800fd8e:	3304      	adds	r3, #4
 800fd90:	2200      	movs	r2, #0
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	3304      	adds	r3, #4
 800fd96:	2200      	movs	r2, #0
 800fd98:	601a      	str	r2, [r3, #0]
 800fd9a:	3304      	adds	r3, #4
  RCC_PeriphCLKInitTypeDef rccperiphclkinit = {0};
 800fd9c:	1d3b      	adds	r3, r7, #4
 800fd9e:	2200      	movs	r2, #0
 800fda0:	601a      	str	r2, [r3, #0]
 800fda2:	3304      	adds	r3, #4
 800fda4:	2200      	movs	r2, #0
 800fda6:	601a      	str	r2, [r3, #0]
 800fda8:	3304      	adds	r3, #4
 800fdaa:	2200      	movs	r2, #0
 800fdac:	601a      	str	r2, [r3, #0]
 800fdae:	3304      	adds	r3, #4
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	601a      	str	r2, [r3, #0]
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	601a      	str	r2, [r3, #0]
 800fdba:	3304      	adds	r3, #4
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	601a      	str	r2, [r3, #0]
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	601a      	str	r2, [r3, #0]
 800fdc6:	3304      	adds	r3, #4
 800fdc8:	2200      	movs	r2, #0
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	3304      	adds	r3, #4
  /* Configure PLLs ------------------------------------------------------*/
  /* PLL2 configuration: PLL2CLK = (HSE / HSEPrediv2Value) * PLL2MUL = (25 / 5) * 8 = 40 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLL2CLK / HSEPredivValue = 40 / 5 = 8 MHz */
  /* PLL configuration: PLLCLK = PREDIV1CLK * PLLMUL = 8 * 9 = 72 MHz */
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	627b      	str	r3, [r7, #36]	; 0x24
  oscinitstruct.HSEState        = RCC_HSE_ON;
 800fdd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  oscinitstruct.HSEPredivValue  = RCC_HSE_PREDIV_DIV5;
 800fdd8:	2304      	movs	r3, #4
 800fdda:	633b      	str	r3, [r7, #48]	; 0x30
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL9;
 800fddc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800fde0:	64fb      	str	r3, [r7, #76]	; 0x4c
  oscinitstruct.Prediv1Source   = RCC_PREDIV1_SOURCE_PLL2;
 800fde2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fde6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 800fde8:	2302      	movs	r3, #2
 800fdea:	647b      	str	r3, [r7, #68]	; 0x44
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSE;
 800fdec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fdf0:	64bb      	str	r3, [r7, #72]	; 0x48
  oscinitstruct.PLL2.PLL2State  = RCC_PLL2_ON;
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	653b      	str	r3, [r7, #80]	; 0x50
  oscinitstruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800fdf6:	2340      	movs	r3, #64	; 0x40
 800fdf8:	65bb      	str	r3, [r7, #88]	; 0x58
  oscinitstruct.PLL2.PLL2MUL    = RCC_PLL2_MUL8;
 800fdfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800fdfe:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_RCC_OscConfig(&oscinitstruct);
 800fe00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7f4 fb09 	bl	800441c <HAL_RCC_OscConfig>
  
  /* USB clock selection */
  rccperiphclkinit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fe0a:	2310      	movs	r3, #16
 800fe0c:	607b      	str	r3, [r7, #4]
  rccperiphclkinit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	623b      	str	r3, [r7, #32]
  HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 800fe12:	1d3b      	adds	r3, r7, #4
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7f6 fcc7 	bl	80067a8 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800fe1a:	230f      	movs	r3, #15
 800fe1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fe1e:	2302      	movs	r3, #2
 800fe20:	663b      	str	r3, [r7, #96]	; 0x60
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fe22:	2300      	movs	r3, #0
 800fe24:	667b      	str	r3, [r7, #100]	; 0x64
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 800fe26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe2a:	66bb      	str	r3, [r7, #104]	; 0x68
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2);
 800fe30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fe34:	4618      	mov	r0, r3
 800fe36:	2102      	movs	r1, #2
 800fe38:	f7f5 fe46 	bl	8005ac8 <HAL_RCC_ClockConfig>
}
 800fe3c:	3770      	adds	r7, #112	; 0x70
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop

0800fe44 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b08c      	sub	sp, #48	; 0x30
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_tx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800fe4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fe54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800fe5c:	6992      	ldr	r2, [r2, #24]
 800fe5e:	f042 0220 	orr.w	r2, r2, #32
 800fe62:	619a      	str	r2, [r3, #24]
 800fe64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fe6c:	699b      	ldr	r3, [r3, #24]
 800fe6e:	f003 0320 	and.w	r3, r3, #32
 800fe72:	61fb      	str	r3, [r7, #28]
 800fe74:	69fb      	ldr	r3, [r7, #28]
  USARTx_RX_GPIO_CLK_ENABLE();
 800fe76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fe7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800fe86:	6992      	ldr	r2, [r2, #24]
 800fe88:	f042 0220 	orr.w	r2, r2, #32
 800fe8c:	619a      	str	r2, [r3, #24]
 800fe8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	f003 0320 	and.w	r3, r3, #32
 800fe9c:	61bb      	str	r3, [r7, #24]
 800fe9e:	69bb      	ldr	r3, [r7, #24]
  /* Remap AFIO if needed */
  //AFIOCOMx_CLK_ENABLE(0);
  //AFIOCOMx_REMAP(0);
  
  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 800fea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fea4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800feac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800feb0:	69d2      	ldr	r2, [r2, #28]
 800feb2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800feb6:	61da      	str	r2, [r3, #28]
 800feb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800febc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	697b      	ldr	r3, [r7, #20]
   
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800feca:	2320      	movs	r3, #32
 800fecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800fece:	2302      	movs	r3, #2
 800fed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800fed2:	2301      	movs	r3, #1
 800fed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fed6:	2303      	movs	r3, #3
 800fed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800feda:	f107 0320 	add.w	r3, r7, #32
 800fede:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800fee2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800fee6:	4619      	mov	r1, r3
 800fee8:	f7f2 feba 	bl	8002c60 <HAL_GPIO_Init>
  
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800feec:	2340      	movs	r3, #64	; 0x40
 800feee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fef0:	2300      	movs	r3, #0
 800fef2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800fef4:	f107 0320 	add.w	r3, r7, #32
 800fef8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800fefc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ff00:	4619      	mov	r1, r3
 800ff02:	f7f2 fead 	bl	8002c60 <HAL_GPIO_Init>
  
  /*##-3- Configure the NVIC for UART ########################################*/   
  HAL_NVIC_SetPriority(USARTx_IRQn, 5, 0);
 800ff06:	2026      	movs	r0, #38	; 0x26
 800ff08:	2105      	movs	r1, #5
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f7f0 fcb2 	bl	8000874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800ff10:	2026      	movs	r0, #38	; 0x26
 800ff12:	f7f0 fccb 	bl	80008ac <HAL_NVIC_EnableIRQ>
  
  /* Enable DMAx clock */
  DMAx_CLK_ENABLE();
 800ff16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ff1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ff26:	6952      	ldr	r2, [r2, #20]
 800ff28:	f042 0201 	orr.w	r2, r2, #1
 800ff2c:	615a      	str	r2, [r3, #20]
 800ff2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ff36:	695b      	ldr	r3, [r3, #20]
 800ff38:	f003 0301 	and.w	r3, r3, #1
 800ff3c:	613b      	str	r3, [r7, #16]
 800ff3e:	693b      	ldr	r3, [r7, #16]
  
  /*##-4- Configure the DMA streams ##########################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 800ff40:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ff44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff48:	2280      	movs	r2, #128	; 0x80
 800ff4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ff4e:	601a      	str	r2, [r3, #0]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800ff50:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ff54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff58:	2210      	movs	r2, #16
 800ff5a:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800ff5c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ff60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff64:	2200      	movs	r2, #0
 800ff66:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800ff68:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ff6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff70:	2280      	movs	r2, #128	; 0x80
 800ff72:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ff74:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ff78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800ff80:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ff84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff88:	2200      	movs	r2, #0
 800ff8a:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 800ff8c:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ff90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ff94:	2200      	movs	r2, #0
 800ff96:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800ff98:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ff9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	61da      	str	r2, [r3, #28]
  
  HAL_DMA_Init(&hdma_tx);   
 800ffa4:	f640 10a8 	movw	r0, #2472	; 0x9a8
 800ffa8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800ffac:	f7f0 fd3a 	bl	8000a24 <HAL_DMA_Init>
  
  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ffb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffba:	6313      	str	r3, [r2, #48]	; 0x30
 800ffbc:	f640 13a8 	movw	r3, #2472	; 0x9a8
 800ffc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*##-5- Configure the NVIC for DMA #########################################*/   
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 6, 0);
 800ffc8:	2011      	movs	r0, #17
 800ffca:	2106      	movs	r1, #6
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f7f0 fc51 	bl	8000874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800ffd2:	2011      	movs	r0, #17
 800ffd4:	f7f0 fc6a 	bl	80008ac <HAL_NVIC_EnableIRQ>
  
  /*##-6- Enable TIM peripherals Clock #######################################*/
  TIMx_CLK_ENABLE();
 800ffd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ffdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ffe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ffe4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ffe8:	69d2      	ldr	r2, [r2, #28]
 800ffea:	f042 0202 	orr.w	r2, r2, #2
 800ffee:	61da      	str	r2, [r3, #28]
 800fff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fff4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fff8:	69db      	ldr	r3, [r3, #28]
 800fffa:	f003 0302 	and.w	r3, r3, #2
 800fffe:	60fb      	str	r3, [r7, #12]
 8010000:	68fb      	ldr	r3, [r7, #12]
  
  /*##-7- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */ 
  HAL_NVIC_SetPriority(TIMx_IRQn, 6, 0);
 8010002:	201d      	movs	r0, #29
 8010004:	2106      	movs	r1, #6
 8010006:	2200      	movs	r2, #0
 8010008:	f7f0 fc34 	bl	8000874 <HAL_NVIC_SetPriority>
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 801000c:	201d      	movs	r0, #29
 801000e:	f7f0 fc4d 	bl	80008ac <HAL_NVIC_EnableIRQ>
}
 8010012:	3730      	adds	r7, #48	; 0x30
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <HAL_UART_MspDeInit>:
  *          - Revert GPIO, and NVIC configuration to their default state
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  /*##-1- Reset peripherals ##################################################*/
  USARTx_FORCE_RESET();
 8010020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010024:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801002c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010030:	6912      	ldr	r2, [r2, #16]
 8010032:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010036:	611a      	str	r2, [r3, #16]
  USARTx_RELEASE_RESET();
 8010038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801003c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010044:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010048:	6912      	ldr	r2, [r2, #16]
 801004a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801004e:	611a      	str	r2, [r3, #16]

  /*##-2- Disable peripherals and GPIO Clocks #################################*/
  /* Configure UART Tx as alternate function  */
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 8010050:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8010054:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8010058:	2120      	movs	r1, #32
 801005a:	f7f2 ff9d 	bl	8002f98 <HAL_GPIO_DeInit>
  /* Configure UART Rx as alternate function  */
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
 801005e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8010062:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8010066:	2140      	movs	r1, #64	; 0x40
 8010068:	f7f2 ff96 	bl	8002f98 <HAL_GPIO_DeInit>
  
  /*##-3- Disable the NVIC for UART ##########################################*/
  HAL_NVIC_DisableIRQ(USARTx_IRQn);
 801006c:	2026      	movs	r0, #38	; 0x26
 801006e:	f7f0 fc2b 	bl	80008c8 <HAL_NVIC_DisableIRQ>
  
  /*##-4- Reset TIM peripheral ###############################################*/
  TIMx_FORCE_RESET();
 8010072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010076:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801007a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801007e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010082:	6912      	ldr	r2, [r2, #16]
 8010084:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010088:	611a      	str	r2, [r3, #16]
  TIMx_RELEASE_RESET();
 801008a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801008e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010092:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010096:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801009a:	6912      	ldr	r2, [r2, #16]
 801009c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80100a0:	611a      	str	r2, [r3, #16]
}
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80100a8:	b480      	push	{r7}
 80100aa:	af00      	add	r7, sp, #0
}
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80100b4:	b480      	push	{r7}
 80100b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80100b8:	e7fe      	b.n	80100b8 <HardFault_Handler+0x4>
 80100ba:	bf00      	nop

080100bc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80100bc:	b480      	push	{r7}
 80100be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80100c0:	e7fe      	b.n	80100c0 <MemManage_Handler+0x4>
 80100c2:	bf00      	nop

080100c4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80100c4:	b480      	push	{r7}
 80100c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80100c8:	e7fe      	b.n	80100c8 <BusFault_Handler+0x4>
 80100ca:	bf00      	nop

080100cc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80100cc:	b480      	push	{r7}
 80100ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80100d0:	e7fe      	b.n	80100d0 <UsageFault_Handler+0x4>
 80100d2:	bf00      	nop

080100d4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80100d4:	b480      	push	{r7}
 80100d6:	af00      	add	r7, sp, #0
}
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80100e0:	b480      	push	{r7}
 80100e2:	af00      	add	r7, sp, #0
}
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80100ec:	b480      	push	{r7}
 80100ee:	af00      	add	r7, sp, #0
}
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80100fc:	f7f0 f8e2 	bl	80002c4 <HAL_IncTick>
}
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop

08010104 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8010108:	f641 40cc 	movw	r0, #7372	; 0x1ccc
 801010c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010110:	f7f3 fa36 	bl	8003580 <HAL_PCD_IRQHandler>
}
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop

08010118 <DMA1_Channel7_IRQHandler>:
  * @brief  This function handles DMA interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_DMA_TX_IRQHandler(void)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 801011c:	f640 4350 	movw	r3, #3152	; 0xc50
 8010120:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010126:	4618      	mov	r0, r3
 8010128:	f7f1 fe7c 	bl	8001e24 <HAL_DMA_IRQHandler>
}
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop

08010130 <USART2_IRQHandler>:
  * @brief  This function handles UART interrupt request.  
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartHandle);
 8010134:	f640 4050 	movw	r0, #3152	; 0xc50
 8010138:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801013c:	f7fd fa60 	bl	800d600 <HAL_UART_IRQHandler>
}
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop

08010144 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8010148:	f641 4090 	movw	r0, #7312	; 0x1c90
 801014c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010150:	f7f9 fb7a 	bl	8009848 <HAL_TIM_IRQHandler>
}
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop

08010158 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010158:	b480      	push	{r7}
 801015a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801015c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010160:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010168:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801016c:	6812      	ldr	r2, [r2, #0]
 801016e:	f042 0201 	orr.w	r2, r2, #1
 8010172:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8010174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010178:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801017c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010180:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010184:	6859      	ldr	r1, [r3, #4]
 8010186:	2300      	movs	r3, #0
 8010188:	f2cf 03ff 	movt	r3, #61695	; 0xf0ff
 801018c:	400b      	ands	r3, r1
 801018e:	6053      	str	r3, [r2, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010194:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801019c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80101a0:	6812      	ldr	r2, [r2, #0]
 80101a2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80101a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80101aa:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80101ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80101b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80101bc:	6812      	ldr	r2, [r2, #0]
 80101be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80101c2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80101c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80101cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80101d4:	6852      	ldr	r2, [r2, #4]
 80101d6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80101da:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80101dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80101e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80101ec:	6812      	ldr	r2, [r2, #0]
 80101ee:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 80101f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 80101f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80101fc:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8010200:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 8010202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010206:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801020a:	2200      	movs	r2, #0
 801020c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 801020e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8010212:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8010216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801021a:	609a      	str	r2, [r3, #8]
#endif 
}
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	460b      	mov	r3, r1
 801022e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8010230:	2300      	movs	r3, #0
 8010232:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	7c1b      	ldrb	r3, [r3, #16]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d10e      	bne.n	801025a <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	2181      	movs	r1, #129	; 0x81
 8010240:	2202      	movs	r2, #2
 8010242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010246:	f000 ff13 	bl	8011070 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	2101      	movs	r1, #1
 801024e:	2202      	movs	r2, #2
 8010250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010254:	f000 ff0c 	bl	8011070 <USBD_LL_OpenEP>
 8010258:	e00b      	b.n	8010272 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	2181      	movs	r1, #129	; 0x81
 801025e:	2202      	movs	r2, #2
 8010260:	2340      	movs	r3, #64	; 0x40
 8010262:	f000 ff05 	bl	8011070 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	2101      	movs	r1, #1
 801026a:	2202      	movs	r2, #2
 801026c:	2340      	movs	r3, #64	; 0x40
 801026e:	f000 feff 	bl	8011070 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	2182      	movs	r1, #130	; 0x82
 8010276:	2203      	movs	r2, #3
 8010278:	2308      	movs	r3, #8
 801027a:	f000 fef9 	bl	8011070 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 801027e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010282:	f002 f887 	bl	8012394 <malloc>
 8010286:	4603      	mov	r3, r0
 8010288:	461a      	mov	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010296:	2b00      	cmp	r3, #0
 8010298:	d102      	bne.n	80102a0 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 801029a:	2301      	movs	r3, #1
 801029c:	73fb      	strb	r3, [r7, #15]
 801029e:	e028      	b.n	80102f2 <USBD_CDC_Init+0xce>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80102a6:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	2200      	movs	r2, #0
 80102b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	2200      	movs	r2, #0
 80102be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	7c1b      	ldrb	r3, [r3, #16]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d10a      	bne.n	80102e0 <USBD_CDC_Init+0xbc>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	2101      	movs	r1, #1
 80102d4:	461a      	mov	r2, r3
 80102d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102da:	f000 ff71 	bl	80111c0 <USBD_LL_PrepareReceive>
 80102de:	e008      	b.n	80102f2 <USBD_CDC_Init+0xce>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	2101      	movs	r1, #1
 80102ea:	461a      	mov	r2, r3
 80102ec:	2340      	movs	r3, #64	; 0x40
 80102ee:	f000 ff67 	bl	80111c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 80102f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3710      	adds	r7, #16
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	460b      	mov	r3, r1
 8010306:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8010308:	2300      	movs	r3, #0
 801030a:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	2181      	movs	r1, #129	; 0x81
 8010310:	f000 fec2 	bl	8011098 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	2101      	movs	r1, #1
 8010318:	f000 febe 	bl	8011098 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	2182      	movs	r1, #130	; 0x82
 8010320:	f000 feba 	bl	8011098 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00e      	beq.n	801034c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801033e:	4618      	mov	r0, r3
 8010340:	f002 f830 	bl	80123a4 <free>
    pdev->pClassData = NULL;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 801034c:	7bfb      	ldrb	r3, [r7, #15]
}
 801034e:	4618      	mov	r0, r3
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop

08010358 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010368:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010372:	2b00      	cmp	r3, #0
 8010374:	d03e      	beq.n	80103f4 <USBD_CDC_Setup+0x9c>
 8010376:	2b20      	cmp	r3, #32
 8010378:	d000      	beq.n	801037c <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 801037a:	e04a      	b.n	8010412 <USBD_CDC_Setup+0xba>
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	88db      	ldrh	r3, [r3, #6]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d02c      	beq.n	80103de <USBD_CDC_Setup+0x86>
    {
      if (req->bmRequest & 0x80)
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	b2db      	uxtb	r3, r3
 801038a:	b25b      	sxtb	r3, r3
 801038c:	2b00      	cmp	r3, #0
 801038e:	da12      	bge.n	80103b6 <USBD_CDC_Setup+0x5e>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010396:	689b      	ldr	r3, [r3, #8]
 8010398:	683a      	ldr	r2, [r7, #0]
 801039a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 801039c:	68f9      	ldr	r1, [r7, #12]
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801039e:	683a      	ldr	r2, [r7, #0]
 80103a0:	88d2      	ldrh	r2, [r2, #6]
 80103a2:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 80103a4:	68fa      	ldr	r2, [r7, #12]
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	88db      	ldrh	r3, [r3, #6]
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	4611      	mov	r1, r2
 80103ae:	461a      	mov	r2, r3
 80103b0:	f001 ff46 	bl	8012240 <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80103b4:	e02e      	b.n	8010414 <USBD_CDC_Setup+0xbc>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	785a      	ldrb	r2, [r3, #1]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	88db      	ldrh	r3, [r3, #6]
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hcdc->data,
 80103cc:	68fa      	ldr	r2, [r7, #12]
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
        
        USBD_CtlPrepareRx (pdev, 
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	88db      	ldrh	r3, [r3, #6]
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	4611      	mov	r1, r2
 80103d6:	461a      	mov	r2, r3
 80103d8:	f001 ff60 	bl	801229c <USBD_CtlPrepareRx>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80103dc:	e01a      	b.n	8010414 <USBD_CDC_Setup+0xbc>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	683a      	ldr	r2, [r7, #0]
 80103e8:	7852      	ldrb	r2, [r2, #1]
 80103ea:	4610      	mov	r0, r2
 80103ec:	6839      	ldr	r1, [r7, #0]
 80103ee:	2200      	movs	r2, #0
 80103f0:	4798      	blx	r3
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80103f2:	e00f      	b.n	8010414 <USBD_CDC_Setup+0xbc>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	785b      	ldrb	r3, [r3, #1]
 80103f8:	2b0a      	cmp	r3, #10
 80103fa:	d001      	beq.n	8010400 <USBD_CDC_Setup+0xa8>
 80103fc:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 80103fe:	e008      	b.n	8010412 <USBD_CDC_Setup+0xba>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f640 11e0 	movw	r1, #2528	; 0x9e0
 8010406:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801040a:	2201      	movs	r2, #1
 801040c:	f001 ff18 	bl	8012240 <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 8010410:	bf00      	nop
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8010412:	bf00      	nop
  }
  return USBD_OK;
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop

08010420 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010420:	b480      	push	{r7}
 8010422:	b085      	sub	sp, #20
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	460b      	mov	r3, r1
 801042a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010432:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801043a:	2b00      	cmp	r3, #0
 801043c:	d005      	beq.n	801044a <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2200      	movs	r2, #0
 8010442:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8010446:	2300      	movs	r3, #0
 8010448:	e000      	b.n	801044c <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 801044a:	2302      	movs	r3, #2
  }
}
 801044c:	4618      	mov	r0, r3
 801044e:	3714      	adds	r7, #20
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	460b      	mov	r3, r1
 8010462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801046a:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 801046c:	78fb      	ldrb	r3, [r7, #3]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	4619      	mov	r1, r3
 8010472:	f000 febd 	bl	80111f0 <USBD_LL_GetRxDataSize>
 8010476:	4602      	mov	r2, r0
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010484:	2b00      	cmp	r3, #0
 8010486:	d00e      	beq.n	80104a6 <USBD_CDC_DataOut+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801049c:	4608      	mov	r0, r1
 801049e:	4611      	mov	r1, r2
 80104a0:	4798      	blx	r3

    return USBD_OK;
 80104a2:	2300      	movs	r3, #0
 80104a4:	e000      	b.n	80104a8 <USBD_CDC_DataOut+0x50>
  }
  else
  {
    return USBD_FAIL;
 80104a6:	2302      	movs	r3, #2
  }
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3710      	adds	r7, #16
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80104be:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d014      	beq.n	80104f4 <USBD_CDC_EP0_RxReady+0x44>
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80104d0:	2bff      	cmp	r3, #255	; 0xff
 80104d2:	d00f      	beq.n	80104f4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80104da:	689b      	ldr	r3, [r3, #8]
 80104dc:	68fa      	ldr	r2, [r7, #12]
 80104de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80104e2:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 80104e4:	68fa      	ldr	r2, [r7, #12]
 80104e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80104ea:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	22ff      	movs	r2, #255	; 0xff
 80104f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop

08010500 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2243      	movs	r2, #67	; 0x43
 801050c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801050e:	f240 038c 	movw	r3, #140	; 0x8c
 8010512:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8010516:	4618      	mov	r0, r3
 8010518:	370c      	adds	r7, #12
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop

08010524 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2243      	movs	r2, #67	; 0x43
 8010530:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8010532:	f240 0348 	movw	r3, #72	; 0x48
 8010536:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 801053a:	4618      	mov	r0, r3
 801053c:	370c      	adds	r7, #12
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop

08010548 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8010548:	b480      	push	{r7}
 801054a:	b083      	sub	sp, #12
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2243      	movs	r2, #67	; 0x43
 8010554:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8010556:	f240 03d0 	movw	r3, #208	; 0xd0
 801055a:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 801055e:	4618      	mov	r0, r3
 8010560:	370c      	adds	r7, #12
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop

0801056c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	220a      	movs	r2, #10
 8010578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801057a:	f240 0304 	movw	r3, #4
 801057e:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8010582:	4618      	mov	r0, r3
 8010584:	370c      	adds	r7, #12
 8010586:	46bd      	mov	sp, r7
 8010588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058c:	4770      	bx	lr
 801058e:	bf00      	nop

08010590 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801059a:	2302      	movs	r3, #2
 801059c:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d005      	beq.n	80105b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80105ac:	2300      	movs	r3, #0
 80105ae:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3714      	adds	r7, #20
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop

080105c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b087      	sub	sp, #28
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	4613      	mov	r3, r2
 80105cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80105d4:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	68ba      	ldr	r2, [r7, #8]
 80105da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80105de:	88fa      	ldrh	r2, [r7, #6]
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 80105e6:	2300      	movs	r3, #0
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	371c      	adds	r7, #28
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr

080105f4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b085      	sub	sp, #20
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010604:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3714      	adds	r7, #20
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801062a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010632:	2b00      	cmp	r3, #0
 8010634:	d017      	beq.n	8010666 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801063c:	2b00      	cmp	r3, #0
 801063e:	d110      	bne.n	8010662 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	2201      	movs	r2, #1
 8010644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8010654:	b29b      	uxth	r3, r3
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	2181      	movs	r1, #129	; 0x81
 801065a:	f000 fd99 	bl	8011190 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	e002      	b.n	8010668 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8010662:	2301      	movs	r3, #1
 8010664:	e000      	b.n	8010668 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8010666:	2302      	movs	r3, #2
  }
}
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801067e:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010686:	2b00      	cmp	r3, #0
 8010688:	d019      	beq.n	80106be <USBD_CDC_ReceivePacket+0x4e>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	7c1b      	ldrb	r3, [r3, #16]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d10a      	bne.n	80106a8 <USBD_CDC_ReceivePacket+0x38>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	2101      	movs	r1, #1
 801069c:	461a      	mov	r2, r3
 801069e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106a2:	f000 fd8d 	bl	80111c0 <USBD_LL_PrepareReceive>
 80106a6:	e008      	b.n	80106ba <USBD_CDC_ReceivePacket+0x4a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	2101      	movs	r1, #1
 80106b2:	461a      	mov	r2, r3
 80106b4:	2340      	movs	r3, #64	; 0x40
 80106b6:	f000 fd83 	bl	80111c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	e000      	b.n	80106c0 <USBD_CDC_ReceivePacket+0x50>
  }
  else
  {
    return USBD_FAIL;
 80106be:	2302      	movs	r3, #2
  }
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3710      	adds	r7, #16
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit    = One Stop bit
      - Parity      = No parity
      - BaudRate    = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 80106cc:	f640 4350 	movw	r3, #3152	; 0xc50
 80106d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80106d4:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 80106d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80106dc:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 115200;
 80106de:	f640 4350 	movw	r3, #3152	; 0xc50
 80106e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80106e6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80106ea:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80106ec:	f640 4350 	movw	r3, #3152	; 0xc50
 80106f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80106f4:	2200      	movs	r2, #0
 80106f6:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80106f8:	f640 4350 	movw	r3, #3152	; 0xc50
 80106fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010700:	2200      	movs	r2, #0
 8010702:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8010704:	f640 4350 	movw	r3, #3152	; 0xc50
 8010708:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801070c:	2200      	movs	r2, #0
 801070e:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8010710:	f640 4350 	movw	r3, #3152	; 0xc50
 8010714:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010718:	2200      	movs	r2, #0
 801071a:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 801071c:	f640 4350 	movw	r3, #3152	; 0xc50
 8010720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010724:	220c      	movs	r2, #12
 8010726:	615a      	str	r2, [r3, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8010728:	f640 4050 	movw	r0, #3152	; 0xc50
 801072c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010730:	f7fc f9dc 	bl	800caec <HAL_UART_Init>
 8010734:	4603      	mov	r3, r0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d001      	beq.n	801073e <CDC_Itf_Init+0x76>
  {
    /* Initialization Error */
    Error_Handler();
 801073a:	f000 facb 	bl	8010cd4 <Error_Handler>
  }
  
  /*##-2- Put UART peripheral in IT reception process ########################*/
  /* Any data received will be stored in "UserTxBuffer" buffer  */
  if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 801073e:	f640 4050 	movw	r0, #3152	; 0xc50
 8010742:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010746:	f640 4190 	movw	r1, #3216	; 0xc90
 801074a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801074e:	2201      	movs	r2, #1
 8010750:	f7fc fd24 	bl	800d19c <HAL_UART_Receive_IT>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d001      	beq.n	801075e <CDC_Itf_Init+0x96>
  {
    /* Transfer error in reception process */
    Error_Handler();
 801075a:	f000 fabb 	bl	8010cd4 <Error_Handler>
  }
  
  /*##-3- Configure the TIM Base generation  #################################*/
  TIM_Config();
 801075e:	f000 fa7f 	bl	8010c60 <TIM_Config>
  
  /*##-4- Start the TIM Base generation in interrupt mode ####################*/
  /* Start Channel1 */
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8010762:	f641 4090 	movw	r0, #7312	; 0x1c90
 8010766:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801076a:	f7f7 f909 	bl	8007980 <HAL_TIM_Base_Start_IT>
 801076e:	4603      	mov	r3, r0
 8010770:	2b00      	cmp	r3, #0
 8010772:	d001      	beq.n	8010778 <CDC_Itf_Init+0xb0>
  {
    /* Starting Error */
    Error_Handler();
 8010774:	f000 faae 	bl	8010cd4 <Error_Handler>
  }
  
  /*##-5- Set Application Buffers ############################################*/
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 8010778:	f640 2028 	movw	r0, #2600	; 0xa28
 801077c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010780:	f640 4190 	movw	r1, #3216	; 0xc90
 8010784:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8010788:	2200      	movs	r2, #0
 801078a:	f7ff ff19 	bl	80105c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 801078e:	f640 2028 	movw	r0, #2600	; 0xa28
 8010792:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010796:	f241 4190 	movw	r1, #5264	; 0x1490
 801079a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801079e:	f7ff ff29 	bl	80105f4 <USBD_CDC_SetRxBuffer>
  
  return (USBD_OK);
 80107a2:	2300      	movs	r3, #0
 80107a4:	b25b      	sxtb	r3, r3
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop

080107ac <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	af00      	add	r7, sp, #0
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80107b0:	f640 4050 	movw	r0, #3152	; 0xc50
 80107b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80107b8:	f7fc faf0 	bl	800cd9c <HAL_UART_DeInit>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d001      	beq.n	80107c6 <CDC_Itf_DeInit+0x1a>
  {
    /* Initialization Error */
    Error_Handler();
 80107c2:	f000 fa87 	bl	8010cd4 <Error_Handler>
  }
  return (USBD_OK);
 80107c6:	2300      	movs	r3, #0
 80107c8:	b25b      	sxtb	r3, r3
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop

080107d0 <CDC_Itf_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6039      	str	r1, [r7, #0]
 80107d8:	4613      	mov	r3, r2
 80107da:	4602      	mov	r2, r0
 80107dc:	71fa      	strb	r2, [r7, #7]
 80107de:	80bb      	strh	r3, [r7, #4]
  switch (cmd)
 80107e0:	79fb      	ldrb	r3, [r7, #7]
 80107e2:	2b23      	cmp	r3, #35	; 0x23
 80107e4:	f200 80bb 	bhi.w	801095e <CDC_Itf_Control+0x18e>
 80107e8:	a201      	add	r2, pc, #4	; (adr r2, 80107f0 <CDC_Itf_Control+0x20>)
 80107ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ee:	bf00      	nop
 80107f0:	0801095f 	.word	0x0801095f
 80107f4:	0801095f 	.word	0x0801095f
 80107f8:	0801095f 	.word	0x0801095f
 80107fc:	0801095f 	.word	0x0801095f
 8010800:	0801095f 	.word	0x0801095f
 8010804:	0801095f 	.word	0x0801095f
 8010808:	0801095f 	.word	0x0801095f
 801080c:	0801095f 	.word	0x0801095f
 8010810:	0801095f 	.word	0x0801095f
 8010814:	0801095f 	.word	0x0801095f
 8010818:	0801095f 	.word	0x0801095f
 801081c:	0801095f 	.word	0x0801095f
 8010820:	0801095f 	.word	0x0801095f
 8010824:	0801095f 	.word	0x0801095f
 8010828:	0801095f 	.word	0x0801095f
 801082c:	0801095f 	.word	0x0801095f
 8010830:	0801095f 	.word	0x0801095f
 8010834:	0801095f 	.word	0x0801095f
 8010838:	0801095f 	.word	0x0801095f
 801083c:	0801095f 	.word	0x0801095f
 8010840:	0801095f 	.word	0x0801095f
 8010844:	0801095f 	.word	0x0801095f
 8010848:	0801095f 	.word	0x0801095f
 801084c:	0801095f 	.word	0x0801095f
 8010850:	0801095f 	.word	0x0801095f
 8010854:	0801095f 	.word	0x0801095f
 8010858:	0801095f 	.word	0x0801095f
 801085c:	0801095f 	.word	0x0801095f
 8010860:	0801095f 	.word	0x0801095f
 8010864:	0801095f 	.word	0x0801095f
 8010868:	0801095f 	.word	0x0801095f
 801086c:	0801095f 	.word	0x0801095f
 8010870:	08010881 	.word	0x08010881
 8010874:	080108e1 	.word	0x080108e1
 8010878:	0801095f 	.word	0x0801095f
 801087c:	0801095f 	.word	0x0801095f
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	461a      	mov	r2, r3
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	3301      	adds	r3, #1
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	021b      	lsls	r3, r3, #8
 801088e:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	3302      	adds	r3, #2
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	041b      	lsls	r3, r3, #16
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8010898:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	3303      	adds	r3, #3
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	061b      	lsls	r3, r3, #24
 80108a2:	4313      	orrs	r3, r2
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80108a4:	461a      	mov	r2, r3
 80108a6:	f240 1314 	movw	r3, #276	; 0x114
 80108aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80108ae:	601a      	str	r2, [r3, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	791a      	ldrb	r2, [r3, #4]
 80108b4:	f240 1314 	movw	r3, #276	; 0x114
 80108b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80108bc:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	795a      	ldrb	r2, [r3, #5]
 80108c2:	f240 1314 	movw	r3, #276	; 0x114
 80108c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80108ca:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	799a      	ldrb	r2, [r3, #6]
 80108d0:	f240 1314 	movw	r3, #276	; 0x114
 80108d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80108d8:	719a      	strb	r2, [r3, #6]
    
    /* Set the new configuration */
    ComPort_Config();
 80108da:	f000 f909 	bl	8010af0 <ComPort_Config>
    break;
 80108de:	e03f      	b.n	8010960 <CDC_Itf_Control+0x190>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80108e0:	f240 1314 	movw	r3, #276	; 0x114
 80108e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	b2da      	uxtb	r2, r3
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	1c5a      	adds	r2, r3, #1
 80108f4:	f240 1314 	movw	r3, #276	; 0x114
 80108f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	0a1b      	lsrs	r3, r3, #8
 8010900:	b2db      	uxtb	r3, r3
 8010902:	7013      	strb	r3, [r2, #0]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	1c9a      	adds	r2, r3, #2
 8010908:	f240 1314 	movw	r3, #276	; 0x114
 801090c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	0c1b      	lsrs	r3, r3, #16
 8010914:	b2db      	uxtb	r3, r3
 8010916:	7013      	strb	r3, [r2, #0]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	1cda      	adds	r2, r3, #3
 801091c:	f240 1314 	movw	r3, #276	; 0x114
 8010920:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	0e1b      	lsrs	r3, r3, #24
 8010928:	b2db      	uxtb	r3, r3
 801092a:	7013      	strb	r3, [r2, #0]
    pbuf[4] = LineCoding.format;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	1d1a      	adds	r2, r3, #4
 8010930:	f240 1314 	movw	r3, #276	; 0x114
 8010934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010938:	791b      	ldrb	r3, [r3, #4]
 801093a:	7013      	strb	r3, [r2, #0]
    pbuf[5] = LineCoding.paritytype;
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	1d5a      	adds	r2, r3, #5
 8010940:	f240 1314 	movw	r3, #276	; 0x114
 8010944:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010948:	795b      	ldrb	r3, [r3, #5]
 801094a:	7013      	strb	r3, [r2, #0]
    pbuf[6] = LineCoding.datatype;     
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	1d9a      	adds	r2, r3, #6
 8010950:	f240 1314 	movw	r3, #276	; 0x114
 8010954:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010958:	799b      	ldrb	r3, [r3, #6]
 801095a:	7013      	strb	r3, [r2, #0]
    break;
 801095c:	e000      	b.n	8010960 <CDC_Itf_Control+0x190>
  case CDC_SEND_BREAK:
     /* Add your code here */
    break;    
    
  default:
    break;
 801095e:	bf00      	nop
  }
  
  return (USBD_OK);
 8010960:	2300      	movs	r3, #0
 8010962:	b25b      	sxtb	r3, r3
}
 8010964:	4618      	mov	r0, r3
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;
  
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8010974:	f640 13e8 	movw	r3, #2536	; 0x9e8
 8010978:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	f640 13e4 	movw	r3, #2532	; 0x9e4
 8010982:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	429a      	cmp	r2, r3
 801098a:	d059      	beq.n	8010a40 <HAL_TIM_PeriodElapsedCallback+0xd4>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 801098c:	f640 13e8 	movw	r3, #2536	; 0x9e8
 8010990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	f640 13e4 	movw	r3, #2532	; 0x9e4
 801099a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d908      	bls.n	80109b6 <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 80109a4:	f640 13e8 	movw	r3, #2536	; 0x9e8
 80109a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80109b2:	60fb      	str	r3, [r7, #12]
 80109b4:	e00b      	b.n	80109ce <HAL_TIM_PeriodElapsedCallback+0x62>
    }
    else 
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 80109b6:	f640 13e4 	movw	r3, #2532	; 0x9e4
 80109ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	f640 13e8 	movw	r3, #2536	; 0x9e8
 80109c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	60fb      	str	r3, [r7, #12]
    }
    
    buffptr = UserTxBufPtrOut;
 80109ce:	f640 13e8 	movw	r3, #2536	; 0x9e8
 80109d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	60bb      	str	r3, [r7, #8]
    
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 80109da:	68ba      	ldr	r2, [r7, #8]
 80109dc:	f640 4390 	movw	r3, #3216	; 0xc90
 80109e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80109e4:	441a      	add	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f640 2028 	movw	r0, #2600	; 0xa28
 80109ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80109f2:	4611      	mov	r1, r2
 80109f4:	461a      	mov	r2, r3
 80109f6:	f7ff fde3 	bl	80105c0 <USBD_CDC_SetTxBuffer>
    
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 80109fa:	f640 2028 	movw	r0, #2600	; 0xa28
 80109fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010a02:	f7ff fe0b 	bl	801061c <USBD_CDC_TransmitPacket>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d119      	bne.n	8010a40 <HAL_TIM_PeriodElapsedCallback+0xd4>
    {
      UserTxBufPtrOut += buffsize;
 8010a0c:	f640 13e8 	movw	r3, #2536	; 0x9e8
 8010a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a14:	681a      	ldr	r2, [r3, #0]
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	441a      	add	r2, r3
 8010a1a:	f640 13e8 	movw	r3, #2536	; 0x9e8
 8010a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a22:	601a      	str	r2, [r3, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8010a24:	f640 13e8 	movw	r3, #2536	; 0x9e8
 8010a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a32:	d105      	bne.n	8010a40 <HAL_TIM_PeriodElapsedCallback+0xd4>
      {
        UserTxBufPtrOut = 0;
 8010a34:	f640 13e8 	movw	r3, #2536	; 0x9e8
 8010a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop

08010a48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 8010a50:	f640 13e4 	movw	r3, #2532	; 0x9e4
 8010a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	1c5a      	adds	r2, r3, #1
 8010a5c:	f640 13e4 	movw	r3, #2532	; 0x9e4
 8010a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a64:	601a      	str	r2, [r3, #0]
  
  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 8010a66:	f640 13e4 	movw	r3, #2532	; 0x9e4
 8010a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a74:	d105      	bne.n	8010a82 <HAL_UART_RxCpltCallback+0x3a>
  {
    UserTxBufPtrIn = 0;
 8010a76:	f640 13e4 	movw	r3, #2532	; 0x9e4
 8010a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a7e:	2200      	movs	r2, #0
 8010a80:	601a      	str	r2, [r3, #0]
  }
  
  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 8010a82:	f640 13e4 	movw	r3, #2532	; 0x9e4
 8010a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	f640 4390 	movw	r3, #3216	; 0xc90
 8010a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010a94:	4413      	add	r3, r2
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	4619      	mov	r1, r3
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	f7fc fb7e 	bl	800d19c <HAL_UART_Receive_IT>
}
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop

08010aa8 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit_DMA(&UartHandle, Buf, *Len);
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	f640 4050 	movw	r0, #3152	; 0xc50
 8010abc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010ac0:	6879      	ldr	r1, [r7, #4]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	f7fc fbd2 	bl	800d26c <HAL_UART_Transmit_DMA>
  return (USBD_OK);
 8010ac8:	2300      	movs	r3, #0
 8010aca:	b25b      	sxtb	r3, r3
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3708      	adds	r7, #8
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&USBD_Device);
 8010adc:	f640 2028 	movw	r0, #2600	; 0xa28
 8010ae0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010ae4:	f7ff fdc4 	bl	8010670 <USBD_CDC_ReceivePacket>
}
 8010ae8:	3708      	adds	r7, #8
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop

08010af0 <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8010af4:	f640 4050 	movw	r0, #3152	; 0xc50
 8010af8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010afc:	f7fc f94e 	bl	800cd9c <HAL_UART_DeInit>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d001      	beq.n	8010b0a <ComPort_Config+0x1a>
  {
    /* Initialization Error */
    Error_Handler();
 8010b06:	f000 f8e5 	bl	8010cd4 <Error_Handler>
  }
  
  /* set the Stop bit */
  switch (LineCoding.format)
 8010b0a:	f240 1314 	movw	r3, #276	; 0x114
 8010b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b12:	791b      	ldrb	r3, [r3, #4]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <ComPort_Config+0x2e>
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	d007      	beq.n	8010b2c <ComPort_Config+0x3c>
 8010b1c:	e00e      	b.n	8010b3c <ComPort_Config+0x4c>
  {
  case 0:
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8010b1e:	f640 4350 	movw	r3, #3152	; 0xc50
 8010b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b26:	2200      	movs	r2, #0
 8010b28:	60da      	str	r2, [r3, #12]
    break;
 8010b2a:	e00e      	b.n	8010b4a <ComPort_Config+0x5a>
  case 2:
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 8010b2c:	f640 4350 	movw	r3, #3152	; 0xc50
 8010b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010b38:	60da      	str	r2, [r3, #12]
    break;
 8010b3a:	e006      	b.n	8010b4a <ComPort_Config+0x5a>
  default :
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8010b3c:	f640 4350 	movw	r3, #3152	; 0xc50
 8010b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b44:	2200      	movs	r2, #0
 8010b46:	60da      	str	r2, [r3, #12]
    break;
 8010b48:	bf00      	nop
  }
  
  /* set the parity bit*/
  switch (LineCoding.paritytype)
 8010b4a:	f240 1314 	movw	r3, #276	; 0x114
 8010b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b52:	795b      	ldrb	r3, [r3, #5]
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d00a      	beq.n	8010b6e <ComPort_Config+0x7e>
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	d010      	beq.n	8010b7e <ComPort_Config+0x8e>
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d116      	bne.n	8010b8e <ComPort_Config+0x9e>
  {
  case 0:
    UartHandle.Init.Parity = UART_PARITY_NONE;
 8010b60:	f640 4350 	movw	r3, #3152	; 0xc50
 8010b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b68:	2200      	movs	r2, #0
 8010b6a:	611a      	str	r2, [r3, #16]
    break;
 8010b6c:	e016      	b.n	8010b9c <ComPort_Config+0xac>
  case 1:
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8010b6e:	f640 4350 	movw	r3, #3152	; 0xc50
 8010b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b76:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010b7a:	611a      	str	r2, [r3, #16]
    break;
 8010b7c:	e00e      	b.n	8010b9c <ComPort_Config+0xac>
  case 2:
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8010b7e:	f640 4350 	movw	r3, #3152	; 0xc50
 8010b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010b8a:	611a      	str	r2, [r3, #16]
    break;
 8010b8c:	e006      	b.n	8010b9c <ComPort_Config+0xac>
  default :
    UartHandle.Init.Parity = UART_PARITY_NONE;
 8010b8e:	f640 4350 	movw	r3, #3152	; 0xc50
 8010b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b96:	2200      	movs	r2, #0
 8010b98:	611a      	str	r2, [r3, #16]
    break;
 8010b9a:	bf00      	nop
  }
  
  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 8010b9c:	f240 1314 	movw	r3, #276	; 0x114
 8010ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ba4:	799b      	ldrb	r3, [r3, #6]
 8010ba6:	2b07      	cmp	r3, #7
 8010ba8:	d002      	beq.n	8010bb0 <ComPort_Config+0xc0>
 8010baa:	2b08      	cmp	r3, #8
 8010bac:	d007      	beq.n	8010bbe <ComPort_Config+0xce>
 8010bae:	e01c      	b.n	8010bea <ComPort_Config+0xfa>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8010bb0:	f640 4350 	movw	r3, #3152	; 0xc50
 8010bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bb8:	2200      	movs	r2, #0
 8010bba:	609a      	str	r2, [r3, #8]
    break;
 8010bbc:	e01c      	b.n	8010bf8 <ComPort_Config+0x108>
  case 0x08:
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 8010bbe:	f640 4350 	movw	r3, #3152	; 0xc50
 8010bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bc6:	691b      	ldr	r3, [r3, #16]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d106      	bne.n	8010bda <ComPort_Config+0xea>
    {
      UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8010bcc:	f640 4350 	movw	r3, #3152	; 0xc50
 8010bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	609a      	str	r2, [r3, #8]
    else 
    {
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
    }
    
    break;
 8010bd8:	e00e      	b.n	8010bf8 <ComPort_Config+0x108>
    {
      UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
    }
    else 
    {
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8010bda:	f640 4350 	movw	r3, #3152	; 0xc50
 8010bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010be6:	609a      	str	r2, [r3, #8]
    }
    
    break;
 8010be8:	e006      	b.n	8010bf8 <ComPort_Config+0x108>
  default :
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8010bea:	f640 4350 	movw	r3, #3152	; 0xc50
 8010bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	609a      	str	r2, [r3, #8]
    break;
 8010bf6:	bf00      	nop
  }
  
  UartHandle.Init.BaudRate = LineCoding.bitrate;
 8010bf8:	f240 1314 	movw	r3, #276	; 0x114
 8010bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	f640 4350 	movw	r3, #3152	; 0xc50
 8010c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c0a:	605a      	str	r2, [r3, #4]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8010c0c:	f640 4350 	movw	r3, #3152	; 0xc50
 8010c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c14:	2200      	movs	r2, #0
 8010c16:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8010c18:	f640 4350 	movw	r3, #3152	; 0xc50
 8010c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c20:	220c      	movs	r2, #12
 8010c22:	615a      	str	r2, [r3, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8010c24:	f640 4050 	movw	r0, #3152	; 0xc50
 8010c28:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010c2c:	f7fb ff5e 	bl	800caec <HAL_UART_Init>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d001      	beq.n	8010c3a <ComPort_Config+0x14a>
  {
    /* Initialization Error */
    Error_Handler();
 8010c36:	f000 f84d 	bl	8010cd4 <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 8010c3a:	f640 13e4 	movw	r3, #2532	; 0x9e4
 8010c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	f640 4390 	movw	r3, #3216	; 0xc90
 8010c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c4c:	4413      	add	r3, r2
 8010c4e:	f640 4050 	movw	r0, #3152	; 0xc50
 8010c52:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010c56:	4619      	mov	r1, r3
 8010c58:	2201      	movs	r2, #1
 8010c5a:	f7fc fa9f 	bl	800d19c <HAL_UART_Receive_IT>
}
 8010c5e:	bd80      	pop	{r7, pc}

08010c60 <TIM_Config>:
  * @brief  TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void TIM_Config(void)
{  
 8010c60:	b580      	push	{r7, lr}
 8010c62:	af00      	add	r7, sp, #0
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8010c64:	f641 4390 	movw	r3, #7312	; 0x1c90
 8010c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010c70:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8010c74:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8010c76:	f641 4390 	movw	r3, #7312	; 0x1c90
 8010c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c7e:	f241 3287 	movw	r2, #4999	; 0x1387
 8010c82:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 84-1;
 8010c84:	f641 4390 	movw	r3, #7312	; 0x1c90
 8010c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c8c:	2253      	movs	r2, #83	; 0x53
 8010c8e:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8010c90:	f641 4390 	movw	r3, #7312	; 0x1c90
 8010c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c98:	2200      	movs	r2, #0
 8010c9a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010c9c:	f641 4390 	movw	r3, #7312	; 0x1c90
 8010ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8010ca8:	f641 4090 	movw	r0, #7312	; 0x1c90
 8010cac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8010cb0:	f7f6 fdae 	bl	8007810 <HAL_TIM_Base_Init>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <TIM_Config+0x5e>
  {
    /* Initialization Error */
    Error_Handler();
 8010cba:	f000 f80b 	bl	8010cd4 <Error_Handler>
  }
}
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  /* Transfer error occured in reception and/or transmission process */
  Error_Handler();
 8010cc8:	f000 f804 	bl	8010cd4 <Error_Handler>
}
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop

08010cd4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	af00      	add	r7, sp, #0
  /* Add your own code here */
}
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b088      	sub	sp, #32
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010cf4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010cf8:	6992      	ldr	r2, [r2, #24]
 8010cfa:	f042 0204 	orr.w	r2, r2, #4
 8010cfe:	619a      	str	r2, [r3, #24]
 8010d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010d08:	699b      	ldr	r3, [r3, #24]
 8010d0a:	f003 0304 	and.w	r3, r3, #4
 8010d0e:	60fb      	str	r3, [r7, #12]
 8010d10:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8010d12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d18:	2302      	movs	r3, #2
 8010d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010d20:	2303      	movs	r3, #3
 8010d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8010d24:	f107 0310 	add.w	r3, r7, #16
 8010d28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010d2c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8010d30:	4619      	mov	r1, r3
 8010d32:	f7f1 ff95 	bl	8002c60 <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d40:	2300      	movs	r3, #0
 8010d42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d44:	f107 0310 	add.w	r3, r7, #16
 8010d48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010d4c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8010d50:	4619      	mov	r1, r3
 8010d52:	f7f1 ff85 	bl	8002c60 <HAL_GPIO_Init>
  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8010d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010d5c:	2312      	movs	r3, #18
 8010d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010d60:	2301      	movs	r3, #1
 8010d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d64:	f107 0310 	add.w	r3, r7, #16
 8010d68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010d6c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8010d70:	4619      	mov	r1, r3
 8010d72:	f7f1 ff75 	bl	8002c60 <HAL_GPIO_Init>
  
  /* Enable USB OTG FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010d7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010d82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010d86:	6952      	ldr	r2, [r2, #20]
 8010d88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010d8c:	615a      	str	r2, [r3, #20]
 8010d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010d96:	695b      	ldr	r3, [r3, #20]
 8010d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010d9c:	60bb      	str	r3, [r7, #8]
 8010d9e:	68bb      	ldr	r3, [r7, #8]
  
  /* Set USBFS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8010da0:	2043      	movs	r0, #67	; 0x43
 8010da2:	2106      	movs	r1, #6
 8010da4:	2200      	movs	r2, #0
 8010da6:	f7ef fd65 	bl	8000874 <HAL_NVIC_SetPriority>
  
  /* Enable USBFS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010daa:	2043      	movs	r0, #67	; 0x43
 8010dac:	f7ef fd7e 	bl	80008ac <HAL_NVIC_EnableIRQ>
}
 8010db0:	3720      	adds	r7, #32
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop

08010db8 <HAL_PCD_MspDeInit>:
  * @brief  De-Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  /* Disable USB OTG FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8010dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010dcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010dd0:	6952      	ldr	r2, [r2, #20]
 8010dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010dd6:	615a      	str	r2, [r3, #20]
}
 8010dd8:	370c      	adds	r7, #12
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop

08010de4 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8010df8:	4610      	mov	r0, r2
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	f000 fa9e 	bl	801133c <USBD_LL_SetupStage>
}
 8010e00:	3708      	adds	r7, #8
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop

08010e08 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	460b      	mov	r3, r1
 8010e12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 13a4 	ldr.w	r1, [r3, #932]	; 0x3a4
 8010e1a:	78fa      	ldrb	r2, [r7, #3]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	4613      	mov	r3, r2
 8010e20:	00db      	lsls	r3, r3, #3
 8010e22:	1a9b      	subs	r3, r3, r2
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	4403      	add	r3, r0
 8010e28:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	78fa      	ldrb	r2, [r7, #3]
 8010e30:	4608      	mov	r0, r1
 8010e32:	4611      	mov	r1, r2
 8010e34:	461a      	mov	r2, r3
 8010e36:	f000 facb 	bl	80113d0 <USBD_LL_DataOutStage>
}
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	460b      	mov	r3, r1
 8010e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 13a4 	ldr.w	r1, [r3, #932]	; 0x3a4
 8010e52:	78fa      	ldrb	r2, [r7, #3]
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	4613      	mov	r3, r2
 8010e58:	00db      	lsls	r3, r3, #3
 8010e5a:	1a9b      	subs	r3, r3, r2
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	4403      	add	r3, r0
 8010e60:	3334      	adds	r3, #52	; 0x34
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	78fa      	ldrb	r2, [r7, #3]
 8010e66:	4608      	mov	r0, r1
 8010e68:	4611      	mov	r1, r2
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	f000 fb0c 	bl	8011488 <USBD_LL_DataInStage>
}
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop

08010e78 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 fbf6 	bl	8011678 <USBD_LL_SOF>
}
 8010e8c:	3708      	adds	r7, #8
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	bf00      	nop

08010e94 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Set USB Current Speed */
  switch(hpcd->Init.speed)
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	2b02      	cmp	r3, #2
 8010ea6:	d102      	bne.n	8010eae <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	73fb      	strb	r3, [r7, #15]
    break;   
 8010eac:	e002      	b.n	8010eb4 <HAL_PCD_ResetCallback+0x20>
    
  default:
    speed = USBD_SPEED_FULL;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8010eb2:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 8010eba:	7bfb      	ldrb	r3, [r7, #15]
 8010ebc:	4610      	mov	r0, r2
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	f000 fba2 	bl	8011608 <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f000 fb6c 	bl	80115a8 <USBD_LL_Reset>
}
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop

08010ed8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 fb9e 	bl	8011628 <USBD_LL_Suspend>
}
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop

08010ef4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 fba6 	bl	8011654 <USBD_LL_Resume>
}
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop

08010f10 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	460b      	mov	r3, r1
 8010f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 8010f22:	78fb      	ldrb	r3, [r7, #3]
 8010f24:	4610      	mov	r0, r2
 8010f26:	4619      	mov	r1, r3
 8010f28:	f000 fbce 	bl	80116c8 <USBD_LL_IsoOUTIncomplete>
}
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop

08010f34 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 8010f46:	78fb      	ldrb	r3, [r7, #3]
 8010f48:	4610      	mov	r0, r2
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	f000 fbae 	bl	80116ac <USBD_LL_IsoINIncomplete>
}
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop

08010f58 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8010f66:	4618      	mov	r0, r3
 8010f68:	f000 fbbc 	bl	80116e4 <USBD_LL_DevConnected>
}
 8010f6c:	3708      	adds	r7, #8
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop

08010f74 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8010f82:	4618      	mov	r0, r3
 8010f84:	f000 fbba 	bl	80116fc <USBD_LL_DevDisconnected>
}
 8010f88:	3708      	adds	r7, #8
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop

08010f90 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8010f98:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8010f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fa0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010fa4:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 4;
 8010fa6:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8010faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fae:	2204      	movs	r2, #4
 8010fb0:	605a      	str	r2, [r3, #4]
  hpcd.Init.ep0_mps = 0x40;
 8010fb2:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8010fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fba:	2240      	movs	r2, #64	; 0x40
 8010fbc:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 8010fbe:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8010fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 8010fca:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8010fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	615a      	str	r2, [r3, #20]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8010fd6:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8010fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fde:	2202      	movs	r2, #2
 8010fe0:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = 1;
 8010fe2:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8010fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010fea:	2201      	movs	r2, #1
 8010fec:	61da      	str	r2, [r3, #28]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8010fee:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8010ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
  pdev->pData = &hpcd;
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8011002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011006:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 801100a:	f641 40cc 	movw	r0, #7372	; 0x1ccc
 801100e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8011012:	f7f2 f931 	bl	8003278 <HAL_PCD_Init>
  
  HAL_PCDEx_SetRxFiFo(&hpcd, 0x80);
 8011016:	f641 40cc 	movw	r0, #7372	; 0x1ccc
 801101a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801101e:	2180      	movs	r1, #128	; 0x80
 8011020:	f7f3 f984 	bl	800432c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x40);
 8011024:	f641 40cc 	movw	r0, #7372	; 0x1ccc
 8011028:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801102c:	2100      	movs	r1, #0
 801102e:	2240      	movs	r2, #64	; 0x40
 8011030:	f7f3 f92e 	bl	8004290 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 1, 0x80);
 8011034:	f641 40cc 	movw	r0, #7372	; 0x1ccc
 8011038:	f2c2 0000 	movt	r0, #8192	; 0x2000
 801103c:	2101      	movs	r1, #1
 801103e:	2280      	movs	r2, #128	; 0x80
 8011040:	f7f3 f926 	bl	8004290 <HAL_PCDEx_SetTxFiFo>
  
  return USBD_OK;
 8011044:	2300      	movs	r3, #0
}
 8011046:	4618      	mov	r0, r3
 8011048:	3708      	adds	r7, #8
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop

08011050 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801105e:	4618      	mov	r0, r3
 8011060:	f7f2 fa40 	bl	80034e4 <HAL_PCD_Start>
  return USBD_OK;
 8011064:	2300      	movs	r3, #0
}
 8011066:	4618      	mov	r0, r3
 8011068:	3708      	adds	r7, #8
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop

08011070 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	70f9      	strb	r1, [r7, #3]
 801107a:	70ba      	strb	r2, [r7, #2]
 801107c:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open((PCD_HandleTypeDef*)pdev->pData,
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8011084:	78f9      	ldrb	r1, [r7, #3]
 8011086:	883a      	ldrh	r2, [r7, #0]
 8011088:	78bb      	ldrb	r3, [r7, #2]
 801108a:	f7f2 fe23 	bl	8003cd4 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	460b      	mov	r3, r1
 80110a2:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close((PCD_HandleTypeDef*)pdev->pData, ep_addr);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80110aa:	78fb      	ldrb	r3, [r7, #3]
 80110ac:	4610      	mov	r0, r2
 80110ae:	4619      	mov	r1, r3
 80110b0:	f7f2 fe64 	bl	8003d7c <HAL_PCD_EP_Close>
  return USBD_OK;
 80110b4:	2300      	movs	r3, #0
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3708      	adds	r7, #8
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop

080110c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	460b      	mov	r3, r1
 80110ca:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*)pdev->pData, ep_addr);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80110d2:	78fb      	ldrb	r3, [r7, #3]
 80110d4:	4610      	mov	r0, r2
 80110d6:	4619      	mov	r1, r3
 80110d8:	f7f2 ff54 	bl	8003f84 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3708      	adds	r7, #8
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop

080110e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	460b      	mov	r3, r1
 80110f2:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*)pdev->pData, ep_addr);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80110fa:	78fb      	ldrb	r3, [r7, #3]
 80110fc:	4610      	mov	r0, r2
 80110fe:	4619      	mov	r1, r3
 8011100:	f7f2 ff9a 	bl	8004038 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8011104:	2300      	movs	r3, #0
}
 8011106:	4618      	mov	r0, r3
 8011108:	3708      	adds	r7, #8
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop

08011110 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011110:	b480      	push	{r7}
 8011112:	b085      	sub	sp, #20
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	460b      	mov	r3, r1
 801111a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011122:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8011124:	78fb      	ldrb	r3, [r7, #3]
 8011126:	b25b      	sxtb	r3, r3
 8011128:	2b00      	cmp	r3, #0
 801112a:	da0b      	bge.n	8011144 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801112c:	78fb      	ldrb	r3, [r7, #3]
 801112e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011132:	68f9      	ldr	r1, [r7, #12]
 8011134:	4613      	mov	r3, r2
 8011136:	00db      	lsls	r3, r3, #3
 8011138:	1a9b      	subs	r3, r3, r2
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	440b      	add	r3, r1
 801113e:	3328      	adds	r3, #40	; 0x28
 8011140:	789b      	ldrb	r3, [r3, #2]
 8011142:	e00b      	b.n	801115c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011144:	78fb      	ldrb	r3, [r7, #3]
 8011146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801114a:	68f9      	ldr	r1, [r7, #12]
 801114c:	4613      	mov	r3, r2
 801114e:	00db      	lsls	r3, r3, #3
 8011150:	1a9b      	subs	r3, r3, r2
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	440b      	add	r3, r1
 8011156:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801115a:	799b      	ldrb	r3, [r3, #6]
  }
}
 801115c:	4618      	mov	r0, r3
 801115e:	3714      	adds	r7, #20
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	460b      	mov	r3, r1
 8011172:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress((PCD_HandleTypeDef*)pdev->pData, dev_addr);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801117a:	78fb      	ldrb	r3, [r7, #3]
 801117c:	4610      	mov	r0, r2
 801117e:	4619      	mov	r1, r3
 8011180:	f7f2 fd82 	bl	8003c88 <HAL_PCD_SetAddress>
  return USBD_OK; 
 8011184:	2300      	movs	r3, #0
}
 8011186:	4618      	mov	r0, r3
 8011188:	3708      	adds	r7, #8
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop

08011190 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	607a      	str	r2, [r7, #4]
 801119a:	460a      	mov	r2, r1
 801119c:	72fa      	strb	r2, [r7, #11]
 801119e:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*)pdev->pData, ep_addr, pbuf, size);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
 80111a6:	893b      	ldrh	r3, [r7, #8]
 80111a8:	7afa      	ldrb	r2, [r7, #11]
 80111aa:	4608      	mov	r0, r1
 80111ac:	4611      	mov	r1, r2
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	f7f2 fe9a 	bl	8003ee8 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop

080111c0 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	607a      	str	r2, [r7, #4]
 80111ca:	460a      	mov	r2, r1
 80111cc:	72fa      	strb	r2, [r7, #11]
 80111ce:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*)pdev->pData, ep_addr, pbuf, size);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
 80111d6:	893b      	ldrh	r3, [r7, #8]
 80111d8:	7afa      	ldrb	r2, [r7, #11]
 80111da:	4608      	mov	r0, r1
 80111dc:	4611      	mov	r1, r2
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	f7f2 fe18 	bl	8003e14 <HAL_PCD_EP_Receive>
  return USBD_OK;
 80111e4:	2300      	movs	r3, #0
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop

080111f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	460b      	mov	r3, r1
 80111fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*)pdev->pData, ep_addr);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8011202:	78fb      	ldrb	r3, [r7, #3]
 8011204:	4610      	mov	r0, r2
 8011206:	4619      	mov	r1, r3
 8011208:	f7f2 fe54 	bl	8003eb4 <HAL_PCD_EP_GetRxCount>
 801120c:	4603      	mov	r3, r0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop

08011218 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	4613      	mov	r3, r2
 8011224:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d101      	bne.n	8011230 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 801122c:	2302      	movs	r3, #2
 801122e:	e01a      	b.n	8011266 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011236:	2b00      	cmp	r3, #0
 8011238:	d003      	beq.n	8011242 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2200      	movs	r2, #0
 801123e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d003      	beq.n	8011250 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	68ba      	ldr	r2, [r7, #8]
 801124c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2201      	movs	r2, #1
 8011254:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	79fa      	ldrb	r2, [r7, #7]
 801125c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801125e:	68f8      	ldr	r0, [r7, #12]
 8011260:	f7ff fe96 	bl	8010f90 <USBD_LL_Init>
  
  return USBD_OK; 
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop

08011270 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 801127a:	2300      	movs	r3, #0
 801127c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d006      	beq.n	8011292 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 801128c:	2300      	movs	r3, #0
 801128e:	73fb      	strb	r3, [r7, #15]
 8011290:	e001      	b.n	8011296 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8011292:	2302      	movs	r3, #2
 8011294:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8011296:	7bfb      	ldrb	r3, [r7, #15]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3714      	adds	r7, #20
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7ff fecf 	bl	8011050 <USBD_LL_Start>
  
  return USBD_OK;  
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80112c4:	2300      	movs	r3, #0
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop

080112d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80112e0:	2302      	movs	r3, #2
 80112e2:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d00c      	beq.n	8011308 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	78fa      	ldrb	r2, [r7, #3]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	4611      	mov	r1, r2
 80112fc:	4798      	blx	r3
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011304:	2300      	movs	r3, #0
 8011306:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8011308:	7bfb      	ldrb	r3, [r7, #15]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop

08011314 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	460b      	mov	r3, r1
 801131e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	78fa      	ldrb	r2, [r7, #3]
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	4611      	mov	r1, r2
 801132e:	4798      	blx	r3
  return USBD_OK;
 8011330:	2300      	movs	r3, #0
}
 8011332:	4618      	mov	r0, r3
 8011334:	3708      	adds	r7, #8
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop

0801133c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801134c:	4618      	mov	r0, r3
 801134e:	6839      	ldr	r1, [r7, #0]
 8011350:	f000 fdc8 	bl	8011ee4 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2201      	movs	r2, #1
 8011358:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8011362:	461a      	mov	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8011370:	f003 031f 	and.w	r3, r3, #31
 8011374:	2b01      	cmp	r3, #1
 8011376:	d00b      	beq.n	8011390 <USBD_LL_SetupStage+0x54>
 8011378:	2b02      	cmp	r3, #2
 801137a:	d011      	beq.n	80113a0 <USBD_LL_SetupStage+0x64>
 801137c:	2b00      	cmp	r3, #0
 801137e:	d117      	bne.n	80113b0 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	4619      	mov	r1, r3
 801138a:	f000 f9cf 	bl	801172c <USBD_StdDevReq>
    break;
 801138e:	e01a      	b.n	80113c6 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	4619      	mov	r1, r3
 801139a:	f000 fa17 	bl	80117cc <USBD_StdItfReq>
    break;
 801139e:	e012      	b.n	80113c6 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	4619      	mov	r1, r3
 80113aa:	f000 fa43 	bl	8011834 <USBD_StdEPReq>
    break;
 80113ae:	e00a      	b.n	80113c6 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80113b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	4619      	mov	r1, r3
 80113c0:	f7ff fe7e 	bl	80110c0 <USBD_LL_StallEP>
    break;
 80113c4:	bf00      	nop
  }  
  return USBD_OK;  
 80113c6:	2300      	movs	r3, #0
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3708      	adds	r7, #8
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}

080113d0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b086      	sub	sp, #24
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	460b      	mov	r3, r1
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80113de:	7afb      	ldrb	r3, [r7, #11]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d138      	bne.n	8011456 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80113ea:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80113f2:	2b03      	cmp	r3, #3
 80113f4:	d142      	bne.n	801147c <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	689a      	ldr	r2, [r3, #8]
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d914      	bls.n	801142c <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	689a      	ldr	r2, [r3, #8]
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	1ad2      	subs	r2, r2, r3
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	68da      	ldr	r2, [r3, #12]
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	429a      	cmp	r2, r3
 801141a:	bf38      	it	cc
 801141c:	4613      	movcc	r3, r2
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 801141e:	b29b      	uxth	r3, r3
 8011420:	68f8      	ldr	r0, [r7, #12]
 8011422:	6879      	ldr	r1, [r7, #4]
 8011424:	461a      	mov	r2, r3
 8011426:	f000 ff57 	bl	80122d8 <USBD_CtlContinueRx>
 801142a:	e027      	b.n	801147c <USBD_LL_DataOutStage+0xac>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011432:	691b      	ldr	r3, [r3, #16]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00a      	beq.n	801144e <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 801143e:	2b03      	cmp	r3, #3
 8011440:	d105      	bne.n	801144e <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801144e:	68f8      	ldr	r0, [r7, #12]
 8011450:	f000 ff54 	bl	80122fc <USBD_CtlSendStatus>
 8011454:	e012      	b.n	801147c <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801145c:	699b      	ldr	r3, [r3, #24]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d00c      	beq.n	801147c <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8011468:	2b03      	cmp	r3, #3
 801146a:	d107      	bne.n	801147c <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	7afa      	ldrb	r2, [r7, #11]
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	4611      	mov	r1, r2
 801147a:	4798      	blx	r3
  }  
  return USBD_OK;
 801147c:	2300      	movs	r3, #0
}
 801147e:	4618      	mov	r0, r3
 8011480:	3718      	adds	r7, #24
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop

08011488 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	460b      	mov	r3, r1
 8011492:	607a      	str	r2, [r7, #4]
 8011494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8011496:	7afb      	ldrb	r3, [r7, #11]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d16c      	bne.n	8011576 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	3314      	adds	r3, #20
 80114a0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	d157      	bne.n	801155c <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	689a      	ldr	r2, [r3, #8]
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d915      	bls.n	80114e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	689a      	ldr	r2, [r3, #8]
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	1ad2      	subs	r2, r2, r3
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	689b      	ldr	r3, [r3, #8]
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
        
        USBD_CtlContinueSendData (pdev, 
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	68f8      	ldr	r0, [r7, #12]
 80114ce:	6879      	ldr	r1, [r7, #4]
 80114d0:	461a      	mov	r2, r3
 80114d2:	f000 fed1 	bl	8012278 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80114d6:	68f8      	ldr	r0, [r7, #12]
 80114d8:	2100      	movs	r1, #0
 80114da:	2200      	movs	r2, #0
 80114dc:	2300      	movs	r3, #0
 80114de:	f7ff fe6f 	bl	80111c0 <USBD_LL_PrepareReceive>
 80114e2:	e03b      	b.n	801155c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	697a      	ldr	r2, [r7, #20]
 80114ea:	68d2      	ldr	r2, [r2, #12]
 80114ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80114f0:	fb02 f201 	mul.w	r2, r2, r1
 80114f4:	1a9b      	subs	r3, r3, r2
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d11c      	bne.n	8011534 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	685a      	ldr	r2, [r3, #4]
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	68db      	ldr	r3, [r3, #12]
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8011502:	429a      	cmp	r2, r3
 8011504:	d316      	bcc.n	8011534 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	685a      	ldr	r2, [r3, #4]
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 8011510:	429a      	cmp	r2, r3
 8011512:	d20f      	bcs.n	8011534 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	2100      	movs	r1, #0
 8011518:	2200      	movs	r2, #0
 801151a:	f000 fead 	bl	8012278 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2200      	movs	r2, #0
 8011522:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8011526:	68f8      	ldr	r0, [r7, #12]
 8011528:	2100      	movs	r1, #0
 801152a:	2200      	movs	r2, #0
 801152c:	2300      	movs	r3, #0
 801152e:	f7ff fe47 	bl	80111c0 <USBD_LL_PrepareReceive>
 8011532:	e013      	b.n	801155c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d00a      	beq.n	8011556 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011546:	2b03      	cmp	r3, #3
 8011548:	d105      	bne.n	8011556 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011550:	68db      	ldr	r3, [r3, #12]
 8011552:	68f8      	ldr	r0, [r7, #12]
 8011554:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f000 fee4 	bl	8012324 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011562:	2b01      	cmp	r3, #1
 8011564:	d11a      	bne.n	801159c <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8011566:	68f8      	ldr	r0, [r7, #12]
 8011568:	f7ff fea8 	bl	80112bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	2200      	movs	r2, #0
 8011570:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8011574:	e012      	b.n	801159c <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801157c:	695b      	ldr	r3, [r3, #20]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d00c      	beq.n	801159c <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8011588:	2b03      	cmp	r3, #3
 801158a:	d107      	bne.n	801159c <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011592:	695b      	ldr	r3, [r3, #20]
 8011594:	7afa      	ldrb	r2, [r7, #11]
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	4611      	mov	r1, r2
 801159a:	4798      	blx	r3
  }  
  return USBD_OK;
 801159c:	2300      	movs	r3, #0
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3718      	adds	r7, #24
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
 80115a6:	bf00      	nop

080115a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	2100      	movs	r1, #0
 80115b4:	2200      	movs	r2, #0
 80115b6:	2340      	movs	r3, #64	; 0x40
 80115b8:	f7ff fd5a 	bl	8011070 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2240      	movs	r2, #64	; 0x40
 80115c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	2180      	movs	r1, #128	; 0x80
 80115c8:	2200      	movs	r2, #0
 80115ca:	2340      	movs	r3, #64	; 0x40
 80115cc:	f7ff fd50 	bl	8011070 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2240      	movs	r2, #64	; 0x40
 80115d4:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2201      	movs	r2, #1
 80115da:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d009      	beq.n	80115fc <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	6852      	ldr	r2, [r2, #4]
 80115f4:	b2d2      	uxtb	r2, r2
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	4611      	mov	r1, r2
 80115fa:	4798      	blx	r3
 
  
  return USBD_OK;
 80115fc:	2300      	movs	r3, #0
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3708      	adds	r7, #8
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop

08011608 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	460b      	mov	r3, r1
 8011612:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	78fa      	ldrb	r2, [r7, #3]
 8011618:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 801161a:	2300      	movs	r3, #0
}
 801161c:	4618      	mov	r0, r3
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr

08011628 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2204      	movs	r2, #4
 8011640:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	370c      	adds	r7, #12
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop

08011654 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8011668:	2300      	movs	r3, #0
}
 801166a:	4618      	mov	r0, r3
 801166c:	370c      	adds	r7, #12
 801166e:	46bd      	mov	sp, r7
 8011670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop

08011678 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011686:	2b03      	cmp	r3, #3
 8011688:	d10b      	bne.n	80116a2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011690:	69db      	ldr	r3, [r3, #28]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d005      	beq.n	80116a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801169c:	69db      	ldr	r3, [r3, #28]
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80116a2:	2300      	movs	r3, #0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	460b      	mov	r3, r1
 80116b6:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	370c      	adds	r7, #12
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop

080116c8 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b083      	sub	sp, #12
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	370c      	adds	r7, #12
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop

080116e4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b083      	sub	sp, #12
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	370c      	adds	r7, #12
 80116f2:	46bd      	mov	sp, r7
 80116f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f8:	4770      	bx	lr
 80116fa:	bf00      	nop

080116fc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2201      	movs	r2, #1
 8011708:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	6852      	ldr	r2, [r2, #4]
 8011718:	b2d2      	uxtb	r2, r2
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	4611      	mov	r1, r2
 801171e:	4798      	blx	r3
   
  return USBD_OK;
 8011720:	2300      	movs	r3, #0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop

0801172c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8011736:	2300      	movs	r3, #0
 8011738:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	785b      	ldrb	r3, [r3, #1]
 801173e:	2b09      	cmp	r3, #9
 8011740:	d839      	bhi.n	80117b6 <USBD_StdDevReq+0x8a>
 8011742:	a201      	add	r2, pc, #4	; (adr r2, 8011748 <USBD_StdDevReq+0x1c>)
 8011744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011748:	08011799 	.word	0x08011799
 801174c:	080117ad 	.word	0x080117ad
 8011750:	080117b7 	.word	0x080117b7
 8011754:	080117a3 	.word	0x080117a3
 8011758:	080117b7 	.word	0x080117b7
 801175c:	0801177b 	.word	0x0801177b
 8011760:	08011771 	.word	0x08011771
 8011764:	080117b7 	.word	0x080117b7
 8011768:	0801178f 	.word	0x0801178f
 801176c:	08011785 	.word	0x08011785
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	6839      	ldr	r1, [r7, #0]
 8011774:	f000 f936 	bl	80119e4 <USBD_GetDescriptor>
    break;
 8011778:	e022      	b.n	80117c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	f000 fa2d 	bl	8011bdc <USBD_SetAddress>
    break;
 8011782:	e01d      	b.n	80117c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	6839      	ldr	r1, [r7, #0]
 8011788:	f000 fa66 	bl	8011c58 <USBD_SetConfig>
    break;
 801178c:	e018      	b.n	80117c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	6839      	ldr	r1, [r7, #0]
 8011792:	f000 fb09 	bl	8011da8 <USBD_GetConfig>
    break;
 8011796:	e013      	b.n	80117c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	6839      	ldr	r1, [r7, #0]
 801179c:	f000 fb36 	bl	8011e0c <USBD_GetStatus>
    break;
 80117a0:	e00e      	b.n	80117c0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	6839      	ldr	r1, [r7, #0]
 80117a6:	f000 fb5b 	bl	8011e60 <USBD_SetFeature>
    break;
 80117aa:	e009      	b.n	80117c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	6839      	ldr	r1, [r7, #0]
 80117b0:	f000 fb70 	bl	8011e94 <USBD_ClrFeature>
    break;
 80117b4:	e004      	b.n	80117c0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	6839      	ldr	r1, [r7, #0]
 80117ba:	f000 fbcd 	bl	8011f58 <USBD_CtlError>
    break;
 80117be:	bf00      	nop
  }
  
  return ret;
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop

080117cc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80117d6:	2300      	movs	r3, #0
 80117d8:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80117e0:	2b03      	cmp	r3, #3
 80117e2:	d11c      	bne.n	801181e <USBD_StdItfReq+0x52>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	889b      	ldrh	r3, [r3, #4]
 80117e8:	b2db      	uxtb	r3, r3
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d811      	bhi.n	8011812 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80117f4:	689b      	ldr	r3, [r3, #8]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	6839      	ldr	r1, [r7, #0]
 80117fa:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	88db      	ldrh	r3, [r3, #6]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d10b      	bne.n	801181c <USBD_StdItfReq+0x50>
 8011804:	7bfb      	ldrb	r3, [r7, #15]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d108      	bne.n	801181c <USBD_StdItfReq+0x50>
      {
         USBD_CtlSendStatus(pdev);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 fd76 	bl	80122fc <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8011810:	e00a      	b.n	8011828 <USBD_StdItfReq+0x5c>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	6839      	ldr	r1, [r7, #0]
 8011816:	f000 fb9f 	bl	8011f58 <USBD_CtlError>
    }
    break;
 801181a:	e005      	b.n	8011828 <USBD_StdItfReq+0x5c>
 801181c:	e004      	b.n	8011828 <USBD_StdItfReq+0x5c>
    
  default:
     USBD_CtlError(pdev , req);
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	6839      	ldr	r1, [r7, #0]
 8011822:	f000 fb99 	bl	8011f58 <USBD_CtlError>
    break;
 8011826:	bf00      	nop
  }
  return USBD_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop

08011834 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 801183e:	2300      	movs	r3, #0
 8011840:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	889b      	ldrh	r3, [r3, #4]
 8011846:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011850:	2b20      	cmp	r3, #32
 8011852:	d108      	bne.n	8011866 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801185a:	689b      	ldr	r3, [r3, #8]
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	6839      	ldr	r1, [r7, #0]
 8011860:	4798      	blx	r3
    
    return USBD_OK;
 8011862:	2300      	movs	r3, #0
 8011864:	e0b9      	b.n	80119da <USBD_StdEPReq+0x1a6>
  }
  
  switch (req->bRequest) 
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	785b      	ldrb	r3, [r3, #1]
 801186a:	2b01      	cmp	r3, #1
 801186c:	d039      	beq.n	80118e2 <USBD_StdEPReq+0xae>
 801186e:	2b03      	cmp	r3, #3
 8011870:	d002      	beq.n	8011878 <USBD_StdEPReq+0x44>
 8011872:	2b00      	cmp	r3, #0
 8011874:	d06a      	beq.n	801194c <USBD_StdEPReq+0x118>
      break;
    }
    break;
    
  default:
    break;
 8011876:	e0af      	b.n	80119d8 <USBD_StdEPReq+0x1a4>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801187e:	2b02      	cmp	r3, #2
 8011880:	d002      	beq.n	8011888 <USBD_StdEPReq+0x54>
 8011882:	2b03      	cmp	r3, #3
 8011884:	d00d      	beq.n	80118a2 <USBD_StdEPReq+0x6e>
 8011886:	e026      	b.n	80118d6 <USBD_StdEPReq+0xa2>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8011888:	7bbb      	ldrb	r3, [r7, #14]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d008      	beq.n	80118a0 <USBD_StdEPReq+0x6c>
 801188e:	7bbb      	ldrb	r3, [r7, #14]
 8011890:	2b80      	cmp	r3, #128	; 0x80
 8011892:	d005      	beq.n	80118a0 <USBD_StdEPReq+0x6c>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8011894:	7bbb      	ldrb	r3, [r7, #14]
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	4619      	mov	r1, r3
 801189a:	f7ff fc11 	bl	80110c0 <USBD_LL_StallEP>
      }
      break;	
 801189e:	e01f      	b.n	80118e0 <USBD_StdEPReq+0xac>
 80118a0:	e01e      	b.n	80118e0 <USBD_StdEPReq+0xac>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	885b      	ldrh	r3, [r3, #2]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d10a      	bne.n	80118c0 <USBD_StdEPReq+0x8c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80118aa:	7bbb      	ldrb	r3, [r7, #14]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d007      	beq.n	80118c0 <USBD_StdEPReq+0x8c>
 80118b0:	7bbb      	ldrb	r3, [r7, #14]
 80118b2:	2b80      	cmp	r3, #128	; 0x80
 80118b4:	d004      	beq.n	80118c0 <USBD_StdEPReq+0x8c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 80118b6:	7bbb      	ldrb	r3, [r7, #14]
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	4619      	mov	r1, r3
 80118bc:	f7ff fc00 	bl	80110c0 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80118c6:	689b      	ldr	r3, [r3, #8]
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	6839      	ldr	r1, [r7, #0]
 80118cc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f000 fd14 	bl	80122fc <USBD_CtlSendStatus>
      
      break;
 80118d4:	e004      	b.n	80118e0 <USBD_StdEPReq+0xac>
      
    default:                         
      USBD_CtlError(pdev , req);
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	6839      	ldr	r1, [r7, #0]
 80118da:	f000 fb3d 	bl	8011f58 <USBD_CtlError>
      break;    
 80118de:	bf00      	nop
    }
    break;
 80118e0:	e07a      	b.n	80119d8 <USBD_StdEPReq+0x1a4>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80118e8:	2b02      	cmp	r3, #2
 80118ea:	d002      	beq.n	80118f2 <USBD_StdEPReq+0xbe>
 80118ec:	2b03      	cmp	r3, #3
 80118ee:	d00d      	beq.n	801190c <USBD_StdEPReq+0xd8>
 80118f0:	e026      	b.n	8011940 <USBD_StdEPReq+0x10c>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80118f2:	7bbb      	ldrb	r3, [r7, #14]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d008      	beq.n	801190a <USBD_StdEPReq+0xd6>
 80118f8:	7bbb      	ldrb	r3, [r7, #14]
 80118fa:	2b80      	cmp	r3, #128	; 0x80
 80118fc:	d005      	beq.n	801190a <USBD_StdEPReq+0xd6>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80118fe:	7bbb      	ldrb	r3, [r7, #14]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	4619      	mov	r1, r3
 8011904:	f7ff fbdc 	bl	80110c0 <USBD_LL_StallEP>
      }
      break;	
 8011908:	e01f      	b.n	801194a <USBD_StdEPReq+0x116>
 801190a:	e01e      	b.n	801194a <USBD_StdEPReq+0x116>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	885b      	ldrh	r3, [r3, #2]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d114      	bne.n	801193e <USBD_StdEPReq+0x10a>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8011914:	7bbb      	ldrb	r3, [r7, #14]
 8011916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00b      	beq.n	8011936 <USBD_StdEPReq+0x102>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 801191e:	7bbb      	ldrb	r3, [r7, #14]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	4619      	mov	r1, r3
 8011924:	f7ff fbe0 	bl	80110e8 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801192e:	689b      	ldr	r3, [r3, #8]
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	6839      	ldr	r1, [r7, #0]
 8011934:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f000 fce0 	bl	80122fc <USBD_CtlSendStatus>
      }
      break;
 801193c:	e005      	b.n	801194a <USBD_StdEPReq+0x116>
 801193e:	e004      	b.n	801194a <USBD_StdEPReq+0x116>
      
    default:                         
      USBD_CtlError(pdev , req);
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	6839      	ldr	r1, [r7, #0]
 8011944:	f000 fb08 	bl	8011f58 <USBD_CtlError>
      break;    
 8011948:	bf00      	nop
    }
    break;
 801194a:	e045      	b.n	80119d8 <USBD_StdEPReq+0x1a4>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011952:	2b02      	cmp	r3, #2
 8011954:	d002      	beq.n	801195c <USBD_StdEPReq+0x128>
 8011956:	2b03      	cmp	r3, #3
 8011958:	d00c      	beq.n	8011974 <USBD_StdEPReq+0x140>
 801195a:	e037      	b.n	80119cc <USBD_StdEPReq+0x198>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 801195c:	7bbb      	ldrb	r3, [r7, #14]
 801195e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011962:	2b00      	cmp	r3, #0
 8011964:	d005      	beq.n	8011972 <USBD_StdEPReq+0x13e>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8011966:	7bbb      	ldrb	r3, [r7, #14]
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	4619      	mov	r1, r3
 801196c:	f7ff fba8 	bl	80110c0 <USBD_LL_StallEP>
      }
      break;	
 8011970:	e031      	b.n	80119d6 <USBD_StdEPReq+0x1a2>
 8011972:	e030      	b.n	80119d6 <USBD_StdEPReq+0x1a2>
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8011974:	7bbb      	ldrb	r3, [r7, #14]
 8011976:	b25b      	sxtb	r3, r3
 8011978:	2b00      	cmp	r3, #0
 801197a:	da08      	bge.n	801198e <USBD_StdEPReq+0x15a>
 801197c:	7bbb      	ldrb	r3, [r7, #14]
 801197e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011982:	3301      	adds	r3, #1
 8011984:	011b      	lsls	r3, r3, #4
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	4413      	add	r3, r2
 801198a:	3304      	adds	r3, #4
 801198c:	e007      	b.n	801199e <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 801198e:	7bbb      	ldrb	r3, [r7, #14]
 8011990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8011994:	3310      	adds	r3, #16
 8011996:	011b      	lsls	r3, r3, #4
 8011998:	687a      	ldr	r2, [r7, #4]
 801199a:	4413      	add	r3, r2
 801199c:	3304      	adds	r3, #4
 801199e:	60bb      	str	r3, [r7, #8]
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80119a0:	7bbb      	ldrb	r3, [r7, #14]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	4619      	mov	r1, r3
 80119a6:	f7ff fbb3 	bl	8011110 <USBD_LL_IsStallEP>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d003      	beq.n	80119b8 <USBD_StdEPReq+0x184>
      {
        pep->status = 0x0001;     
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	2201      	movs	r2, #1
 80119b4:	601a      	str	r2, [r3, #0]
 80119b6:	e002      	b.n	80119be <USBD_StdEPReq+0x18a>
      }
      else
      {
        pep->status = 0x0000;  
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	2200      	movs	r2, #0
 80119bc:	601a      	str	r2, [r3, #0]
      }
      
      USBD_CtlSendData (pdev,
                        (uint8_t *)&pep->status,
 80119be:	68bb      	ldr	r3, [r7, #8]
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	4619      	mov	r1, r3
 80119c4:	2202      	movs	r2, #2
 80119c6:	f000 fc3b 	bl	8012240 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 80119ca:	e004      	b.n	80119d6 <USBD_StdEPReq+0x1a2>
      
    default:                         
      USBD_CtlError(pdev , req);
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	6839      	ldr	r1, [r7, #0]
 80119d0:	f000 fac2 	bl	8011f58 <USBD_CtlError>
      break;
 80119d4:	bf00      	nop
    }
    break;
 80119d6:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 80119d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3710      	adds	r7, #16
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	bf00      	nop

080119e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	885b      	ldrh	r3, [r3, #2]
 80119f2:	0a1b      	lsrs	r3, r3, #8
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	3b01      	subs	r3, #1
 80119f8:	2b06      	cmp	r3, #6
 80119fa:	f200 80d1 	bhi.w	8011ba0 <USBD_GetDescriptor+0x1bc>
 80119fe:	a201      	add	r2, pc, #4	; (adr r2, 8011a04 <USBD_GetDescriptor+0x20>)
 8011a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a04:	08011a21 	.word	0x08011a21
 8011a08:	08011a3b 	.word	0x08011a3b
 8011a0c:	08011a7b 	.word	0x08011a7b
 8011a10:	08011ba1 	.word	0x08011ba1
 8011a14:	08011ba1 	.word	0x08011ba1
 8011a18:	08011b4d 	.word	0x08011b4d
 8011a1c:	08011b73 	.word	0x08011b73
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	687a      	ldr	r2, [r7, #4]
 8011a2a:	7c11      	ldrb	r1, [r2, #16]
 8011a2c:	f107 020a 	add.w	r2, r7, #10
 8011a30:	4608      	mov	r0, r1
 8011a32:	4611      	mov	r1, r2
 8011a34:	4798      	blx	r3
 8011a36:	60f8      	str	r0, [r7, #12]
    break;
 8011a38:	e0b7      	b.n	8011baa <USBD_GetDescriptor+0x1c6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	7c1b      	ldrb	r3, [r3, #16]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d10d      	bne.n	8011a5e <USBD_GetDescriptor+0x7a>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a4a:	f107 020a 	add.w	r2, r7, #10
 8011a4e:	4610      	mov	r0, r2
 8011a50:	4798      	blx	r3
 8011a52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	3301      	adds	r3, #1
 8011a58:	2202      	movs	r2, #2
 8011a5a:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011a5c:	e0a5      	b.n	8011baa <USBD_GetDescriptor+0x1c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a66:	f107 020a 	add.w	r2, r7, #10
 8011a6a:	4610      	mov	r0, r2
 8011a6c:	4798      	blx	r3
 8011a6e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	3301      	adds	r3, #1
 8011a74:	2202      	movs	r2, #2
 8011a76:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011a78:	e097      	b.n	8011baa <USBD_GetDescriptor+0x1c6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	885b      	ldrh	r3, [r3, #2]
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	2b05      	cmp	r3, #5
 8011a82:	d85d      	bhi.n	8011b40 <USBD_GetDescriptor+0x15c>
 8011a84:	a201      	add	r2, pc, #4	; (adr r2, 8011a8c <USBD_GetDescriptor+0xa8>)
 8011a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a8a:	bf00      	nop
 8011a8c:	08011aa5 	.word	0x08011aa5
 8011a90:	08011abf 	.word	0x08011abf
 8011a94:	08011ad9 	.word	0x08011ad9
 8011a98:	08011af3 	.word	0x08011af3
 8011a9c:	08011b0d 	.word	0x08011b0d
 8011aa0:	08011b27 	.word	0x08011b27
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	7c11      	ldrb	r1, [r2, #16]
 8011ab0:	f107 020a 	add.w	r2, r7, #10
 8011ab4:	4608      	mov	r0, r1
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4798      	blx	r3
 8011aba:	60f8      	str	r0, [r7, #12]
      break;
 8011abc:	e045      	b.n	8011b4a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011ac4:	689b      	ldr	r3, [r3, #8]
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	7c11      	ldrb	r1, [r2, #16]
 8011aca:	f107 020a 	add.w	r2, r7, #10
 8011ace:	4608      	mov	r0, r1
 8011ad0:	4611      	mov	r1, r2
 8011ad2:	4798      	blx	r3
 8011ad4:	60f8      	str	r0, [r7, #12]
      break;
 8011ad6:	e038      	b.n	8011b4a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	7c11      	ldrb	r1, [r2, #16]
 8011ae4:	f107 020a 	add.w	r2, r7, #10
 8011ae8:	4608      	mov	r0, r1
 8011aea:	4611      	mov	r1, r2
 8011aec:	4798      	blx	r3
 8011aee:	60f8      	str	r0, [r7, #12]
      break;
 8011af0:	e02b      	b.n	8011b4a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011af8:	691b      	ldr	r3, [r3, #16]
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	7c11      	ldrb	r1, [r2, #16]
 8011afe:	f107 020a 	add.w	r2, r7, #10
 8011b02:	4608      	mov	r0, r1
 8011b04:	4611      	mov	r1, r2
 8011b06:	4798      	blx	r3
 8011b08:	60f8      	str	r0, [r7, #12]
      break;
 8011b0a:	e01e      	b.n	8011b4a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011b12:	695b      	ldr	r3, [r3, #20]
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	7c11      	ldrb	r1, [r2, #16]
 8011b18:	f107 020a 	add.w	r2, r7, #10
 8011b1c:	4608      	mov	r0, r1
 8011b1e:	4611      	mov	r1, r2
 8011b20:	4798      	blx	r3
 8011b22:	60f8      	str	r0, [r7, #12]
      break;
 8011b24:	e011      	b.n	8011b4a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011b2c:	699b      	ldr	r3, [r3, #24]
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	7c11      	ldrb	r1, [r2, #16]
 8011b32:	f107 020a 	add.w	r2, r7, #10
 8011b36:	4608      	mov	r0, r1
 8011b38:	4611      	mov	r1, r2
 8011b3a:	4798      	blx	r3
 8011b3c:	60f8      	str	r0, [r7, #12]
      break;
 8011b3e:	e004      	b.n	8011b4a <USBD_GetDescriptor+0x166>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	6839      	ldr	r1, [r7, #0]
 8011b44:	f000 fa08 	bl	8011f58 <USBD_CtlError>
      return;
 8011b48:	e044      	b.n	8011bd4 <USBD_GetDescriptor+0x1f0>
#endif   
    }
    break;
 8011b4a:	e02e      	b.n	8011baa <USBD_GetDescriptor+0x1c6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	7c1b      	ldrb	r3, [r3, #16]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d109      	bne.n	8011b68 <USBD_GetDescriptor+0x184>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b5c:	f107 020a 	add.w	r2, r7, #10
 8011b60:	4610      	mov	r0, r2
 8011b62:	4798      	blx	r3
 8011b64:	60f8      	str	r0, [r7, #12]
      break;
 8011b66:	e020      	b.n	8011baa <USBD_GetDescriptor+0x1c6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	6839      	ldr	r1, [r7, #0]
 8011b6c:	f000 f9f4 	bl	8011f58 <USBD_CtlError>
      return;
 8011b70:	e030      	b.n	8011bd4 <USBD_GetDescriptor+0x1f0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	7c1b      	ldrb	r3, [r3, #16]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d10d      	bne.n	8011b96 <USBD_GetDescriptor+0x1b2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b82:	f107 020a 	add.w	r2, r7, #10
 8011b86:	4610      	mov	r0, r2
 8011b88:	4798      	blx	r3
 8011b8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	2207      	movs	r2, #7
 8011b92:	701a      	strb	r2, [r3, #0]
      break; 
 8011b94:	e009      	b.n	8011baa <USBD_GetDescriptor+0x1c6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	f000 f9dd 	bl	8011f58 <USBD_CtlError>
      return;
 8011b9e:	e019      	b.n	8011bd4 <USBD_GetDescriptor+0x1f0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	6839      	ldr	r1, [r7, #0]
 8011ba4:	f000 f9d8 	bl	8011f58 <USBD_CtlError>
    return;
 8011ba8:	e014      	b.n	8011bd4 <USBD_GetDescriptor+0x1f0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8011baa:	897b      	ldrh	r3, [r7, #10]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d011      	beq.n	8011bd4 <USBD_GetDescriptor+0x1f0>
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	88db      	ldrh	r3, [r3, #6]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00d      	beq.n	8011bd4 <USBD_GetDescriptor+0x1f0>
  {
    
    len = MIN(len , req->wLength);
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	88da      	ldrh	r2, [r3, #6]
 8011bbc:	897b      	ldrh	r3, [r7, #10]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	bf38      	it	cc
 8011bc2:	4613      	movcc	r3, r2
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8011bc8:	897b      	ldrh	r3, [r7, #10]
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	68f9      	ldr	r1, [r7, #12]
 8011bce:	461a      	mov	r2, r3
 8011bd0:	f000 fb36 	bl	8012240 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop

08011bdc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	889b      	ldrh	r3, [r3, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d12d      	bne.n	8011c4a <USBD_SetAddress+0x6e>
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	88db      	ldrh	r3, [r3, #6]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d129      	bne.n	8011c4a <USBD_SetAddress+0x6e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	885b      	ldrh	r3, [r3, #2]
 8011bfa:	b2db      	uxtb	r3, r3
 8011bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c00:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011c08:	2b03      	cmp	r3, #3
 8011c0a:	d104      	bne.n	8011c16 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	6839      	ldr	r1, [r7, #0]
 8011c10:	f000 f9a2 	bl	8011f58 <USBD_CtlError>
 8011c14:	e018      	b.n	8011c48 <USBD_SetAddress+0x6c>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	7bfa      	ldrb	r2, [r7, #15]
 8011c1a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8011c1e:	7bfb      	ldrb	r3, [r7, #15]
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	4619      	mov	r1, r3
 8011c24:	f7ff faa0 	bl	8011168 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 fb67 	bl	80122fc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8011c2e:	7bfb      	ldrb	r3, [r7, #15]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d004      	beq.n	8011c3e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2202      	movs	r2, #2
 8011c38:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
 8011c3c:	e004      	b.n	8011c48 <USBD_SetAddress+0x6c>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2201      	movs	r2, #1
 8011c42:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8011c46:	e004      	b.n	8011c52 <USBD_SetAddress+0x76>
 8011c48:	e003      	b.n	8011c52 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	6839      	ldr	r1, [r7, #0]
 8011c4e:	f000 f983 	bl	8011f58 <USBD_CtlError>
  } 
}
 8011c52:	3710      	adds	r7, #16
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	885b      	ldrh	r3, [r3, #2]
 8011c66:	b2da      	uxtb	r2, r3
 8011c68:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c70:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8011c72:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d904      	bls.n	8011c8a <USBD_SetConfig+0x32>
  {            
     USBD_CtlError(pdev , req);                              
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	6839      	ldr	r1, [r7, #0]
 8011c84:	f000 f968 	bl	8011f58 <USBD_CtlError>
 8011c88:	e08b      	b.n	8011da2 <USBD_SetConfig+0x14a>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011c90:	2b02      	cmp	r3, #2
 8011c92:	d002      	beq.n	8011c9a <USBD_SetConfig+0x42>
 8011c94:	2b03      	cmp	r3, #3
 8011c96:	d02c      	beq.n	8011cf2 <USBD_SetConfig+0x9a>
 8011c98:	e07e      	b.n	8011d98 <USBD_SetConfig+0x140>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8011c9a:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d020      	beq.n	8011cea <USBD_SetConfig+0x92>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8011ca8:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2203      	movs	r2, #3
 8011cbc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8011cc0:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	4619      	mov	r1, r3
 8011cce:	f7ff fb01 	bl	80112d4 <USBD_SetClassConfig>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b02      	cmp	r3, #2
 8011cd6:	d104      	bne.n	8011ce2 <USBD_SetConfig+0x8a>
        {
          USBD_CtlError(pdev , req);  
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	6839      	ldr	r1, [r7, #0]
 8011cdc:	f000 f93c 	bl	8011f58 <USBD_CtlError>
          return;
 8011ce0:	e05f      	b.n	8011da2 <USBD_SetConfig+0x14a>
        }
        USBD_CtlSendStatus(pdev);
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 fb0a 	bl	80122fc <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8011ce8:	e05b      	b.n	8011da2 <USBD_SetConfig+0x14a>
        }
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f000 fb06 	bl	80122fc <USBD_CtlSendStatus>
      }
      break;
 8011cf0:	e057      	b.n	8011da2 <USBD_SetConfig+0x14a>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8011cf2:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d118      	bne.n	8011d32 <USBD_SetConfig+0xda>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2202      	movs	r2, #2
 8011d04:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8011d08:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	461a      	mov	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8011d18:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	4619      	mov	r1, r3
 8011d26:	f7ff faf5 	bl	8011314 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 fae6 	bl	80122fc <USBD_CtlSendStatus>
 8011d30:	e031      	b.n	8011d96 <USBD_SetConfig+0x13e>
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8011d32:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d023      	beq.n	8011d8e <USBD_SetConfig+0x136>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	b2db      	uxtb	r3, r3
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	4619      	mov	r1, r3
 8011d50:	f7ff fae0 	bl	8011314 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8011d54:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8011d64:	f640 13ec 	movw	r3, #2540	; 0x9ec
 8011d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	4619      	mov	r1, r3
 8011d72:	f7ff faaf 	bl	80112d4 <USBD_SetClassConfig>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b02      	cmp	r3, #2
 8011d7a:	d104      	bne.n	8011d86 <USBD_SetConfig+0x12e>
        {
          USBD_CtlError(pdev , req);  
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	6839      	ldr	r1, [r7, #0]
 8011d80:	f000 f8ea 	bl	8011f58 <USBD_CtlError>
          return;
 8011d84:	e00d      	b.n	8011da2 <USBD_SetConfig+0x14a>
        }
        USBD_CtlSendStatus(pdev);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f000 fab8 	bl	80122fc <USBD_CtlSendStatus>
 8011d8c:	e003      	b.n	8011d96 <USBD_SetConfig+0x13e>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 fab4 	bl	80122fc <USBD_CtlSendStatus>
      }
      break;
 8011d94:	e005      	b.n	8011da2 <USBD_SetConfig+0x14a>
 8011d96:	e004      	b.n	8011da2 <USBD_SetConfig+0x14a>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	6839      	ldr	r1, [r7, #0]
 8011d9c:	f000 f8dc 	bl	8011f58 <USBD_CtlError>
      break;
 8011da0:	bf00      	nop
    }
  }
}
 8011da2:	3708      	adds	r7, #8
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	88db      	ldrh	r3, [r3, #6]
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d004      	beq.n	8011dc4 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	f000 f8cb 	bl	8011f58 <USBD_CtlError>
 8011dc2:	e01f      	b.n	8011e04 <USBD_GetConfig+0x5c>
  }
  else 
  {
    switch (pdev->dev_state )  
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011dca:	2b02      	cmp	r3, #2
 8011dcc:	d002      	beq.n	8011dd4 <USBD_GetConfig+0x2c>
 8011dce:	2b03      	cmp	r3, #3
 8011dd0:	d00b      	beq.n	8011dea <USBD_GetConfig+0x42>
 8011dd2:	e012      	b.n	8011dfa <USBD_GetConfig+0x52>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_default_config,
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	3308      	adds	r3, #8
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
      USBD_CtlSendData (pdev, 
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	4619      	mov	r1, r3
 8011de2:	2201      	movs	r2, #1
 8011de4:	f000 fa2c 	bl	8012240 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 8011de8:	e00c      	b.n	8011e04 <USBD_GetConfig+0x5c>
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_config,
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	3304      	adds	r3, #4
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	4619      	mov	r1, r3
 8011df2:	2201      	movs	r2, #1
 8011df4:	f000 fa24 	bl	8012240 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 8011df8:	e004      	b.n	8011e04 <USBD_GetConfig+0x5c>
      
    default:
       USBD_CtlError(pdev , req);
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	6839      	ldr	r1, [r7, #0]
 8011dfe:	f000 f8ab 	bl	8011f58 <USBD_CtlError>
      break;
 8011e02:	bf00      	nop
    }
  }
}
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop

08011e0c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011e1c:	3b02      	subs	r3, #2
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d815      	bhi.n	8011e4e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2201      	movs	r2, #1
 8011e26:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d005      	beq.n	8011e3e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	f043 0202 	orr.w	r2, r3, #2
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	330c      	adds	r3, #12
    if (pdev->dev_remote_wakeup) 
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
    }
    
    USBD_CtlSendData (pdev, 
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	4619      	mov	r1, r3
 8011e46:	2202      	movs	r2, #2
 8011e48:	f000 f9fa 	bl	8012240 <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 8011e4c:	e004      	b.n	8011e58 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	6839      	ldr	r1, [r7, #0]
 8011e52:	f000 f881 	bl	8011f58 <USBD_CtlError>
    break;
 8011e56:	bf00      	nop
  }
}
 8011e58:	3708      	adds	r7, #8
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop

08011e60 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	885b      	ldrh	r3, [r3, #2]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d10d      	bne.n	8011e8e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2201      	movs	r2, #1
 8011e76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f000 fa37 	bl	80122fc <USBD_CtlSendStatus>
  }

}
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011ea4:	3b02      	subs	r3, #2
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d813      	bhi.n	8011ed2 <USBD_ClrFeature+0x3e>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	885b      	ldrh	r3, [r3, #2]
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d10e      	bne.n	8011ed0 <USBD_ClrFeature+0x3c>
    {
      pdev->dev_remote_wakeup = 0; 
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011ec0:	689b      	ldr	r3, [r3, #8]
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	6839      	ldr	r1, [r7, #0]
 8011ec6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 fa17 	bl	80122fc <USBD_CtlSendStatus>
    }
    break;
 8011ece:	e005      	b.n	8011edc <USBD_ClrFeature+0x48>
 8011ed0:	e004      	b.n	8011edc <USBD_ClrFeature+0x48>
    
  default :
     USBD_CtlError(pdev , req);
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	6839      	ldr	r1, [r7, #0]
 8011ed6:	f000 f83f 	bl	8011f58 <USBD_CtlError>
    break;
 8011eda:	bf00      	nop
  }
}
 8011edc:	3708      	adds	r7, #8
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop

08011ee4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	781a      	ldrb	r2, [r3, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	785a      	ldrb	r2, [r3, #1]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	3302      	adds	r3, #2
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	461a      	mov	r2, r3
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	3303      	adds	r3, #3
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	021b      	lsls	r3, r3, #8
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	4413      	add	r3, r2
 8011f12:	b29a      	uxth	r2, r3
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	3304      	adds	r3, #4
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	461a      	mov	r2, r3
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	3305      	adds	r3, #5
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	021b      	lsls	r3, r3, #8
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	4413      	add	r3, r2
 8011f2c:	b29a      	uxth	r2, r3
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	3306      	adds	r3, #6
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	3307      	adds	r3, #7
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	021b      	lsls	r3, r3, #8
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	4413      	add	r3, r2
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	80da      	strh	r2, [r3, #6]

}
 8011f4c:	370c      	adds	r7, #12
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr
 8011f56:	bf00      	nop

08011f58 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	2180      	movs	r1, #128	; 0x80
 8011f66:	f7ff f8ab 	bl	80110c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	f7ff f8a7 	bl	80110c0 <USBD_LL_StallEP>
}
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b086      	sub	sp, #24
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8011f84:	2300      	movs	r3, #0
 8011f86:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d02f      	beq.n	8011fee <USBD_GetString+0x76>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8011f8e:	68f8      	ldr	r0, [r7, #12]
 8011f90:	f000 f830 	bl	8011ff4 <USBD_GetLen>
 8011f94:	4603      	mov	r3, r0
 8011f96:	3301      	adds	r3, #1
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	005b      	lsls	r3, r3, #1
 8011f9c:	b29a      	uxth	r2, r3
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8011fa2:	7dfb      	ldrb	r3, [r7, #23]
 8011fa4:	1c5a      	adds	r2, r3, #1
 8011fa6:	75fa      	strb	r2, [r7, #23]
 8011fa8:	68ba      	ldr	r2, [r7, #8]
 8011faa:	4413      	add	r3, r2
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	8812      	ldrh	r2, [r2, #0]
 8011fb0:	b2d2      	uxtb	r2, r2
 8011fb2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8011fb4:	7dfb      	ldrb	r3, [r7, #23]
 8011fb6:	1c5a      	adds	r2, r3, #1
 8011fb8:	75fa      	strb	r2, [r7, #23]
 8011fba:	68ba      	ldr	r2, [r7, #8]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	2203      	movs	r2, #3
 8011fc0:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8011fc2:	e010      	b.n	8011fe6 <USBD_GetString+0x6e>
    {
      unicode[idx++] = *desc++;
 8011fc4:	7dfb      	ldrb	r3, [r7, #23]
 8011fc6:	1c5a      	adds	r2, r3, #1
 8011fc8:	75fa      	strb	r2, [r7, #23]
 8011fca:	68ba      	ldr	r2, [r7, #8]
 8011fcc:	441a      	add	r2, r3
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	1c59      	adds	r1, r3, #1
 8011fd2:	60f9      	str	r1, [r7, #12]
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8011fd8:	7dfb      	ldrb	r3, [r7, #23]
 8011fda:	1c5a      	adds	r2, r3, #1
 8011fdc:	75fa      	strb	r2, [r7, #23]
 8011fde:	68ba      	ldr	r2, [r7, #8]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d1ea      	bne.n	8011fc4 <USBD_GetString+0x4c>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8011fee:	3718      	adds	r7, #24
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}

08011ff4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8012000:	e005      	b.n	801200e <USBD_GetLen+0x1a>
    {
        len++;
 8012002:	7bfb      	ldrb	r3, [r7, #15]
 8012004:	3301      	adds	r3, #1
 8012006:	73fb      	strb	r3, [r7, #15]
        buf++;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	3301      	adds	r3, #1
 801200c:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d1f5      	bne.n	8012002 <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 8012016:	7bfb      	ldrb	r3, [r7, #15]
}
 8012018:	4618      	mov	r0, r3
 801201a:	3714      	adds	r7, #20
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <USBD_VCP_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	4603      	mov	r3, r0
 801202c:	6039      	str	r1, [r7, #0]
 801202e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(hUSBDDeviceDesc);
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	2212      	movs	r2, #18
 8012034:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)hUSBDDeviceDesc;
 8012036:	f642 4340 	movw	r3, #11328	; 0x2c40
 801203a:	f6c0 0301 	movt	r3, #2049	; 0x801
}
 801203e:	4618      	mov	r0, r3
 8012040:	370c      	adds	r7, #12
 8012042:	46bd      	mov	sp, r7
 8012044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop

0801204c <USBD_VCP_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801204c:	b480      	push	{r7}
 801204e:	b083      	sub	sp, #12
 8012050:	af00      	add	r7, sp, #0
 8012052:	4603      	mov	r3, r0
 8012054:	6039      	str	r1, [r7, #0]
 8012056:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	2204      	movs	r2, #4
 801205c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 801205e:	f642 4354 	movw	r3, #11348	; 0x2c54
 8012062:	f6c0 0301 	movt	r3, #2049	; 0x801
}
 8012066:	4618      	mov	r0, r3
 8012068:	370c      	adds	r7, #12
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop

08012074 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	4603      	mov	r3, r0
 801207c:	6039      	str	r1, [r7, #0]
 801207e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8012080:	f642 30a4 	movw	r0, #11172	; 0x2ba4
 8012084:	f6c0 0001 	movt	r0, #2049	; 0x801
 8012088:	f242 0174 	movw	r1, #8308	; 0x2074
 801208c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8012090:	683a      	ldr	r2, [r7, #0]
 8012092:	f7ff ff71 	bl	8011f78 <USBD_GetString>
  return USBD_StrDesc;
 8012096:	f242 0374 	movw	r3, #8308	; 0x2074
 801209a:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3708      	adds	r7, #8
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop

080120a8 <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	4603      	mov	r3, r0
 80120b0:	6039      	str	r1, [r7, #0]
 80120b2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80120b4:	f642 30c8 	movw	r0, #11208	; 0x2bc8
 80120b8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80120bc:	f242 0174 	movw	r1, #8308	; 0x2074
 80120c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80120c4:	683a      	ldr	r2, [r7, #0]
 80120c6:	f7ff ff57 	bl	8011f78 <USBD_GetString>
  return USBD_StrDesc;
 80120ca:	f242 0374 	movw	r3, #8308	; 0x2074
 80120ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3708      	adds	r7, #8
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop

080120dc <USBD_VCP_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	4603      	mov	r3, r0
 80120e4:	6039      	str	r1, [r7, #0]
 80120e6:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	221a      	movs	r2, #26
 80120ec:	801a      	strh	r2, [r3, #0]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80120ee:	f000 f83d 	bl	801216c <Get_SerialNum>
  
  return USBD_StringSerial;
 80120f2:	f240 1348 	movw	r3, #328	; 0x148
 80120f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop

08012104 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	4603      	mov	r3, r0
 801210c:	6039      	str	r1, [r7, #0]
 801210e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8012110:	f642 30dc 	movw	r0, #11228	; 0x2bdc
 8012114:	f6c0 0001 	movt	r0, #2049	; 0x801
 8012118:	f242 0174 	movw	r1, #8308	; 0x2074
 801211c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8012120:	683a      	ldr	r2, [r7, #0]
 8012122:	f7ff ff29 	bl	8011f78 <USBD_GetString>
  return USBD_StrDesc;  
 8012126:	f242 0374 	movw	r3, #8308	; 0x2074
 801212a:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 801212e:	4618      	mov	r0, r3
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop

08012138 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	4603      	mov	r3, r0
 8012140:	6039      	str	r1, [r7, #0]
 8012142:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8012144:	f642 30e8 	movw	r0, #11240	; 0x2be8
 8012148:	f6c0 0001 	movt	r0, #2049	; 0x801
 801214c:	f242 0174 	movw	r1, #8308	; 0x2074
 8012150:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8012154:	683a      	ldr	r2, [r7, #0]
 8012156:	f7ff ff0f 	bl	8011f78 <USBD_GetString>
  return USBD_StrDesc;  
 801215a:	f242 0374 	movw	r3, #8308	; 0x2074
 801215e:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8012162:	4618      	mov	r0, r3
 8012164:	3708      	adds	r7, #8
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop

0801216c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8012172:	f24f 73e8 	movw	r3, #63464	; 0xf7e8
 8012176:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 801217e:	f24f 73ec 	movw	r3, #63468	; 0xf7ec
 8012182:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 801218a:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
 801218e:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	607b      	str	r3, [r7, #4]
  
  deviceserial0 += deviceserial2;
 8012196:	68fa      	ldr	r2, [r7, #12]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	4413      	add	r3, r2
 801219c:	60fb      	str	r3, [r7, #12]
  
  if (deviceserial0 != 0)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d009      	beq.n	80121b8 <Get_SerialNum+0x4c>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	4906      	ldr	r1, [pc, #24]	; (80121c0 <Get_SerialNum+0x54>)
 80121a8:	2208      	movs	r2, #8
 80121aa:	f000 f80d 	bl	80121c8 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80121ae:	68b8      	ldr	r0, [r7, #8]
 80121b0:	4904      	ldr	r1, [pc, #16]	; (80121c4 <Get_SerialNum+0x58>)
 80121b2:	2204      	movs	r2, #4
 80121b4:	f000 f808 	bl	80121c8 <IntToUnicode>
  }
}
 80121b8:	3710      	adds	r7, #16
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	2000014a 	.word	0x2000014a
 80121c4:	2000015a 	.word	0x2000015a

080121c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b087      	sub	sp, #28
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	4613      	mov	r3, r2
 80121d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80121d6:	2300      	movs	r3, #0
 80121d8:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 80121da:	2300      	movs	r3, #0
 80121dc:	75fb      	strb	r3, [r7, #23]
 80121de:	e025      	b.n	801222c <IntToUnicode+0x64>
  {
    if( ((value >> 28)) < 0xA )
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	0f1b      	lsrs	r3, r3, #28
 80121e4:	2b09      	cmp	r3, #9
 80121e6:	d80a      	bhi.n	80121fe <IntToUnicode+0x36>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80121e8:	7dfb      	ldrb	r3, [r7, #23]
 80121ea:	005b      	lsls	r3, r3, #1
 80121ec:	68ba      	ldr	r2, [r7, #8]
 80121ee:	4413      	add	r3, r2
 80121f0:	68fa      	ldr	r2, [r7, #12]
 80121f2:	0f12      	lsrs	r2, r2, #28
 80121f4:	b2d2      	uxtb	r2, r2
 80121f6:	3230      	adds	r2, #48	; 0x30
 80121f8:	b2d2      	uxtb	r2, r2
 80121fa:	701a      	strb	r2, [r3, #0]
 80121fc:	e009      	b.n	8012212 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80121fe:	7dfb      	ldrb	r3, [r7, #23]
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	68ba      	ldr	r2, [r7, #8]
 8012204:	4413      	add	r3, r2
 8012206:	68fa      	ldr	r2, [r7, #12]
 8012208:	0f12      	lsrs	r2, r2, #28
 801220a:	b2d2      	uxtb	r2, r2
 801220c:	3237      	adds	r2, #55	; 0x37
 801220e:	b2d2      	uxtb	r2, r2
 8012210:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	011b      	lsls	r3, r3, #4
 8012216:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 8012218:	7dfb      	ldrb	r3, [r7, #23]
 801221a:	005b      	lsls	r3, r3, #1
 801221c:	3301      	adds	r3, #1
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	4413      	add	r3, r2
 8012222:	2200      	movs	r2, #0
 8012224:	701a      	strb	r2, [r3, #0]
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8012226:	7dfb      	ldrb	r3, [r7, #23]
 8012228:	3301      	adds	r3, #1
 801222a:	75fb      	strb	r3, [r7, #23]
 801222c:	7dfa      	ldrb	r2, [r7, #23]
 801222e:	79fb      	ldrb	r3, [r7, #7]
 8012230:	429a      	cmp	r2, r3
 8012232:	d3d5      	bcc.n	80121e0 <IntToUnicode+0x18>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8012234:	371c      	adds	r7, #28
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop

08012240 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	4613      	mov	r3, r2
 801224c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	2202      	movs	r2, #2
 8012252:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8012256:	88fa      	ldrh	r2, [r7, #6]
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 801225c:	88fa      	ldrh	r2, [r7, #6]
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8012262:	88fb      	ldrh	r3, [r7, #6]
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	2100      	movs	r1, #0
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	f7fe ff91 	bl	8011190 <USBD_LL_Transmit>
  
  return USBD_OK;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	4613      	mov	r3, r2
 8012284:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8012286:	88fb      	ldrh	r3, [r7, #6]
 8012288:	68f8      	ldr	r0, [r7, #12]
 801228a:	2100      	movs	r1, #0
 801228c:	68ba      	ldr	r2, [r7, #8]
 801228e:	f7fe ff7f 	bl	8011190 <USBD_LL_Transmit>
  
  return USBD_OK;
 8012292:	2300      	movs	r3, #0
}
 8012294:	4618      	mov	r0, r3
 8012296:	3710      	adds	r7, #16
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b084      	sub	sp, #16
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	4613      	mov	r3, r2
 80122a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2203      	movs	r2, #3
 80122ae:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80122b2:	88fa      	ldrh	r2, [r7, #6]
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80122ba:	88fa      	ldrh	r2, [r7, #6]
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80122c2:	88fb      	ldrh	r3, [r7, #6]
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	2100      	movs	r1, #0
 80122c8:	68ba      	ldr	r2, [r7, #8]
 80122ca:	f7fe ff79 	bl	80111c0 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80122ce:	2300      	movs	r3, #0
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3710      	adds	r7, #16
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}

080122d8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	4613      	mov	r3, r2
 80122e4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80122e6:	88fb      	ldrh	r3, [r7, #6]
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	2100      	movs	r1, #0
 80122ec:	68ba      	ldr	r2, [r7, #8]
 80122ee:	f7fe ff67 	bl	80111c0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80122f2:	2300      	movs	r3, #0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3710      	adds	r7, #16
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2204      	movs	r2, #4
 8012308:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	2100      	movs	r1, #0
 8012310:	2200      	movs	r2, #0
 8012312:	2300      	movs	r3, #0
 8012314:	f7fe ff3c 	bl	8011190 <USBD_LL_Transmit>
  
  return USBD_OK;
 8012318:	2300      	movs	r3, #0
}
 801231a:	4618      	mov	r0, r3
 801231c:	3708      	adds	r7, #8
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop

08012324 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b082      	sub	sp, #8
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2205      	movs	r2, #5
 8012330:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	2100      	movs	r1, #0
 8012338:	2200      	movs	r2, #0
 801233a:	2300      	movs	r3, #0
 801233c:	f7fe ff40 	bl	80111c0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8012340:	2300      	movs	r3, #0
}
 8012342:	4618      	mov	r0, r3
 8012344:	3708      	adds	r7, #8
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop

0801234c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 801234c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 801234e:	e003      	b.n	8012358 <LoopCopyDataInit>

08012350 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8012350:	4b0a      	ldr	r3, [pc, #40]	; (801237c <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8012352:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8012354:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8012356:	3104      	adds	r1, #4

08012358 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8012358:	4809      	ldr	r0, [pc, #36]	; (8012380 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 801235a:	4b0a      	ldr	r3, [pc, #40]	; (8012384 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 801235c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 801235e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8012360:	d3f6      	bcc.n	8012350 <CopyDataInit>
  ldr r2, =_sbss
 8012362:	4a09      	ldr	r2, [pc, #36]	; (8012388 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8012364:	e002      	b.n	801236c <LoopFillZerobss>

08012366 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8012366:	2300      	movs	r3, #0
  str r3, [r2], #4
 8012368:	f842 3b04 	str.w	r3, [r2], #4

0801236c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 801236c:	4b07      	ldr	r3, [pc, #28]	; (801238c <LoopFillZerobss+0x20>)
  cmp r2, r3
 801236e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8012370:	d3f9      	bcc.n	8012366 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8012372:	f7fd fef1 	bl	8010158 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8012376:	f7fd fca5 	bl	800fcc4 <main>
  bx lr
 801237a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 801237c:	08012c5c 	.word	0x08012c5c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8012380:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8012384:	200009a4 	.word	0x200009a4
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8012388:	200009a4 	.word	0x200009a4
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 801238c:	20002178 	.word	0x20002178

08012390 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8012390:	e7fe      	b.n	8012390 <ADC1_2_IRQHandler>
	...

08012394 <malloc>:
 8012394:	f640 13a0 	movw	r3, #2464	; 0x9a0
 8012398:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801239c:	4601      	mov	r1, r0
 801239e:	6818      	ldr	r0, [r3, #0]
 80123a0:	f000 b808 	b.w	80123b4 <_malloc_r>

080123a4 <free>:
 80123a4:	f640 13a0 	movw	r3, #2464	; 0x9a0
 80123a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123ac:	4601      	mov	r1, r0
 80123ae:	6818      	ldr	r0, [r3, #0]
 80123b0:	f000 bb1c 	b.w	80129ec <_free_r>

080123b4 <_malloc_r>:
 80123b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b8:	f101 050b 	add.w	r5, r1, #11
 80123bc:	2d16      	cmp	r5, #22
 80123be:	bf87      	ittee	hi
 80123c0:	f025 0507 	bichi.w	r5, r5, #7
 80123c4:	0feb      	lsrhi	r3, r5, #31
 80123c6:	2300      	movls	r3, #0
 80123c8:	2510      	movls	r5, #16
 80123ca:	428d      	cmp	r5, r1
 80123cc:	bf2c      	ite	cs
 80123ce:	4619      	movcs	r1, r3
 80123d0:	f043 0101 	orrcc.w	r1, r3, #1
 80123d4:	b083      	sub	sp, #12
 80123d6:	4607      	mov	r7, r0
 80123d8:	2900      	cmp	r1, #0
 80123da:	f040 80b4 	bne.w	8012546 <_malloc_r+0x192>
 80123de:	f000 fa9b 	bl	8012918 <__malloc_lock>
 80123e2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80123e6:	d21f      	bcs.n	8012428 <_malloc_r+0x74>
 80123e8:	f240 1664 	movw	r6, #356	; 0x164
 80123ec:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80123f0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 80123f4:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
 80123f8:	68dc      	ldr	r4, [r3, #12]
 80123fa:	429c      	cmp	r4, r3
 80123fc:	f000 81f4 	beq.w	80127e8 <_malloc_r+0x434>
 8012400:	6863      	ldr	r3, [r4, #4]
 8012402:	68e2      	ldr	r2, [r4, #12]
 8012404:	f023 0303 	bic.w	r3, r3, #3
 8012408:	4423      	add	r3, r4
 801240a:	6858      	ldr	r0, [r3, #4]
 801240c:	68a1      	ldr	r1, [r4, #8]
 801240e:	f040 0501 	orr.w	r5, r0, #1
 8012412:	60ca      	str	r2, [r1, #12]
 8012414:	4638      	mov	r0, r7
 8012416:	6091      	str	r1, [r2, #8]
 8012418:	605d      	str	r5, [r3, #4]
 801241a:	f000 fa7f 	bl	801291c <__malloc_unlock>
 801241e:	3408      	adds	r4, #8
 8012420:	4620      	mov	r0, r4
 8012422:	b003      	add	sp, #12
 8012424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012428:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 801242c:	bf04      	itt	eq
 801242e:	217e      	moveq	r1, #126	; 0x7e
 8012430:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 8012434:	f040 808e 	bne.w	8012554 <_malloc_r+0x1a0>
 8012438:	f240 1664 	movw	r6, #356	; 0x164
 801243c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8012440:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8012444:	68cc      	ldr	r4, [r1, #12]
 8012446:	42a1      	cmp	r1, r4
 8012448:	d106      	bne.n	8012458 <_malloc_r+0xa4>
 801244a:	e00d      	b.n	8012468 <_malloc_r+0xb4>
 801244c:	2b00      	cmp	r3, #0
 801244e:	f280 8163 	bge.w	8012718 <_malloc_r+0x364>
 8012452:	68e4      	ldr	r4, [r4, #12]
 8012454:	42a1      	cmp	r1, r4
 8012456:	d007      	beq.n	8012468 <_malloc_r+0xb4>
 8012458:	6862      	ldr	r2, [r4, #4]
 801245a:	f022 0203 	bic.w	r2, r2, #3
 801245e:	1b53      	subs	r3, r2, r5
 8012460:	2b0f      	cmp	r3, #15
 8012462:	ddf3      	ble.n	801244c <_malloc_r+0x98>
 8012464:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8012468:	f10c 0c01 	add.w	ip, ip, #1
 801246c:	f240 1364 	movw	r3, #356	; 0x164
 8012470:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012474:	6934      	ldr	r4, [r6, #16]
 8012476:	f103 0e08 	add.w	lr, r3, #8
 801247a:	4574      	cmp	r4, lr
 801247c:	bf08      	it	eq
 801247e:	685a      	ldreq	r2, [r3, #4]
 8012480:	d021      	beq.n	80124c6 <_malloc_r+0x112>
 8012482:	6861      	ldr	r1, [r4, #4]
 8012484:	f021 0103 	bic.w	r1, r1, #3
 8012488:	1b4a      	subs	r2, r1, r5
 801248a:	2a0f      	cmp	r2, #15
 801248c:	f300 8190 	bgt.w	80127b0 <_malloc_r+0x3fc>
 8012490:	2a00      	cmp	r2, #0
 8012492:	f8c3 e014 	str.w	lr, [r3, #20]
 8012496:	f8c3 e010 	str.w	lr, [r3, #16]
 801249a:	da66      	bge.n	801256a <_malloc_r+0x1b6>
 801249c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80124a0:	f080 815f 	bcs.w	8012762 <_malloc_r+0x3ae>
 80124a4:	08c9      	lsrs	r1, r1, #3
 80124a6:	108a      	asrs	r2, r1, #2
 80124a8:	f04f 0801 	mov.w	r8, #1
 80124ac:	fa08 f802 	lsl.w	r8, r8, r2
 80124b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80124b4:	685a      	ldr	r2, [r3, #4]
 80124b6:	6888      	ldr	r0, [r1, #8]
 80124b8:	ea48 0202 	orr.w	r2, r8, r2
 80124bc:	60a0      	str	r0, [r4, #8]
 80124be:	60e1      	str	r1, [r4, #12]
 80124c0:	605a      	str	r2, [r3, #4]
 80124c2:	608c      	str	r4, [r1, #8]
 80124c4:	60c4      	str	r4, [r0, #12]
 80124c6:	ea4f 03ac 	mov.w	r3, ip, asr #2
 80124ca:	2001      	movs	r0, #1
 80124cc:	4098      	lsls	r0, r3
 80124ce:	4290      	cmp	r0, r2
 80124d0:	d858      	bhi.n	8012584 <_malloc_r+0x1d0>
 80124d2:	4202      	tst	r2, r0
 80124d4:	d106      	bne.n	80124e4 <_malloc_r+0x130>
 80124d6:	f02c 0c03 	bic.w	ip, ip, #3
 80124da:	0040      	lsls	r0, r0, #1
 80124dc:	4202      	tst	r2, r0
 80124de:	f10c 0c04 	add.w	ip, ip, #4
 80124e2:	d0fa      	beq.n	80124da <_malloc_r+0x126>
 80124e4:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 80124e8:	4644      	mov	r4, r8
 80124ea:	46e1      	mov	r9, ip
 80124ec:	68e3      	ldr	r3, [r4, #12]
 80124ee:	429c      	cmp	r4, r3
 80124f0:	d107      	bne.n	8012502 <_malloc_r+0x14e>
 80124f2:	e170      	b.n	80127d6 <_malloc_r+0x422>
 80124f4:	2a00      	cmp	r2, #0
 80124f6:	f280 8181 	bge.w	80127fc <_malloc_r+0x448>
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	429c      	cmp	r4, r3
 80124fe:	f000 816a 	beq.w	80127d6 <_malloc_r+0x422>
 8012502:	6859      	ldr	r1, [r3, #4]
 8012504:	f021 0103 	bic.w	r1, r1, #3
 8012508:	1b4a      	subs	r2, r1, r5
 801250a:	2a0f      	cmp	r2, #15
 801250c:	ddf2      	ble.n	80124f4 <_malloc_r+0x140>
 801250e:	461c      	mov	r4, r3
 8012510:	f854 cf08 	ldr.w	ip, [r4, #8]!
 8012514:	68d9      	ldr	r1, [r3, #12]
 8012516:	f045 0901 	orr.w	r9, r5, #1
 801251a:	f042 0801 	orr.w	r8, r2, #1
 801251e:	441d      	add	r5, r3
 8012520:	f8c3 9004 	str.w	r9, [r3, #4]
 8012524:	4638      	mov	r0, r7
 8012526:	f8cc 100c 	str.w	r1, [ip, #12]
 801252a:	f8c1 c008 	str.w	ip, [r1, #8]
 801252e:	6175      	str	r5, [r6, #20]
 8012530:	6135      	str	r5, [r6, #16]
 8012532:	f8c5 e00c 	str.w	lr, [r5, #12]
 8012536:	f8c5 e008 	str.w	lr, [r5, #8]
 801253a:	f8c5 8004 	str.w	r8, [r5, #4]
 801253e:	50aa      	str	r2, [r5, r2]
 8012540:	f000 f9ec 	bl	801291c <__malloc_unlock>
 8012544:	e76c      	b.n	8012420 <_malloc_r+0x6c>
 8012546:	230c      	movs	r3, #12
 8012548:	2400      	movs	r4, #0
 801254a:	6003      	str	r3, [r0, #0]
 801254c:	4620      	mov	r0, r4
 801254e:	b003      	add	sp, #12
 8012550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012554:	f1bc 0f04 	cmp.w	ip, #4
 8012558:	f200 80ef 	bhi.w	801273a <_malloc_r+0x386>
 801255c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8012560:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8012564:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8012568:	e766      	b.n	8012438 <_malloc_r+0x84>
 801256a:	4421      	add	r1, r4
 801256c:	684b      	ldr	r3, [r1, #4]
 801256e:	4638      	mov	r0, r7
 8012570:	f043 0301 	orr.w	r3, r3, #1
 8012574:	604b      	str	r3, [r1, #4]
 8012576:	f000 f9d1 	bl	801291c <__malloc_unlock>
 801257a:	3408      	adds	r4, #8
 801257c:	4620      	mov	r0, r4
 801257e:	b003      	add	sp, #12
 8012580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012584:	68b4      	ldr	r4, [r6, #8]
 8012586:	6863      	ldr	r3, [r4, #4]
 8012588:	f023 0903 	bic.w	r9, r3, #3
 801258c:	454d      	cmp	r5, r9
 801258e:	d804      	bhi.n	801259a <_malloc_r+0x1e6>
 8012590:	ebc5 0309 	rsb	r3, r5, r9
 8012594:	2b0f      	cmp	r3, #15
 8012596:	f300 80af 	bgt.w	80126f8 <_malloc_r+0x344>
 801259a:	f640 13f8 	movw	r3, #2552	; 0x9f8
 801259e:	f240 5a70 	movw	sl, #1392	; 0x570
 80125a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125a6:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f8da 1000 	ldr.w	r1, [sl]
 80125b0:	442b      	add	r3, r5
 80125b2:	3101      	adds	r1, #1
 80125b4:	bf1d      	ittte	ne
 80125b6:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 80125ba:	330f      	addne	r3, #15
 80125bc:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 80125c0:	f103 0c10 	addeq.w	ip, r3, #16
 80125c4:	bf18      	it	ne
 80125c6:	f023 0c0f 	bicne.w	ip, r3, #15
 80125ca:	eb04 0209 	add.w	r2, r4, r9
 80125ce:	4661      	mov	r1, ip
 80125d0:	4638      	mov	r0, r7
 80125d2:	e88d 1004 	stmia.w	sp, {r2, ip}
 80125d6:	f000 f9a3 	bl	8012920 <_sbrk_r>
 80125da:	e89d 1004 	ldmia.w	sp, {r2, ip}
 80125de:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80125e2:	4680      	mov	r8, r0
 80125e4:	f000 8120 	beq.w	8012828 <_malloc_r+0x474>
 80125e8:	4282      	cmp	r2, r0
 80125ea:	f200 811a 	bhi.w	8012822 <_malloc_r+0x46e>
 80125ee:	f640 1bfc 	movw	fp, #2556	; 0x9fc
 80125f2:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 80125f6:	f8db 3000 	ldr.w	r3, [fp]
 80125fa:	4542      	cmp	r2, r8
 80125fc:	4463      	add	r3, ip
 80125fe:	f8cb 3000 	str.w	r3, [fp]
 8012602:	f000 815f 	beq.w	80128c4 <_malloc_r+0x510>
 8012606:	f8da 0000 	ldr.w	r0, [sl]
 801260a:	f240 5170 	movw	r1, #1392	; 0x570
 801260e:	3001      	adds	r0, #1
 8012610:	bf1c      	itt	ne
 8012612:	ebc2 0208 	rsbne	r2, r2, r8
 8012616:	189b      	addne	r3, r3, r2
 8012618:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801261c:	bf0c      	ite	eq
 801261e:	f8c1 8000 	streq.w	r8, [r1]
 8012622:	f8cb 3000 	strne.w	r3, [fp]
 8012626:	f018 0307 	ands.w	r3, r8, #7
 801262a:	bf1f      	itttt	ne
 801262c:	f1c3 0208 	rsbne	r2, r3, #8
 8012630:	4490      	addne	r8, r2
 8012632:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8012636:	f103 0a08 	addne.w	sl, r3, #8
 801263a:	eb08 030c 	add.w	r3, r8, ip
 801263e:	bf08      	it	eq
 8012640:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
 8012644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012648:	ebc3 0a0a 	rsb	sl, r3, sl
 801264c:	4651      	mov	r1, sl
 801264e:	4638      	mov	r0, r7
 8012650:	f000 f966 	bl	8012920 <_sbrk_r>
 8012654:	1c43      	adds	r3, r0, #1
 8012656:	bf18      	it	ne
 8012658:	ebc8 0100 	rsbne	r1, r8, r0
 801265c:	f8db 3000 	ldr.w	r3, [fp]
 8012660:	bf15      	itete	ne
 8012662:	4451      	addne	r1, sl
 8012664:	f04f 0a00 	moveq.w	sl, #0
 8012668:	f041 0101 	orrne.w	r1, r1, #1
 801266c:	2101      	moveq	r1, #1
 801266e:	f640 12fc 	movw	r2, #2556	; 0x9fc
 8012672:	4453      	add	r3, sl
 8012674:	42b4      	cmp	r4, r6
 8012676:	f8c6 8008 	str.w	r8, [r6, #8]
 801267a:	f8cb 3000 	str.w	r3, [fp]
 801267e:	f8c8 1004 	str.w	r1, [r8, #4]
 8012682:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8012686:	d018      	beq.n	80126ba <_malloc_r+0x306>
 8012688:	f1b9 0f0f 	cmp.w	r9, #15
 801268c:	f240 80fb 	bls.w	8012886 <_malloc_r+0x4d2>
 8012690:	6861      	ldr	r1, [r4, #4]
 8012692:	f1a9 000c 	sub.w	r0, r9, #12
 8012696:	f020 0007 	bic.w	r0, r0, #7
 801269a:	f001 0101 	and.w	r1, r1, #1
 801269e:	ea40 0c01 	orr.w	ip, r0, r1
 80126a2:	f04f 0e05 	mov.w	lr, #5
 80126a6:	1821      	adds	r1, r4, r0
 80126a8:	280f      	cmp	r0, #15
 80126aa:	f8c4 c004 	str.w	ip, [r4, #4]
 80126ae:	f8c1 e004 	str.w	lr, [r1, #4]
 80126b2:	f8c1 e008 	str.w	lr, [r1, #8]
 80126b6:	f200 8111 	bhi.w	80128dc <_malloc_r+0x528>
 80126ba:	f640 12f4 	movw	r2, #2548	; 0x9f4
 80126be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80126c2:	6811      	ldr	r1, [r2, #0]
 80126c4:	68b4      	ldr	r4, [r6, #8]
 80126c6:	428b      	cmp	r3, r1
 80126c8:	bf88      	it	hi
 80126ca:	6013      	strhi	r3, [r2, #0]
 80126cc:	f640 12f0 	movw	r2, #2544	; 0x9f0
 80126d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80126d4:	6811      	ldr	r1, [r2, #0]
 80126d6:	428b      	cmp	r3, r1
 80126d8:	bf88      	it	hi
 80126da:	6013      	strhi	r3, [r2, #0]
 80126dc:	6862      	ldr	r2, [r4, #4]
 80126de:	f022 0203 	bic.w	r2, r2, #3
 80126e2:	4295      	cmp	r5, r2
 80126e4:	ebc5 0302 	rsb	r3, r5, r2
 80126e8:	d801      	bhi.n	80126ee <_malloc_r+0x33a>
 80126ea:	2b0f      	cmp	r3, #15
 80126ec:	dc04      	bgt.n	80126f8 <_malloc_r+0x344>
 80126ee:	4638      	mov	r0, r7
 80126f0:	f000 f914 	bl	801291c <__malloc_unlock>
 80126f4:	2400      	movs	r4, #0
 80126f6:	e693      	b.n	8012420 <_malloc_r+0x6c>
 80126f8:	f045 0201 	orr.w	r2, r5, #1
 80126fc:	f043 0301 	orr.w	r3, r3, #1
 8012700:	4425      	add	r5, r4
 8012702:	6062      	str	r2, [r4, #4]
 8012704:	4638      	mov	r0, r7
 8012706:	60b5      	str	r5, [r6, #8]
 8012708:	606b      	str	r3, [r5, #4]
 801270a:	f000 f907 	bl	801291c <__malloc_unlock>
 801270e:	3408      	adds	r4, #8
 8012710:	4620      	mov	r0, r4
 8012712:	b003      	add	sp, #12
 8012714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012718:	4422      	add	r2, r4
 801271a:	6850      	ldr	r0, [r2, #4]
 801271c:	68e3      	ldr	r3, [r4, #12]
 801271e:	68a1      	ldr	r1, [r4, #8]
 8012720:	f040 0501 	orr.w	r5, r0, #1
 8012724:	60cb      	str	r3, [r1, #12]
 8012726:	4638      	mov	r0, r7
 8012728:	6099      	str	r1, [r3, #8]
 801272a:	6055      	str	r5, [r2, #4]
 801272c:	f000 f8f6 	bl	801291c <__malloc_unlock>
 8012730:	3408      	adds	r4, #8
 8012732:	4620      	mov	r0, r4
 8012734:	b003      	add	sp, #12
 8012736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801273a:	f1bc 0f14 	cmp.w	ip, #20
 801273e:	bf9c      	itt	ls
 8012740:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8012744:	ea4f 014c 	movls.w	r1, ip, lsl #1
 8012748:	f67f ae76 	bls.w	8012438 <_malloc_r+0x84>
 801274c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8012750:	f200 808f 	bhi.w	8012872 <_malloc_r+0x4be>
 8012754:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 8012758:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 801275c:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8012760:	e66a      	b.n	8012438 <_malloc_r+0x84>
 8012762:	0a4b      	lsrs	r3, r1, #9
 8012764:	2b04      	cmp	r3, #4
 8012766:	d958      	bls.n	801281a <_malloc_r+0x466>
 8012768:	2b14      	cmp	r3, #20
 801276a:	bf9c      	itt	ls
 801276c:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
 8012770:	0050      	lslls	r0, r2, #1
 8012772:	d905      	bls.n	8012780 <_malloc_r+0x3cc>
 8012774:	2b54      	cmp	r3, #84	; 0x54
 8012776:	f200 80ba 	bhi.w	80128ee <_malloc_r+0x53a>
 801277a:	0b0a      	lsrs	r2, r1, #12
 801277c:	326e      	adds	r2, #110	; 0x6e
 801277e:	0050      	lsls	r0, r2, #1
 8012780:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8012784:	6883      	ldr	r3, [r0, #8]
 8012786:	f240 1864 	movw	r8, #356	; 0x164
 801278a:	4283      	cmp	r3, r0
 801278c:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8012790:	d07f      	beq.n	8012892 <_malloc_r+0x4de>
 8012792:	685a      	ldr	r2, [r3, #4]
 8012794:	f022 0203 	bic.w	r2, r2, #3
 8012798:	4291      	cmp	r1, r2
 801279a:	d202      	bcs.n	80127a2 <_malloc_r+0x3ee>
 801279c:	689b      	ldr	r3, [r3, #8]
 801279e:	4298      	cmp	r0, r3
 80127a0:	d1f7      	bne.n	8012792 <_malloc_r+0x3de>
 80127a2:	68d9      	ldr	r1, [r3, #12]
 80127a4:	6872      	ldr	r2, [r6, #4]
 80127a6:	60e1      	str	r1, [r4, #12]
 80127a8:	60a3      	str	r3, [r4, #8]
 80127aa:	608c      	str	r4, [r1, #8]
 80127ac:	60dc      	str	r4, [r3, #12]
 80127ae:	e68a      	b.n	80124c6 <_malloc_r+0x112>
 80127b0:	f045 0601 	orr.w	r6, r5, #1
 80127b4:	f042 0101 	orr.w	r1, r2, #1
 80127b8:	4425      	add	r5, r4
 80127ba:	6066      	str	r6, [r4, #4]
 80127bc:	4638      	mov	r0, r7
 80127be:	615d      	str	r5, [r3, #20]
 80127c0:	611d      	str	r5, [r3, #16]
 80127c2:	f8c5 e00c 	str.w	lr, [r5, #12]
 80127c6:	f8c5 e008 	str.w	lr, [r5, #8]
 80127ca:	6069      	str	r1, [r5, #4]
 80127cc:	50aa      	str	r2, [r5, r2]
 80127ce:	3408      	adds	r4, #8
 80127d0:	f000 f8a4 	bl	801291c <__malloc_unlock>
 80127d4:	e624      	b.n	8012420 <_malloc_r+0x6c>
 80127d6:	f109 0901 	add.w	r9, r9, #1
 80127da:	f019 0f03 	tst.w	r9, #3
 80127de:	f104 0408 	add.w	r4, r4, #8
 80127e2:	f47f ae83 	bne.w	80124ec <_malloc_r+0x138>
 80127e6:	e028      	b.n	801283a <_malloc_r+0x486>
 80127e8:	f104 0308 	add.w	r3, r4, #8
 80127ec:	6964      	ldr	r4, [r4, #20]
 80127ee:	42a3      	cmp	r3, r4
 80127f0:	bf08      	it	eq
 80127f2:	f10c 0c02 	addeq.w	ip, ip, #2
 80127f6:	f43f ae39 	beq.w	801246c <_malloc_r+0xb8>
 80127fa:	e601      	b.n	8012400 <_malloc_r+0x4c>
 80127fc:	4419      	add	r1, r3
 80127fe:	6848      	ldr	r0, [r1, #4]
 8012800:	461c      	mov	r4, r3
 8012802:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8012806:	68db      	ldr	r3, [r3, #12]
 8012808:	f040 0501 	orr.w	r5, r0, #1
 801280c:	604d      	str	r5, [r1, #4]
 801280e:	4638      	mov	r0, r7
 8012810:	60d3      	str	r3, [r2, #12]
 8012812:	609a      	str	r2, [r3, #8]
 8012814:	f000 f882 	bl	801291c <__malloc_unlock>
 8012818:	e602      	b.n	8012420 <_malloc_r+0x6c>
 801281a:	098a      	lsrs	r2, r1, #6
 801281c:	3238      	adds	r2, #56	; 0x38
 801281e:	0050      	lsls	r0, r2, #1
 8012820:	e7ae      	b.n	8012780 <_malloc_r+0x3cc>
 8012822:	42b4      	cmp	r4, r6
 8012824:	f43f aee3 	beq.w	80125ee <_malloc_r+0x23a>
 8012828:	68b4      	ldr	r4, [r6, #8]
 801282a:	6862      	ldr	r2, [r4, #4]
 801282c:	f022 0203 	bic.w	r2, r2, #3
 8012830:	e757      	b.n	80126e2 <_malloc_r+0x32e>
 8012832:	f8d8 8000 	ldr.w	r8, [r8]
 8012836:	4598      	cmp	r8, r3
 8012838:	d16b      	bne.n	8012912 <_malloc_r+0x55e>
 801283a:	f01c 0f03 	tst.w	ip, #3
 801283e:	f1a8 0308 	sub.w	r3, r8, #8
 8012842:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8012846:	d1f4      	bne.n	8012832 <_malloc_r+0x47e>
 8012848:	6873      	ldr	r3, [r6, #4]
 801284a:	ea23 0300 	bic.w	r3, r3, r0
 801284e:	6073      	str	r3, [r6, #4]
 8012850:	0040      	lsls	r0, r0, #1
 8012852:	4298      	cmp	r0, r3
 8012854:	f63f ae96 	bhi.w	8012584 <_malloc_r+0x1d0>
 8012858:	2800      	cmp	r0, #0
 801285a:	f43f ae93 	beq.w	8012584 <_malloc_r+0x1d0>
 801285e:	4203      	tst	r3, r0
 8012860:	46cc      	mov	ip, r9
 8012862:	f47f ae3f 	bne.w	80124e4 <_malloc_r+0x130>
 8012866:	0040      	lsls	r0, r0, #1
 8012868:	4203      	tst	r3, r0
 801286a:	f10c 0c04 	add.w	ip, ip, #4
 801286e:	d0fa      	beq.n	8012866 <_malloc_r+0x4b2>
 8012870:	e638      	b.n	80124e4 <_malloc_r+0x130>
 8012872:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8012876:	d816      	bhi.n	80128a6 <_malloc_r+0x4f2>
 8012878:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 801287c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8012880:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8012884:	e5d8      	b.n	8012438 <_malloc_r+0x84>
 8012886:	2301      	movs	r3, #1
 8012888:	f8c8 3004 	str.w	r3, [r8, #4]
 801288c:	4644      	mov	r4, r8
 801288e:	2200      	movs	r2, #0
 8012890:	e727      	b.n	80126e2 <_malloc_r+0x32e>
 8012892:	1092      	asrs	r2, r2, #2
 8012894:	2001      	movs	r0, #1
 8012896:	4090      	lsls	r0, r2
 8012898:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801289c:	4619      	mov	r1, r3
 801289e:	4302      	orrs	r2, r0
 80128a0:	f8c8 2004 	str.w	r2, [r8, #4]
 80128a4:	e77f      	b.n	80127a6 <_malloc_r+0x3f2>
 80128a6:	f240 5354 	movw	r3, #1364	; 0x554
 80128aa:	459c      	cmp	ip, r3
 80128ac:	bf9d      	ittte	ls
 80128ae:	ea4f 4c95 	movls.w	ip, r5, lsr #18
 80128b2:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80128b6:	ea4f 014c 	movls.w	r1, ip, lsl #1
 80128ba:	21fc      	movhi	r1, #252	; 0xfc
 80128bc:	bf88      	it	hi
 80128be:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 80128c2:	e5b9      	b.n	8012438 <_malloc_r+0x84>
 80128c4:	f3c2 010b 	ubfx	r1, r2, #0, #12
 80128c8:	2900      	cmp	r1, #0
 80128ca:	f47f ae9c 	bne.w	8012606 <_malloc_r+0x252>
 80128ce:	eb0c 0109 	add.w	r1, ip, r9
 80128d2:	68b2      	ldr	r2, [r6, #8]
 80128d4:	f041 0101 	orr.w	r1, r1, #1
 80128d8:	6051      	str	r1, [r2, #4]
 80128da:	e6ee      	b.n	80126ba <_malloc_r+0x306>
 80128dc:	f104 0108 	add.w	r1, r4, #8
 80128e0:	4638      	mov	r0, r7
 80128e2:	9200      	str	r2, [sp, #0]
 80128e4:	f000 f882 	bl	80129ec <_free_r>
 80128e8:	9a00      	ldr	r2, [sp, #0]
 80128ea:	6813      	ldr	r3, [r2, #0]
 80128ec:	e6e5      	b.n	80126ba <_malloc_r+0x306>
 80128ee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80128f2:	d803      	bhi.n	80128fc <_malloc_r+0x548>
 80128f4:	0bca      	lsrs	r2, r1, #15
 80128f6:	3277      	adds	r2, #119	; 0x77
 80128f8:	0050      	lsls	r0, r2, #1
 80128fa:	e741      	b.n	8012780 <_malloc_r+0x3cc>
 80128fc:	f240 5254 	movw	r2, #1364	; 0x554
 8012900:	4293      	cmp	r3, r2
 8012902:	bf9d      	ittte	ls
 8012904:	0c8a      	lsrls	r2, r1, #18
 8012906:	327c      	addls	r2, #124	; 0x7c
 8012908:	0050      	lslls	r0, r2, #1
 801290a:	20fc      	movhi	r0, #252	; 0xfc
 801290c:	bf88      	it	hi
 801290e:	227e      	movhi	r2, #126	; 0x7e
 8012910:	e736      	b.n	8012780 <_malloc_r+0x3cc>
 8012912:	6873      	ldr	r3, [r6, #4]
 8012914:	e79c      	b.n	8012850 <_malloc_r+0x49c>
 8012916:	bf00      	nop

08012918 <__malloc_lock>:
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop

0801291c <__malloc_unlock>:
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop

08012920 <_sbrk_r>:
 8012920:	b538      	push	{r3, r4, r5, lr}
 8012922:	f242 1474 	movw	r4, #8564	; 0x2174
 8012926:	2300      	movs	r3, #0
 8012928:	4605      	mov	r5, r0
 801292a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 801292e:	4608      	mov	r0, r1
 8012930:	6023      	str	r3, [r4, #0]
 8012932:	f000 f927 	bl	8012b84 <_sbrk>
 8012936:	1c43      	adds	r3, r0, #1
 8012938:	d000      	beq.n	801293c <_sbrk_r+0x1c>
 801293a:	bd38      	pop	{r3, r4, r5, pc}
 801293c:	6823      	ldr	r3, [r4, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d0fb      	beq.n	801293a <_sbrk_r+0x1a>
 8012942:	602b      	str	r3, [r5, #0]
 8012944:	bd38      	pop	{r3, r4, r5, pc}
 8012946:	bf00      	nop

08012948 <_malloc_trim_r>:
 8012948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294a:	f240 1464 	movw	r4, #356	; 0x164
 801294e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8012952:	460f      	mov	r7, r1
 8012954:	4605      	mov	r5, r0
 8012956:	f7ff ffdf 	bl	8012918 <__malloc_lock>
 801295a:	68a3      	ldr	r3, [r4, #8]
 801295c:	685e      	ldr	r6, [r3, #4]
 801295e:	f026 0603 	bic.w	r6, r6, #3
 8012962:	1bf7      	subs	r7, r6, r7
 8012964:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 8012968:	0b3f      	lsrs	r7, r7, #12
 801296a:	3f01      	subs	r7, #1
 801296c:	033f      	lsls	r7, r7, #12
 801296e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8012972:	db07      	blt.n	8012984 <_malloc_trim_r+0x3c>
 8012974:	4628      	mov	r0, r5
 8012976:	2100      	movs	r1, #0
 8012978:	f7ff ffd2 	bl	8012920 <_sbrk_r>
 801297c:	68a3      	ldr	r3, [r4, #8]
 801297e:	4433      	add	r3, r6
 8012980:	4298      	cmp	r0, r3
 8012982:	d004      	beq.n	801298e <_malloc_trim_r+0x46>
 8012984:	4628      	mov	r0, r5
 8012986:	f7ff ffc9 	bl	801291c <__malloc_unlock>
 801298a:	2000      	movs	r0, #0
 801298c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801298e:	4628      	mov	r0, r5
 8012990:	4279      	negs	r1, r7
 8012992:	f7ff ffc5 	bl	8012920 <_sbrk_r>
 8012996:	3001      	adds	r0, #1
 8012998:	d010      	beq.n	80129bc <_malloc_trim_r+0x74>
 801299a:	f640 13fc 	movw	r3, #2556	; 0x9fc
 801299e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80129a2:	681a      	ldr	r2, [r3, #0]
 80129a4:	68a1      	ldr	r1, [r4, #8]
 80129a6:	1bf6      	subs	r6, r6, r7
 80129a8:	f046 0601 	orr.w	r6, r6, #1
 80129ac:	4628      	mov	r0, r5
 80129ae:	1bd7      	subs	r7, r2, r7
 80129b0:	604e      	str	r6, [r1, #4]
 80129b2:	601f      	str	r7, [r3, #0]
 80129b4:	f7ff ffb2 	bl	801291c <__malloc_unlock>
 80129b8:	2001      	movs	r0, #1
 80129ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129bc:	4628      	mov	r0, r5
 80129be:	2100      	movs	r1, #0
 80129c0:	f7ff ffae 	bl	8012920 <_sbrk_r>
 80129c4:	68a3      	ldr	r3, [r4, #8]
 80129c6:	1ac2      	subs	r2, r0, r3
 80129c8:	2a0f      	cmp	r2, #15
 80129ca:	dddb      	ble.n	8012984 <_malloc_trim_r+0x3c>
 80129cc:	f240 5170 	movw	r1, #1392	; 0x570
 80129d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80129d4:	680c      	ldr	r4, [r1, #0]
 80129d6:	f640 11fc 	movw	r1, #2556	; 0x9fc
 80129da:	f042 0201 	orr.w	r2, r2, #1
 80129de:	1b00      	subs	r0, r0, r4
 80129e0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80129e4:	605a      	str	r2, [r3, #4]
 80129e6:	6008      	str	r0, [r1, #0]
 80129e8:	e7cc      	b.n	8012984 <_malloc_trim_r+0x3c>
 80129ea:	bf00      	nop

080129ec <_free_r>:
 80129ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129f0:	460e      	mov	r6, r1
 80129f2:	4681      	mov	r9, r0
 80129f4:	2900      	cmp	r1, #0
 80129f6:	d060      	beq.n	8012aba <_free_r+0xce>
 80129f8:	f7ff ff8e 	bl	8012918 <__malloc_lock>
 80129fc:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8012a00:	f1a6 0408 	sub.w	r4, r6, #8
 8012a04:	f021 0301 	bic.w	r3, r1, #1
 8012a08:	18e2      	adds	r2, r4, r3
 8012a0a:	6857      	ldr	r7, [r2, #4]
 8012a0c:	f240 1564 	movw	r5, #356	; 0x164
 8012a10:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8012a14:	f027 0003 	bic.w	r0, r7, #3
 8012a18:	68af      	ldr	r7, [r5, #8]
 8012a1a:	4297      	cmp	r7, r2
 8012a1c:	d062      	beq.n	8012ae4 <_free_r+0xf8>
 8012a1e:	f011 0c01 	ands.w	ip, r1, #1
 8012a22:	6050      	str	r0, [r2, #4]
 8012a24:	bf18      	it	ne
 8012a26:	2100      	movne	r1, #0
 8012a28:	d111      	bne.n	8012a4e <_free_r+0x62>
 8012a2a:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8012a2e:	f105 0808 	add.w	r8, r5, #8
 8012a32:	1a64      	subs	r4, r4, r1
 8012a34:	68a6      	ldr	r6, [r4, #8]
 8012a36:	440b      	add	r3, r1
 8012a38:	4546      	cmp	r6, r8
 8012a3a:	bf1d      	ittte	ne
 8012a3c:	f8d4 800c 	ldrne.w	r8, [r4, #12]
 8012a40:	4661      	movne	r1, ip
 8012a42:	f8c6 800c 	strne.w	r8, [r6, #12]
 8012a46:	2101      	moveq	r1, #1
 8012a48:	bf18      	it	ne
 8012a4a:	f8c8 6008 	strne.w	r6, [r8, #8]
 8012a4e:	1816      	adds	r6, r2, r0
 8012a50:	6876      	ldr	r6, [r6, #4]
 8012a52:	07f6      	lsls	r6, r6, #31
 8012a54:	d408      	bmi.n	8012a68 <_free_r+0x7c>
 8012a56:	4403      	add	r3, r0
 8012a58:	6890      	ldr	r0, [r2, #8]
 8012a5a:	b911      	cbnz	r1, 8012a62 <_free_r+0x76>
 8012a5c:	4e48      	ldr	r6, [pc, #288]	; (8012b80 <_free_r+0x194>)
 8012a5e:	42b0      	cmp	r0, r6
 8012a60:	d05f      	beq.n	8012b22 <_free_r+0x136>
 8012a62:	68d2      	ldr	r2, [r2, #12]
 8012a64:	60c2      	str	r2, [r0, #12]
 8012a66:	6090      	str	r0, [r2, #8]
 8012a68:	f043 0201 	orr.w	r2, r3, #1
 8012a6c:	6062      	str	r2, [r4, #4]
 8012a6e:	50e3      	str	r3, [r4, r3]
 8012a70:	b9f1      	cbnz	r1, 8012ab0 <_free_r+0xc4>
 8012a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a76:	d322      	bcc.n	8012abe <_free_r+0xd2>
 8012a78:	0a5a      	lsrs	r2, r3, #9
 8012a7a:	2a04      	cmp	r2, #4
 8012a7c:	d85a      	bhi.n	8012b34 <_free_r+0x148>
 8012a7e:	0998      	lsrs	r0, r3, #6
 8012a80:	3038      	adds	r0, #56	; 0x38
 8012a82:	0041      	lsls	r1, r0, #1
 8012a84:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8012a88:	68aa      	ldr	r2, [r5, #8]
 8012a8a:	f240 1164 	movw	r1, #356	; 0x164
 8012a8e:	42aa      	cmp	r2, r5
 8012a90:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8012a94:	d05a      	beq.n	8012b4c <_free_r+0x160>
 8012a96:	6851      	ldr	r1, [r2, #4]
 8012a98:	f021 0103 	bic.w	r1, r1, #3
 8012a9c:	428b      	cmp	r3, r1
 8012a9e:	d202      	bcs.n	8012aa6 <_free_r+0xba>
 8012aa0:	6892      	ldr	r2, [r2, #8]
 8012aa2:	4295      	cmp	r5, r2
 8012aa4:	d1f7      	bne.n	8012a96 <_free_r+0xaa>
 8012aa6:	68d3      	ldr	r3, [r2, #12]
 8012aa8:	60e3      	str	r3, [r4, #12]
 8012aaa:	60a2      	str	r2, [r4, #8]
 8012aac:	609c      	str	r4, [r3, #8]
 8012aae:	60d4      	str	r4, [r2, #12]
 8012ab0:	4648      	mov	r0, r9
 8012ab2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ab6:	f7ff bf31 	b.w	801291c <__malloc_unlock>
 8012aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012abe:	08db      	lsrs	r3, r3, #3
 8012ac0:	109a      	asrs	r2, r3, #2
 8012ac2:	2001      	movs	r0, #1
 8012ac4:	4090      	lsls	r0, r2
 8012ac6:	6869      	ldr	r1, [r5, #4]
 8012ac8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8012acc:	689a      	ldr	r2, [r3, #8]
 8012ace:	4301      	orrs	r1, r0
 8012ad0:	6069      	str	r1, [r5, #4]
 8012ad2:	60a2      	str	r2, [r4, #8]
 8012ad4:	60e3      	str	r3, [r4, #12]
 8012ad6:	4648      	mov	r0, r9
 8012ad8:	609c      	str	r4, [r3, #8]
 8012ada:	60d4      	str	r4, [r2, #12]
 8012adc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ae0:	f7ff bf1c 	b.w	801291c <__malloc_unlock>
 8012ae4:	07cf      	lsls	r7, r1, #31
 8012ae6:	4418      	add	r0, r3
 8012ae8:	d407      	bmi.n	8012afa <_free_r+0x10e>
 8012aea:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8012aee:	1a64      	subs	r4, r4, r1
 8012af0:	68e3      	ldr	r3, [r4, #12]
 8012af2:	68a2      	ldr	r2, [r4, #8]
 8012af4:	4408      	add	r0, r1
 8012af6:	60d3      	str	r3, [r2, #12]
 8012af8:	609a      	str	r2, [r3, #8]
 8012afa:	f240 526c 	movw	r2, #1388	; 0x56c
 8012afe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8012b02:	6813      	ldr	r3, [r2, #0]
 8012b04:	f040 0201 	orr.w	r2, r0, #1
 8012b08:	4298      	cmp	r0, r3
 8012b0a:	6062      	str	r2, [r4, #4]
 8012b0c:	60ac      	str	r4, [r5, #8]
 8012b0e:	d3cf      	bcc.n	8012ab0 <_free_r+0xc4>
 8012b10:	f640 13f8 	movw	r3, #2552	; 0x9f8
 8012b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b18:	6819      	ldr	r1, [r3, #0]
 8012b1a:	4648      	mov	r0, r9
 8012b1c:	f7ff ff14 	bl	8012948 <_malloc_trim_r>
 8012b20:	e7c6      	b.n	8012ab0 <_free_r+0xc4>
 8012b22:	f043 0201 	orr.w	r2, r3, #1
 8012b26:	616c      	str	r4, [r5, #20]
 8012b28:	612c      	str	r4, [r5, #16]
 8012b2a:	60e0      	str	r0, [r4, #12]
 8012b2c:	60a0      	str	r0, [r4, #8]
 8012b2e:	6062      	str	r2, [r4, #4]
 8012b30:	50e3      	str	r3, [r4, r3]
 8012b32:	e7bd      	b.n	8012ab0 <_free_r+0xc4>
 8012b34:	2a14      	cmp	r2, #20
 8012b36:	bf9c      	itt	ls
 8012b38:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 8012b3c:	0041      	lslls	r1, r0, #1
 8012b3e:	d9a1      	bls.n	8012a84 <_free_r+0x98>
 8012b40:	2a54      	cmp	r2, #84	; 0x54
 8012b42:	d80b      	bhi.n	8012b5c <_free_r+0x170>
 8012b44:	0b18      	lsrs	r0, r3, #12
 8012b46:	306e      	adds	r0, #110	; 0x6e
 8012b48:	0041      	lsls	r1, r0, #1
 8012b4a:	e79b      	b.n	8012a84 <_free_r+0x98>
 8012b4c:	1080      	asrs	r0, r0, #2
 8012b4e:	2501      	movs	r5, #1
 8012b50:	4085      	lsls	r5, r0
 8012b52:	6848      	ldr	r0, [r1, #4]
 8012b54:	4613      	mov	r3, r2
 8012b56:	4328      	orrs	r0, r5
 8012b58:	6048      	str	r0, [r1, #4]
 8012b5a:	e7a5      	b.n	8012aa8 <_free_r+0xbc>
 8012b5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012b60:	d803      	bhi.n	8012b6a <_free_r+0x17e>
 8012b62:	0bd8      	lsrs	r0, r3, #15
 8012b64:	3077      	adds	r0, #119	; 0x77
 8012b66:	0041      	lsls	r1, r0, #1
 8012b68:	e78c      	b.n	8012a84 <_free_r+0x98>
 8012b6a:	f240 5154 	movw	r1, #1364	; 0x554
 8012b6e:	428a      	cmp	r2, r1
 8012b70:	bf9d      	ittte	ls
 8012b72:	0c98      	lsrls	r0, r3, #18
 8012b74:	307c      	addls	r0, #124	; 0x7c
 8012b76:	0041      	lslls	r1, r0, #1
 8012b78:	21fc      	movhi	r1, #252	; 0xfc
 8012b7a:	bf88      	it	hi
 8012b7c:	207e      	movhi	r0, #126	; 0x7e
 8012b7e:	e781      	b.n	8012a84 <_free_r+0x98>
 8012b80:	2000016c 	.word	0x2000016c

08012b84 <_sbrk>:
 8012b84:	f640 2324 	movw	r3, #2596	; 0xa24
 8012b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012b8c:	6819      	ldr	r1, [r3, #0]
 8012b8e:	f242 1278 	movw	r2, #8568	; 0x2178
 8012b92:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8012b96:	2900      	cmp	r1, #0
 8012b98:	bf18      	it	ne
 8012b9a:	460a      	movne	r2, r1
 8012b9c:	4410      	add	r0, r2
 8012b9e:	6018      	str	r0, [r3, #0]
 8012ba0:	4610      	mov	r0, r2
 8012ba2:	4770      	bx	lr
